<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vulnerability | Bob1Bob2]]></title>
  <link href="http://wg135.github.io/blog/categories/vulnerability/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2017-07-18T13:14:06-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CVE-2017-7659 Apache Vulnerability Reproduce]]></title>
    <link href="http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce/"/>
    <updated>2017-07-18T10:41:52-05:00</updated>
    <id>http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce</id>
    <content type="html"><![CDATA[<p>Apache released fix for CVE-2017-7659 last month. It is a mod_http2 Null Pointer Dereference vulnerability. Here is my analysis.</p>

<!--more-->


<p>First check the patch for this vulnerability:</p>

<p><code>https://github.com/apache/httpd/commit/672187c168b94b562d8065e08e2cad5b00cdd0e3</code></p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture1.PNG" title="[title manually exploit [alt text]]" ></p>

<p>As we can see, fix just add check return value of function h2_request_rcreate.</p>

<h2>reproduce:</h2>

<p>First, download apache version 2.4.25: <a href="https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.">https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.</a> compile it and enable http2. I wrote a bash script to do download and configure it. After that use curl to verify if http2 is ready to go</p>

<p><code>curl -v --http2 http://192.168.79.136</code></p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture2.PNG" title="[title manually exploit [alt text]]" ></p>

<p>when you see HTTP/1.1 101 Switching Protocols, that means http2 is good to go.</p>

<p>now in burp send http request:</p>

<pre><code>GET / HTTP/1.0
User-Agent: curl/7.47.0
Accept: */*
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: AAMAAABkAAQAAP__
</code></pre>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture3.PNG" title="[title manually exploit [alt text]]" ></p>

<p>The server doesn&rsquo;t response.</p>

<h2>Analysis</h2>

<p>First check vulnerable function h2_stream_set_request_rec (in httpd-2.4.25/modules/http2/h2_stream.c)</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture4.PNG" title="[title manually exploit [alt text]]" ></p>

<p>function h2_stream_set_request_rec calls h2_request_rcreat is used to create http 2.0 request. req will be null when h2_request_rcreat fails.
In this situation, log function ap_log_rerror will use req which leads process crash.</p>

<p>next, exam function h2_request_rcreate (in httpd-2.4.25/modules/http2/h2_request.c).</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture5.PNG" title="[title manually exploit [alt text]]" ></p>

<p>it will set req vaule as NULL, then it will check value of r->method, scheme, r->hostname, path. If any of them is null will return fail. However, at this moment, req vaule is 0 which leads to crash.</p>

<p>Method, scheme and path are checked. So r->hostname is our winner.</p>

<p>in HTTP request, there are two methods can have host name.</p>

<p>(1) in URL. Like: <a href="http://fuckyou.com/shit.html.">http://fuckyou.com/shit.html.</a> Function ap_parse_uri will handle host value in this request.
(2) in HTTP header. Function fix_hostname will handle this.</p>

<p>check function ap_read_request (in httpd-2.4.25/server/protocol.c)</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture6.PNG" title="[title manually exploit [alt text]]" ></p>

<p>if r->hostname is empty and http request version is great than 1.1 or http version == 0 without host will return http400. But it doesn&rsquo;t check one situation: when http version is 1.0 and without hostname value. That is the problem.</p>

<h2>Debug</h2>

<p>See reference how to debug apache: <a href="https://httpd.apache.org/dev/debugging.html">https://httpd.apache.org/dev/debugging.html</a></p>

<p>set break point in function ap_read_request,</p>

<p>run the poc. it will hit break point at ap_read_request, h2_stream_set_request_rec</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture7.PNG" title="[title manually exploit [alt text]]" ></p>

<p>continue, it will hit break point at h2_stream_set_request_rec</p>

<p><img src="/images/blog/vulnerability/cve_2017_7659/Capture8.PNG" title="[title manually exploit [alt text]]" ></p>

<p>as we can see, it is in mod_http2.so.</p>

<p>(not finish)</p>
]]></content>
  </entry>
  
</feed>
